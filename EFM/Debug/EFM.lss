
EFM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004ec0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000e6  00802000  00004ec0  00004f54  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000164  008020e6  008020e6  0000503a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000503a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00005098  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003d0  00000000  00000000  000050d8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000ff4e  00000000  00000000  000054a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000047d3  00000000  00000000  000153f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00008389  00000000  00000000  00019bc9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000d70  00000000  00000000  00021f54  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0002e1d8  00000000  00000000  00022cc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000535d  00000000  00000000  00050e9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000330  00000000  00000000  00056200  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000bd17  00000000  00000000  00056530  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	32 c1       	rjmp	.+612    	; 0x266 <__ctors_end>
       2:	00 00       	nop
       4:	4d c1       	rjmp	.+666    	; 0x2a0 <__bad_interrupt>
       6:	00 00       	nop
       8:	4b c1       	rjmp	.+662    	; 0x2a0 <__bad_interrupt>
       a:	00 00       	nop
       c:	49 c1       	rjmp	.+658    	; 0x2a0 <__bad_interrupt>
       e:	00 00       	nop
      10:	47 c1       	rjmp	.+654    	; 0x2a0 <__bad_interrupt>
      12:	00 00       	nop
      14:	45 c1       	rjmp	.+650    	; 0x2a0 <__bad_interrupt>
      16:	00 00       	nop
      18:	43 c1       	rjmp	.+646    	; 0x2a0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	41 c1       	rjmp	.+642    	; 0x2a0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	3f c1       	rjmp	.+638    	; 0x2a0 <__bad_interrupt>
      22:	00 00       	nop
      24:	3d c1       	rjmp	.+634    	; 0x2a0 <__bad_interrupt>
      26:	00 00       	nop
      28:	3b c1       	rjmp	.+630    	; 0x2a0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	39 c1       	rjmp	.+626    	; 0x2a0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	37 c1       	rjmp	.+622    	; 0x2a0 <__bad_interrupt>
      32:	00 00       	nop
      34:	e6 c1       	rjmp	.+972    	; 0x402 <__vector_13>
      36:	00 00       	nop
      38:	33 c1       	rjmp	.+614    	; 0x2a0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	31 c1       	rjmp	.+610    	; 0x2a0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	2f c1       	rjmp	.+606    	; 0x2a0 <__bad_interrupt>
      42:	00 00       	nop
      44:	2d c1       	rjmp	.+602    	; 0x2a0 <__bad_interrupt>
      46:	00 00       	nop
      48:	2b c1       	rjmp	.+598    	; 0x2a0 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	29 c1       	rjmp	.+594    	; 0x2a0 <__bad_interrupt>
      4e:	00 00       	nop
      50:	27 c1       	rjmp	.+590    	; 0x2a0 <__bad_interrupt>
      52:	00 00       	nop
      54:	25 c1       	rjmp	.+586    	; 0x2a0 <__bad_interrupt>
      56:	00 00       	nop
      58:	23 c1       	rjmp	.+582    	; 0x2a0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	21 c1       	rjmp	.+578    	; 0x2a0 <__bad_interrupt>
      5e:	00 00       	nop
      60:	1f c1       	rjmp	.+574    	; 0x2a0 <__bad_interrupt>
      62:	00 00       	nop
      64:	1d c1       	rjmp	.+570    	; 0x2a0 <__bad_interrupt>
      66:	00 00       	nop
      68:	1b c1       	rjmp	.+566    	; 0x2a0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	19 c1       	rjmp	.+562    	; 0x2a0 <__bad_interrupt>
      6e:	00 00       	nop
      70:	17 c1       	rjmp	.+558    	; 0x2a0 <__bad_interrupt>
      72:	00 00       	nop
      74:	15 c1       	rjmp	.+554    	; 0x2a0 <__bad_interrupt>
      76:	00 00       	nop
      78:	13 c1       	rjmp	.+550    	; 0x2a0 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	11 c1       	rjmp	.+546    	; 0x2a0 <__bad_interrupt>
      7e:	00 00       	nop
      80:	0f c1       	rjmp	.+542    	; 0x2a0 <__bad_interrupt>
      82:	00 00       	nop
      84:	0d c1       	rjmp	.+538    	; 0x2a0 <__bad_interrupt>
      86:	00 00       	nop
      88:	0b c1       	rjmp	.+534    	; 0x2a0 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	09 c1       	rjmp	.+530    	; 0x2a0 <__bad_interrupt>
      8e:	00 00       	nop
      90:	07 c1       	rjmp	.+526    	; 0x2a0 <__bad_interrupt>
      92:	00 00       	nop
      94:	05 c1       	rjmp	.+522    	; 0x2a0 <__bad_interrupt>
      96:	00 00       	nop
      98:	03 c1       	rjmp	.+518    	; 0x2a0 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	01 c1       	rjmp	.+514    	; 0x2a0 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	ff c0       	rjmp	.+510    	; 0x2a0 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	fd c0       	rjmp	.+506    	; 0x2a0 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	fb c0       	rjmp	.+502    	; 0x2a0 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	f9 c0       	rjmp	.+498    	; 0x2a0 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	f7 c0       	rjmp	.+494    	; 0x2a0 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	f5 c0       	rjmp	.+490    	; 0x2a0 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	c7 c1       	rjmp	.+910    	; 0x448 <__vector_46>
      ba:	00 00       	nop
      bc:	f1 c0       	rjmp	.+482    	; 0x2a0 <__bad_interrupt>
      be:	00 00       	nop
      c0:	ef c0       	rjmp	.+478    	; 0x2a0 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	ed c0       	rjmp	.+474    	; 0x2a0 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	eb c0       	rjmp	.+470    	; 0x2a0 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	e9 c0       	rjmp	.+466    	; 0x2a0 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	e7 c0       	rjmp	.+462    	; 0x2a0 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	e5 c0       	rjmp	.+458    	; 0x2a0 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	e3 c0       	rjmp	.+454    	; 0x2a0 <__bad_interrupt>
      da:	00 00       	nop
      dc:	e1 c0       	rjmp	.+450    	; 0x2a0 <__bad_interrupt>
      de:	00 00       	nop
      e0:	df c0       	rjmp	.+446    	; 0x2a0 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	dd c0       	rjmp	.+442    	; 0x2a0 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	db c0       	rjmp	.+438    	; 0x2a0 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	d9 c0       	rjmp	.+434    	; 0x2a0 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	d7 c0       	rjmp	.+430    	; 0x2a0 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	d5 c0       	rjmp	.+426    	; 0x2a0 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	d3 c0       	rjmp	.+422    	; 0x2a0 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	d1 c0       	rjmp	.+418    	; 0x2a0 <__bad_interrupt>
      fe:	00 00       	nop
     100:	0c 94 8a 1b 	jmp	0x3714	; 0x3714 <__vector_64>
     104:	cd c0       	rjmp	.+410    	; 0x2a0 <__bad_interrupt>
     106:	00 00       	nop
     108:	cb c0       	rjmp	.+406    	; 0x2a0 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	c9 c0       	rjmp	.+402    	; 0x2a0 <__bad_interrupt>
     10e:	00 00       	nop
     110:	c7 c0       	rjmp	.+398    	; 0x2a0 <__bad_interrupt>
     112:	00 00       	nop
     114:	c5 c0       	rjmp	.+394    	; 0x2a0 <__bad_interrupt>
     116:	00 00       	nop
     118:	c3 c0       	rjmp	.+390    	; 0x2a0 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	0c 94 06 1c 	jmp	0x380c	; 0x380c <__vector_71>
     120:	0c 94 34 1c 	jmp	0x3868	; 0x3868 <__vector_72>
     124:	0c 94 62 1c 	jmp	0x38c4	; 0x38c4 <__vector_73>
     128:	0c 94 90 1c 	jmp	0x3920	; 0x3920 <__vector_74>
     12c:	b9 c0       	rjmp	.+370    	; 0x2a0 <__bad_interrupt>
     12e:	00 00       	nop
     130:	b7 c0       	rjmp	.+366    	; 0x2a0 <__bad_interrupt>
     132:	00 00       	nop
     134:	b5 c0       	rjmp	.+362    	; 0x2a0 <__bad_interrupt>
     136:	00 00       	nop
     138:	b3 c0       	rjmp	.+358    	; 0x2a0 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	b1 c0       	rjmp	.+354    	; 0x2a0 <__bad_interrupt>
     13e:	00 00       	nop
     140:	af c0       	rjmp	.+350    	; 0x2a0 <__bad_interrupt>
     142:	00 00       	nop
     144:	ad c0       	rjmp	.+346    	; 0x2a0 <__bad_interrupt>
     146:	00 00       	nop
     148:	ab c0       	rjmp	.+342    	; 0x2a0 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	a9 c0       	rjmp	.+338    	; 0x2a0 <__bad_interrupt>
     14e:	00 00       	nop
     150:	a7 c0       	rjmp	.+334    	; 0x2a0 <__bad_interrupt>
     152:	00 00       	nop
     154:	a5 c0       	rjmp	.+330    	; 0x2a0 <__bad_interrupt>
     156:	00 00       	nop
     158:	a3 c0       	rjmp	.+326    	; 0x2a0 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	a1 c0       	rjmp	.+322    	; 0x2a0 <__bad_interrupt>
     15e:	00 00       	nop
     160:	9f c0       	rjmp	.+318    	; 0x2a0 <__bad_interrupt>
     162:	00 00       	nop
     164:	9d c0       	rjmp	.+314    	; 0x2a0 <__bad_interrupt>
     166:	00 00       	nop
     168:	9b c0       	rjmp	.+310    	; 0x2a0 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	99 c0       	rjmp	.+306    	; 0x2a0 <__bad_interrupt>
     16e:	00 00       	nop
     170:	97 c0       	rjmp	.+302    	; 0x2a0 <__bad_interrupt>
     172:	00 00       	nop
     174:	95 c0       	rjmp	.+298    	; 0x2a0 <__bad_interrupt>
     176:	00 00       	nop
     178:	93 c0       	rjmp	.+294    	; 0x2a0 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	91 c0       	rjmp	.+290    	; 0x2a0 <__bad_interrupt>
     17e:	00 00       	nop
     180:	8f c0       	rjmp	.+286    	; 0x2a0 <__bad_interrupt>
     182:	00 00       	nop
     184:	8d c0       	rjmp	.+282    	; 0x2a0 <__bad_interrupt>
     186:	00 00       	nop
     188:	8b c0       	rjmp	.+278    	; 0x2a0 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	89 c0       	rjmp	.+274    	; 0x2a0 <__bad_interrupt>
     18e:	00 00       	nop
     190:	87 c0       	rjmp	.+270    	; 0x2a0 <__bad_interrupt>
     192:	00 00       	nop
     194:	85 c0       	rjmp	.+266    	; 0x2a0 <__bad_interrupt>
     196:	00 00       	nop
     198:	83 c0       	rjmp	.+262    	; 0x2a0 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	81 c0       	rjmp	.+258    	; 0x2a0 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	7f c0       	rjmp	.+254    	; 0x2a0 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	7d c0       	rjmp	.+250    	; 0x2a0 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	7b c0       	rjmp	.+246    	; 0x2a0 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	79 c0       	rjmp	.+242    	; 0x2a0 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	77 c0       	rjmp	.+238    	; 0x2a0 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	75 c0       	rjmp	.+234    	; 0x2a0 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	73 c0       	rjmp	.+230    	; 0x2a0 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	71 c0       	rjmp	.+226    	; 0x2a0 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	6f c0       	rjmp	.+222    	; 0x2a0 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	6d c0       	rjmp	.+218    	; 0x2a0 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	6b c0       	rjmp	.+214    	; 0x2a0 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	69 c0       	rjmp	.+210    	; 0x2a0 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	67 c0       	rjmp	.+206    	; 0x2a0 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	65 c0       	rjmp	.+202    	; 0x2a0 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	63 c0       	rjmp	.+198    	; 0x2a0 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	61 c0       	rjmp	.+194    	; 0x2a0 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	5f c0       	rjmp	.+190    	; 0x2a0 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	5d c0       	rjmp	.+186    	; 0x2a0 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	5b c0       	rjmp	.+182    	; 0x2a0 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	59 c0       	rjmp	.+178    	; 0x2a0 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	57 c0       	rjmp	.+174    	; 0x2a0 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	55 c0       	rjmp	.+170    	; 0x2a0 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	53 c0       	rjmp	.+166    	; 0x2a0 <__bad_interrupt>
     1fa:	00 00       	nop
     1fc:	03 6e       	ori	r16, 0xE3	; 227
     1fe:	db 36       	cpi	r29, 0x6B	; 107
     200:	3d 9a       	sbi	0x07, 5	; 7
     202:	99 99       	sbic	0x13, 1	; 19
     204:	99 3d       	cpi	r25, 0xD9	; 217
     206:	ab aa       	std	Y+51, r10	; 0x33
     208:	aa 2a       	or	r10, r26
     20a:	3e 00       	.word	0x003e	; ????
     20c:	00 00       	nop
     20e:	80 3f       	cpi	r24, 0xF0	; 240
     210:	08 4a       	sbci	r16, 0xA8	; 168
     212:	d7 3b       	cpi	r29, 0xB7	; 183
     214:	3b ce       	rjmp	.-906    	; 0xfffffe8c <__eeprom_end+0xff7efe8c>
     216:	01 6e       	ori	r16, 0xE1	; 225
     218:	84 bc       	out	0x24, r8	; 36
     21a:	bf fd       	.word	0xfdbf	; ????
     21c:	c1 2f       	mov	r28, r17
     21e:	3d 6c       	ori	r19, 0xCD	; 205
     220:	74 31       	cpi	r23, 0x14	; 20
     222:	9a bd       	out	0x2a, r25	; 42
     224:	56 83       	std	Z+6, r21	; 0x06
     226:	3d da       	rcall	.-2950   	; 0xfffff6a2 <__eeprom_end+0xff7ef6a2>
     228:	3d 00       	.word	0x003d	; ????
     22a:	c7 7f       	andi	r28, 0xF7	; 247
     22c:	11 be       	out	0x31, r1	; 49
     22e:	d9 e4       	ldi	r29, 0x49	; 73
     230:	bb 4c       	sbci	r27, 0xCB	; 203
     232:	3e 91       	ld	r19, -X
     234:	6b aa       	std	Y+51, r6	; 0x33
     236:	aa be       	out	0x3a, r10	; 58
     238:	00 00       	nop
     23a:	00 80       	ld	r0, Z
     23c:	3f 07       	cpc	r19, r31
     23e:	2c 7a       	andi	r18, 0xAC	; 172
     240:	a5 ba       	out	0x15, r10	; 21
     242:	6c c5       	rjmp	.+2776   	; 0xd1c <imu_update+0x2e2>
     244:	90 da       	rcall	.-2784   	; 0xfffff766 <__eeprom_end+0xff7ef766>
     246:	3b 93       	.word	0x933b	; ????
     248:	65 fc       	sbrc	r6, 5
     24a:	8b bc       	out	0x2b, r8	; 43
     24c:	53 f8       	bld	r5, 3
     24e:	10 fd       	sbrc	r17, 0
     250:	3c 56       	subi	r19, 0x6C	; 108
     252:	92 83       	std	Z+2, r25	; 0x02
     254:	4d bd       	out	0x2d, r20	; 45
     256:	87 9d       	mul	r24, r7
     258:	3a b6       	in	r3, 0x3a	; 58
     25a:	3d cb       	rjmp	.-2438   	; 0xfffff8d6 <__eeprom_end+0xff7ef8d6>
     25c:	c9 bf       	out	0x39, r28	; 57
     25e:	5b be       	out	0x3b, r5	; 59
     260:	73 da       	rcall	.-2842   	; 0xfffff748 <__eeprom_end+0xff7ef748>
     262:	0f c9       	rjmp	.-3554   	; 0xfffff482 <__eeprom_end+0xff7ef482>
     264:	3f 00       	.word	0x003f	; ????

00000266 <__ctors_end>:
     266:	11 24       	eor	r1, r1
     268:	1f be       	out	0x3f, r1	; 63
     26a:	cf ef       	ldi	r28, 0xFF	; 255
     26c:	cd bf       	out	0x3d, r28	; 61
     26e:	df e2       	ldi	r29, 0x2F	; 47
     270:	de bf       	out	0x3e, r29	; 62

00000272 <__do_copy_data>:
     272:	10 e2       	ldi	r17, 0x20	; 32
     274:	a0 e0       	ldi	r26, 0x00	; 0
     276:	b0 e2       	ldi	r27, 0x20	; 32
     278:	e0 ec       	ldi	r30, 0xC0	; 192
     27a:	fe e4       	ldi	r31, 0x4E	; 78
     27c:	02 c0       	rjmp	.+4      	; 0x282 <__do_copy_data+0x10>
     27e:	05 90       	lpm	r0, Z+
     280:	0d 92       	st	X+, r0
     282:	a6 3e       	cpi	r26, 0xE6	; 230
     284:	b1 07       	cpc	r27, r17
     286:	d9 f7       	brne	.-10     	; 0x27e <__do_copy_data+0xc>

00000288 <__do_clear_bss>:
     288:	22 e2       	ldi	r18, 0x22	; 34
     28a:	a6 ee       	ldi	r26, 0xE6	; 230
     28c:	b0 e2       	ldi	r27, 0x20	; 32
     28e:	01 c0       	rjmp	.+2      	; 0x292 <.do_clear_bss_start>

00000290 <.do_clear_bss_loop>:
     290:	1d 92       	st	X+, r1

00000292 <.do_clear_bss_start>:
     292:	aa 34       	cpi	r26, 0x4A	; 74
     294:	b2 07       	cpc	r27, r18
     296:	e1 f7       	brne	.-8      	; 0x290 <.do_clear_bss_loop>
     298:	0e 94 f7 1d 	call	0x3bee	; 0x3bee <main>
     29c:	0c 94 5e 27 	jmp	0x4ebc	; 0x4ebc <_exit>

000002a0 <__bad_interrupt>:
     2a0:	af ce       	rjmp	.-674    	; 0x0 <__vectors>

000002a2 <_read>:
#elif (defined(__GNUC__) && (XMEGA || MEGA) )

int _read (int *f); // Remove GCC compiler warning

int _read (int *f)
{
     2a2:	cf 93       	push	r28
     2a4:	df 93       	push	r29
     2a6:	1f 92       	push	r1
     2a8:	cd b7       	in	r28, 0x3d	; 61
     2aa:	de b7       	in	r29, 0x3e	; 62
	char c;
	ptr_get(stdio_base,&c);
     2ac:	80 91 3e 22 	lds	r24, 0x223E	; 0x80223e <stdio_base>
     2b0:	90 91 3f 22 	lds	r25, 0x223F	; 0x80223f <stdio_base+0x1>
     2b4:	e0 91 23 22 	lds	r30, 0x2223	; 0x802223 <ptr_get>
     2b8:	f0 91 24 22 	lds	r31, 0x2224	; 0x802224 <ptr_get+0x1>
     2bc:	be 01       	movw	r22, r28
     2be:	6f 5f       	subi	r22, 0xFF	; 255
     2c0:	7f 4f       	sbci	r23, 0xFF	; 255
     2c2:	09 95       	icall
	return c;
     2c4:	89 81       	ldd	r24, Y+1	; 0x01
}
     2c6:	08 2e       	mov	r0, r24
     2c8:	00 0c       	add	r0, r0
     2ca:	99 0b       	sbc	r25, r25
     2cc:	0f 90       	pop	r0
     2ce:	df 91       	pop	r29
     2d0:	cf 91       	pop	r28
     2d2:	08 95       	ret

000002d4 <twim_interrupt_handler>:
 * \brief Common TWI master interrupt service routine.
 *
 *  Check current status and calls the appropriate handler.
 */
static void twim_interrupt_handler(void)
{
     2d4:	cf 93       	push	r28
     2d6:	df 93       	push	r29
	uint8_t const master_status = transfer.bus->MASTER.STATUS;
     2d8:	e0 91 e6 20 	lds	r30, 0x20E6	; 0x8020e6 <__data_end>
     2dc:	f0 91 e7 20 	lds	r31, 0x20E7	; 0x8020e7 <__data_end+0x1>
     2e0:	84 81       	ldd	r24, Z+4	; 0x04

	if (master_status & TWI_MASTER_ARBLOST_bm) {
     2e2:	83 ff       	sbrs	r24, 3
     2e4:	08 c0       	rjmp	.+16     	; 0x2f6 <twim_interrupt_handler+0x22>

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
     2e6:	88 60       	ori	r24, 0x08	; 8
     2e8:	84 83       	std	Z+4, r24	; 0x04
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
     2ea:	83 e0       	ldi	r24, 0x03	; 3
     2ec:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_BUSY;
     2ee:	86 ef       	ldi	r24, 0xF6	; 246
     2f0:	80 93 f0 20 	sts	0x20F0, r24	; 0x8020f0 <__data_end+0xa>
     2f4:	83 c0       	rjmp	.+262    	; 0x3fc <twim_interrupt_handler+0x128>

	} else if ((master_status & TWI_MASTER_BUSERR_bm) ||
     2f6:	98 2f       	mov	r25, r24
     2f8:	94 71       	andi	r25, 0x14	; 20
     2fa:	31 f0       	breq	.+12     	; 0x308 <twim_interrupt_handler+0x34>
		(master_status & TWI_MASTER_RXACK_bm)) {

		transfer.bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
     2fc:	83 e0       	ldi	r24, 0x03	; 3
     2fe:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_IO_ERROR;
     300:	8f ef       	ldi	r24, 0xFF	; 255
     302:	80 93 f0 20 	sts	0x20F0, r24	; 0x8020f0 <__data_end+0xa>
     306:	7a c0       	rjmp	.+244    	; 0x3fc <twim_interrupt_handler+0x128>

	} else if (master_status & TWI_MASTER_WIF_bm) {
     308:	86 ff       	sbrs	r24, 6
     30a:	43 c0       	rjmp	.+134    	; 0x392 <twim_interrupt_handler+0xbe>
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 */
static inline void twim_write_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
     30c:	c6 ee       	ldi	r28, 0xE6	; 230
     30e:	d0 e2       	ldi	r29, 0x20	; 32
     310:	aa 81       	ldd	r26, Y+2	; 0x02
     312:	bb 81       	ldd	r27, Y+3	; 0x03

	if (transfer.addr_count < pkg->addr_length) {
     314:	8c 81       	ldd	r24, Y+4	; 0x04
     316:	9d 81       	ldd	r25, Y+5	; 0x05
     318:	14 96       	adiw	r26, 0x04	; 4
     31a:	2d 91       	ld	r18, X+
     31c:	3c 91       	ld	r19, X
     31e:	15 97       	sbiw	r26, 0x05	; 5
     320:	82 17       	cp	r24, r18
     322:	93 07       	cpc	r25, r19
     324:	6c f4       	brge	.+26     	; 0x340 <twim_interrupt_handler+0x6c>

		const uint8_t * const data = pkg->addr;
		bus->MASTER.DATA = data[transfer.addr_count++];
     326:	9c 01       	movw	r18, r24
     328:	2f 5f       	subi	r18, 0xFF	; 255
     32a:	3f 4f       	sbci	r19, 0xFF	; 255
     32c:	20 93 ea 20 	sts	0x20EA, r18	; 0x8020ea <__data_end+0x4>
     330:	30 93 eb 20 	sts	0x20EB, r19	; 0x8020eb <__data_end+0x5>
     334:	a8 0f       	add	r26, r24
     336:	b9 1f       	adc	r27, r25
     338:	11 96       	adiw	r26, 0x01	; 1
     33a:	8c 91       	ld	r24, X
     33c:	87 83       	std	Z+7, r24	; 0x07
     33e:	5e c0       	rjmp	.+188    	; 0x3fc <twim_interrupt_handler+0x128>

	} else if (transfer.data_count < pkg->length) {
     340:	80 91 ec 20 	lds	r24, 0x20EC	; 0x8020ec <__data_end+0x6>
     344:	90 91 ed 20 	lds	r25, 0x20ED	; 0x8020ed <__data_end+0x7>
     348:	18 96       	adiw	r26, 0x08	; 8
     34a:	2d 91       	ld	r18, X+
     34c:	3c 91       	ld	r19, X
     34e:	19 97       	sbiw	r26, 0x09	; 9
     350:	82 17       	cp	r24, r18
     352:	93 07       	cpc	r25, r19
     354:	c8 f4       	brcc	.+50     	; 0x388 <twim_interrupt_handler+0xb4>

		if (transfer.read) {
     356:	20 91 ee 20 	lds	r18, 0x20EE	; 0x8020ee <__data_end+0x8>
     35a:	22 23       	and	r18, r18
     35c:	21 f0       	breq	.+8      	; 0x366 <twim_interrupt_handler+0x92>

			/* Send repeated START condition (Address|R/W=1). */

			bus->MASTER.ADDR |= 0x01;
     35e:	86 81       	ldd	r24, Z+6	; 0x06
     360:	81 60       	ori	r24, 0x01	; 1
     362:	86 83       	std	Z+6, r24	; 0x06
     364:	4b c0       	rjmp	.+150    	; 0x3fc <twim_interrupt_handler+0x128>

		} else {
			const uint8_t * const data = pkg->buffer;
     366:	16 96       	adiw	r26, 0x06	; 6
     368:	2d 91       	ld	r18, X+
     36a:	3c 91       	ld	r19, X
     36c:	17 97       	sbiw	r26, 0x07	; 7
			bus->MASTER.DATA = data[transfer.data_count++];
     36e:	ac 01       	movw	r20, r24
     370:	4f 5f       	subi	r20, 0xFF	; 255
     372:	5f 4f       	sbci	r21, 0xFF	; 255
     374:	40 93 ec 20 	sts	0x20EC, r20	; 0x8020ec <__data_end+0x6>
     378:	50 93 ed 20 	sts	0x20ED, r21	; 0x8020ed <__data_end+0x7>
     37c:	d9 01       	movw	r26, r18
     37e:	a8 0f       	add	r26, r24
     380:	b9 1f       	adc	r27, r25
     382:	8c 91       	ld	r24, X
     384:	87 83       	std	Z+7, r24	; 0x07
     386:	3a c0       	rjmp	.+116    	; 0x3fc <twim_interrupt_handler+0x128>

	} else {

		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
     388:	83 e0       	ldi	r24, 0x03	; 3
     38a:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = STATUS_OK;
     38c:	10 92 f0 20 	sts	0x20F0, r1	; 0x8020f0 <__data_end+0xa>
     390:	35 c0       	rjmp	.+106    	; 0x3fc <twim_interrupt_handler+0x128>

	} else if (master_status & TWI_MASTER_WIF_bm) {

		twim_write_handler();

	} else if (master_status & TWI_MASTER_RIF_bm) {
     392:	88 23       	and	r24, r24
     394:	84 f5       	brge	.+96     	; 0x3f6 <twim_interrupt_handler+0x122>
 *  reading bytes from the TWI slave.
 */
static inline void twim_read_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
     396:	a6 ee       	ldi	r26, 0xE6	; 230
     398:	b0 e2       	ldi	r27, 0x20	; 32
     39a:	12 96       	adiw	r26, 0x02	; 2
     39c:	cd 91       	ld	r28, X+
     39e:	dc 91       	ld	r29, X
     3a0:	13 97       	sbiw	r26, 0x03	; 3

	if (transfer.data_count < pkg->length) {
     3a2:	16 96       	adiw	r26, 0x06	; 6
     3a4:	8d 91       	ld	r24, X+
     3a6:	9c 91       	ld	r25, X
     3a8:	17 97       	sbiw	r26, 0x07	; 7
     3aa:	28 85       	ldd	r18, Y+8	; 0x08
     3ac:	39 85       	ldd	r19, Y+9	; 0x09
     3ae:	82 17       	cp	r24, r18
     3b0:	93 07       	cpc	r25, r19
     3b2:	d8 f4       	brcc	.+54     	; 0x3ea <twim_interrupt_handler+0x116>

		uint8_t * const data = pkg->buffer;
     3b4:	6e 81       	ldd	r22, Y+6	; 0x06
     3b6:	7f 81       	ldd	r23, Y+7	; 0x07
		data[transfer.data_count++] = bus->MASTER.DATA;
     3b8:	9c 01       	movw	r18, r24
     3ba:	2f 5f       	subi	r18, 0xFF	; 255
     3bc:	3f 4f       	sbci	r19, 0xFF	; 255
     3be:	20 93 ec 20 	sts	0x20EC, r18	; 0x8020ec <__data_end+0x6>
     3c2:	30 93 ed 20 	sts	0x20ED, r19	; 0x8020ed <__data_end+0x7>
     3c6:	47 81       	ldd	r20, Z+7	; 0x07
     3c8:	db 01       	movw	r26, r22
     3ca:	a8 0f       	add	r26, r24
     3cc:	b9 1f       	adc	r27, r25
     3ce:	4c 93       	st	X, r20

		/* If there is more to read, issue ACK and start a byte read.
		 * Otherwise, issue NACK and STOP to complete the transaction.
		 */
		if (transfer.data_count < pkg->length) {
     3d0:	88 85       	ldd	r24, Y+8	; 0x08
     3d2:	99 85       	ldd	r25, Y+9	; 0x09
     3d4:	28 17       	cp	r18, r24
     3d6:	39 07       	cpc	r19, r25
     3d8:	18 f4       	brcc	.+6      	; 0x3e0 <twim_interrupt_handler+0x10c>

			bus->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
     3da:	82 e0       	ldi	r24, 0x02	; 2
     3dc:	83 83       	std	Z+3, r24	; 0x03
     3de:	0e c0       	rjmp	.+28     	; 0x3fc <twim_interrupt_handler+0x128>

		} else {

			bus->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
     3e0:	87 e0       	ldi	r24, 0x07	; 7
     3e2:	83 83       	std	Z+3, r24	; 0x03
			transfer.status = STATUS_OK;
     3e4:	10 92 f0 20 	sts	0x20F0, r1	; 0x8020f0 <__data_end+0xa>
     3e8:	09 c0       	rjmp	.+18     	; 0x3fc <twim_interrupt_handler+0x128>

	} else {

		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
     3ea:	83 e0       	ldi	r24, 0x03	; 3
     3ec:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_NO_MEMORY;
     3ee:	89 ef       	ldi	r24, 0xF9	; 249
     3f0:	80 93 f0 20 	sts	0x20F0, r24	; 0x8020f0 <__data_end+0xa>
     3f4:	03 c0       	rjmp	.+6      	; 0x3fc <twim_interrupt_handler+0x128>

		twim_read_handler();

	} else {

		transfer.status = ERR_PROTOCOL;
     3f6:	8b ef       	ldi	r24, 0xFB	; 251
     3f8:	80 93 f0 20 	sts	0x20F0, r24	; 0x8020f0 <__data_end+0xa>
	}
}
     3fc:	df 91       	pop	r29
     3fe:	cf 91       	pop	r28
     400:	08 95       	ret

00000402 <__vector_13>:
 * parameters specified in the global \c transfer structure.
 */
static void twim_interrupt_handler(void);

#ifdef TWIC
ISR(TWIC_TWIM_vect) { twim_interrupt_handler(); }
     402:	1f 92       	push	r1
     404:	0f 92       	push	r0
     406:	0f b6       	in	r0, 0x3f	; 63
     408:	0f 92       	push	r0
     40a:	11 24       	eor	r1, r1
     40c:	2f 93       	push	r18
     40e:	3f 93       	push	r19
     410:	4f 93       	push	r20
     412:	5f 93       	push	r21
     414:	6f 93       	push	r22
     416:	7f 93       	push	r23
     418:	8f 93       	push	r24
     41a:	9f 93       	push	r25
     41c:	af 93       	push	r26
     41e:	bf 93       	push	r27
     420:	ef 93       	push	r30
     422:	ff 93       	push	r31
     424:	57 df       	rcall	.-338    	; 0x2d4 <twim_interrupt_handler>
     426:	ff 91       	pop	r31
     428:	ef 91       	pop	r30
     42a:	bf 91       	pop	r27
     42c:	af 91       	pop	r26
     42e:	9f 91       	pop	r25
     430:	8f 91       	pop	r24
     432:	7f 91       	pop	r23
     434:	6f 91       	pop	r22
     436:	5f 91       	pop	r21
     438:	4f 91       	pop	r20
     43a:	3f 91       	pop	r19
     43c:	2f 91       	pop	r18
     43e:	0f 90       	pop	r0
     440:	0f be       	out	0x3f, r0	; 63
     442:	0f 90       	pop	r0
     444:	1f 90       	pop	r1
     446:	18 95       	reti

00000448 <__vector_46>:
#endif
#ifdef TWID
ISR(TWID_TWIM_vect) { twim_interrupt_handler(); }
#endif
#ifdef TWIE
ISR(TWIE_TWIM_vect) { twim_interrupt_handler(); }
     448:	1f 92       	push	r1
     44a:	0f 92       	push	r0
     44c:	0f b6       	in	r0, 0x3f	; 63
     44e:	0f 92       	push	r0
     450:	11 24       	eor	r1, r1
     452:	2f 93       	push	r18
     454:	3f 93       	push	r19
     456:	4f 93       	push	r20
     458:	5f 93       	push	r21
     45a:	6f 93       	push	r22
     45c:	7f 93       	push	r23
     45e:	8f 93       	push	r24
     460:	9f 93       	push	r25
     462:	af 93       	push	r26
     464:	bf 93       	push	r27
     466:	ef 93       	push	r30
     468:	ff 93       	push	r31
     46a:	34 df       	rcall	.-408    	; 0x2d4 <twim_interrupt_handler>
     46c:	ff 91       	pop	r31
     46e:	ef 91       	pop	r30
     470:	bf 91       	pop	r27
     472:	af 91       	pop	r26
     474:	9f 91       	pop	r25
     476:	8f 91       	pop	r24
     478:	7f 91       	pop	r23
     47a:	6f 91       	pop	r22
     47c:	5f 91       	pop	r21
     47e:	4f 91       	pop	r20
     480:	3f 91       	pop	r19
     482:	2f 91       	pop	r18
     484:	0f 90       	pop	r0
     486:	0f be       	out	0x3f, r0	; 63
     488:	0f 90       	pop	r0
     48a:	1f 90       	pop	r1
     48c:	18 95       	reti

0000048e <twi_master_init>:
 *                  (see \ref twi_options_t)
 * \retval STATUS_OK        Transaction is successful
 * \retval ERR_INVALID_ARG  Invalid arguments in \c opt.
 */
status_code_t twi_master_init(TWI_t *twi, const twi_options_t *opt)
{
     48e:	fc 01       	movw	r30, r24
	uint8_t const ctrla = CONF_TWIM_INTLVL | TWI_MASTER_RIEN_bm |
		TWI_MASTER_WIEN_bm | TWI_MASTER_ENABLE_bm;

	twi->MASTER.BAUD   = opt->speed_reg;
     490:	db 01       	movw	r26, r22
     492:	14 96       	adiw	r26, 0x04	; 4
     494:	8c 91       	ld	r24, X
     496:	85 83       	std	Z+5, r24	; 0x05
	twi->MASTER.CTRLA  = ctrla;
     498:	88 eb       	ldi	r24, 0xB8	; 184
     49a:	81 83       	std	Z+1, r24	; 0x01
	twi->MASTER.STATUS = TWI_MASTER_BUSSTATE_IDLE_gc;
     49c:	81 e0       	ldi	r24, 0x01	; 1
     49e:	84 83       	std	Z+4, r24	; 0x04

	transfer.locked    = false;
     4a0:	e6 ee       	ldi	r30, 0xE6	; 230
     4a2:	f0 e2       	ldi	r31, 0x20	; 32
     4a4:	11 86       	std	Z+9, r1	; 0x09
	transfer.status    = STATUS_OK;
     4a6:	12 86       	std	Z+10, r1	; 0x0a

	/* Enable configured PMIC interrupt level. */

	PMIC.CTRL |= CONF_PMIC_INTLVL;
     4a8:	e0 ea       	ldi	r30, 0xA0	; 160
     4aa:	f0 e0       	ldi	r31, 0x00	; 0
     4ac:	82 81       	ldd	r24, Z+2	; 0x02
     4ae:	82 60       	ori	r24, 0x02	; 2
     4b0:	82 83       	std	Z+2, r24	; 0x02

	cpu_irq_enable();
     4b2:	78 94       	sei

	return STATUS_OK;
}
     4b4:	80 e0       	ldi	r24, 0x00	; 0
     4b6:	08 95       	ret

000004b8 <twi_master_transfer>:
 *      - ERR_PROTOCOL to indicate an unexpected bus state
 *      - ERR_INVALID_ARG to indicate invalid arguments.
 */
status_code_t twi_master_transfer(TWI_t *twi,
		const twi_package_t *package, bool read)
{
     4b8:	cf 93       	push	r28
     4ba:	df 93       	push	r29
     4bc:	1f 92       	push	r1
     4be:	cd b7       	in	r28, 0x3d	; 61
     4c0:	de b7       	in	r29, 0x3e	; 62
     4c2:	9c 01       	movw	r18, r24
     4c4:	fb 01       	movw	r30, r22
	/* Do a sanity check on the arguments. */

	if ((twi == NULL) || (package == NULL)) {
     4c6:	89 2b       	or	r24, r25
     4c8:	09 f4       	brne	.+2      	; 0x4cc <twi_master_transfer+0x14>
     4ca:	51 c0       	rjmp	.+162    	; 0x56e <twi_master_transfer+0xb6>
     4cc:	30 97       	sbiw	r30, 0x00	; 0
     4ce:	09 f4       	brne	.+2      	; 0x4d2 <twi_master_transfer+0x1a>
     4d0:	50 c0       	rjmp	.+160    	; 0x572 <twi_master_transfer+0xba>
		return ERR_INVALID_ARG;
	}

	/* Initiate a transaction when the bus is ready. */

	status_code_t status = twim_acquire(package->no_wait);
     4d2:	92 85       	ldd	r25, Z+10	; 0x0a
 *
 * \return STATUS_OK if the bus is acquired, else ERR_BUSY.
 */
static inline status_code_t twim_acquire(bool no_wait)
{
	while (transfer.locked) {
     4d4:	80 91 ef 20 	lds	r24, 0x20EF	; 0x8020ef <__data_end+0x9>
     4d8:	88 23       	and	r24, r24
     4da:	19 f0       	breq	.+6      	; 0x4e2 <twi_master_transfer+0x2a>

		if (no_wait) { return ERR_BUSY; }
     4dc:	99 23       	and	r25, r25
     4de:	f1 f3       	breq	.-4      	; 0x4dc <twi_master_transfer+0x24>
     4e0:	4a c0       	rjmp	.+148    	; 0x576 <twi_master_transfer+0xbe>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     4e2:	8f b7       	in	r24, 0x3f	; 63
     4e4:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     4e6:	f8 94       	cli
	return flags;
     4e8:	89 81       	ldd	r24, Y+1	; 0x01
	}

	irqflags_t const flags = cpu_irq_save ();

	transfer.locked = true;
     4ea:	a6 ee       	ldi	r26, 0xE6	; 230
     4ec:	b0 e2       	ldi	r27, 0x20	; 32
     4ee:	91 e0       	ldi	r25, 0x01	; 1
     4f0:	19 96       	adiw	r26, 0x09	; 9
     4f2:	9c 93       	st	X, r25
     4f4:	19 97       	sbiw	r26, 0x09	; 9
	transfer.status = OPERATION_IN_PROGRESS;
     4f6:	90 e8       	ldi	r25, 0x80	; 128
     4f8:	1a 96       	adiw	r26, 0x0a	; 10
     4fa:	9c 93       	st	X, r25
     4fc:	1a 97       	sbiw	r26, 0x0a	; 10
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     4fe:	8f bf       	out	0x3f, r24	; 63
	/* Initiate a transaction when the bus is ready. */

	status_code_t status = twim_acquire(package->no_wait);

	if (STATUS_OK == status) {
		transfer.bus         = (TWI_t *) twi;
     500:	2d 93       	st	X+, r18
     502:	3c 93       	st	X, r19
     504:	11 97       	sbiw	r26, 0x01	; 1
		transfer.pkg         = (twi_package_t *) package;
     506:	12 96       	adiw	r26, 0x02	; 2
     508:	6d 93       	st	X+, r22
     50a:	7c 93       	st	X, r23
     50c:	13 97       	sbiw	r26, 0x03	; 3
		transfer.addr_count  = 0;
     50e:	14 96       	adiw	r26, 0x04	; 4
     510:	1d 92       	st	X+, r1
     512:	1c 92       	st	X, r1
     514:	15 97       	sbiw	r26, 0x05	; 5
		transfer.data_count  = 0;
     516:	16 96       	adiw	r26, 0x06	; 6
     518:	1d 92       	st	X+, r1
     51a:	1c 92       	st	X, r1
     51c:	17 97       	sbiw	r26, 0x07	; 7
		transfer.read        = read;
     51e:	18 96       	adiw	r26, 0x08	; 8
     520:	4c 93       	st	X, r20

		uint8_t const chip = (package->chip) << 1;
     522:	80 81       	ld	r24, Z
     524:	88 0f       	add	r24, r24

		if (package->addr_length || (false == read)) {
     526:	64 81       	ldd	r22, Z+4	; 0x04
     528:	75 81       	ldd	r23, Z+5	; 0x05
     52a:	67 2b       	or	r22, r23
     52c:	11 f4       	brne	.+4      	; 0x532 <twi_master_transfer+0x7a>
     52e:	41 11       	cpse	r20, r1
     530:	03 c0       	rjmp	.+6      	; 0x538 <twi_master_transfer+0x80>
			transfer.bus->MASTER.ADDR = chip;
     532:	f9 01       	movw	r30, r18
     534:	86 83       	std	Z+6, r24	; 0x06
     536:	03 c0       	rjmp	.+6      	; 0x53e <twi_master_transfer+0x86>
		} else if (read) {
			transfer.bus->MASTER.ADDR = chip | 0x01;
     538:	81 60       	ori	r24, 0x01	; 1
     53a:	f9 01       	movw	r30, r18
     53c:	86 83       	std	Z+6, r24	; 0x06
{
	/* First wait for the driver event handler to indicate something
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);
     53e:	e6 ee       	ldi	r30, 0xE6	; 230
     540:	f0 e2       	ldi	r31, 0x20	; 32
     542:	92 85       	ldd	r25, Z+10	; 0x0a
     544:	90 38       	cpi	r25, 0x80	; 128
     546:	e9 f3       	breq	.-6      	; 0x542 <twi_master_transfer+0x8a>
 * \retval  false   The bus is currently busy.
 */
static inline bool twim_idle (const TWI_t * twi)
{

	return ((twi->MASTER.STATUS & TWI_MASTER_BUSSTATE_gm)
     548:	f9 01       	movw	r30, r18
     54a:	84 81       	ldd	r24, Z+4	; 0x04
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);

	while (! twim_idle(transfer.bus)) { barrier(); }
     54c:	83 70       	andi	r24, 0x03	; 3
     54e:	81 30       	cpi	r24, 0x01	; 1
     550:	49 f0       	breq	.+18     	; 0x564 <twi_master_transfer+0xac>
     552:	a6 ee       	ldi	r26, 0xE6	; 230
     554:	b0 e2       	ldi	r27, 0x20	; 32
     556:	ed 91       	ld	r30, X+
     558:	fc 91       	ld	r31, X
     55a:	11 97       	sbiw	r26, 0x01	; 1
 * \retval  false   The bus is currently busy.
 */
static inline bool twim_idle (const TWI_t * twi)
{

	return ((twi->MASTER.STATUS & TWI_MASTER_BUSSTATE_gm)
     55c:	84 81       	ldd	r24, Z+4	; 0x04
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);

	while (! twim_idle(transfer.bus)) { barrier(); }
     55e:	83 70       	andi	r24, 0x03	; 3
     560:	81 30       	cpi	r24, 0x01	; 1
     562:	c9 f7       	brne	.-14     	; 0x556 <twi_master_transfer+0x9e>

	status_code_t const status = transfer.status;
     564:	e6 ee       	ldi	r30, 0xE6	; 230
     566:	f0 e2       	ldi	r31, 0x20	; 32
     568:	82 85       	ldd	r24, Z+10	; 0x0a

	transfer.locked = false;
     56a:	11 86       	std	Z+9, r1	; 0x09
     56c:	05 c0       	rjmp	.+10     	; 0x578 <twi_master_transfer+0xc0>
		const twi_package_t *package, bool read)
{
	/* Do a sanity check on the arguments. */

	if ((twi == NULL) || (package == NULL)) {
		return ERR_INVALID_ARG;
     56e:	88 ef       	ldi	r24, 0xF8	; 248
     570:	03 c0       	rjmp	.+6      	; 0x578 <twi_master_transfer+0xc0>
     572:	88 ef       	ldi	r24, 0xF8	; 248
     574:	01 c0       	rjmp	.+2      	; 0x578 <twi_master_transfer+0xc0>
 */
static inline status_code_t twim_acquire(bool no_wait)
{
	while (transfer.locked) {

		if (no_wait) { return ERR_BUSY; }
     576:	86 ef       	ldi	r24, 0xF6	; 246

		status = twim_release();
	}

	return status;
}
     578:	0f 90       	pop	r0
     57a:	df 91       	pop	r29
     57c:	cf 91       	pop	r28
     57e:	08 95       	ret

00000580 <usart_putchar>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
     580:	fc 01       	movw	r30, r24
     582:	91 81       	ldd	r25, Z+1	; 0x01
     584:	95 ff       	sbrs	r25, 5
     586:	fd cf       	rjmp	.-6      	; 0x582 <usart_putchar+0x2>
     588:	60 83       	st	Z, r22
     58a:	80 e0       	ldi	r24, 0x00	; 0
     58c:	90 e0       	ldi	r25, 0x00	; 0
     58e:	08 95       	ret

00000590 <usart_getchar>:
     590:	fc 01       	movw	r30, r24
     592:	91 81       	ldd	r25, Z+1	; 0x01
     594:	99 23       	and	r25, r25
     596:	ec f7       	brge	.-6      	; 0x592 <usart_getchar+0x2>
     598:	80 81       	ld	r24, Z
     59a:	08 95       	ret

0000059c <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
     59c:	4f 92       	push	r4
     59e:	5f 92       	push	r5
     5a0:	6f 92       	push	r6
     5a2:	7f 92       	push	r7
     5a4:	8f 92       	push	r8
     5a6:	9f 92       	push	r9
     5a8:	af 92       	push	r10
     5aa:	bf 92       	push	r11
     5ac:	ef 92       	push	r14
     5ae:	ff 92       	push	r15
     5b0:	0f 93       	push	r16
     5b2:	1f 93       	push	r17
     5b4:	cf 93       	push	r28
     5b6:	7c 01       	movw	r14, r24
     5b8:	4a 01       	movw	r8, r20
     5ba:	5b 01       	movw	r10, r22
     5bc:	28 01       	movw	r4, r16
     5be:	39 01       	movw	r6, r18
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     5c0:	fc 01       	movw	r30, r24
     5c2:	84 81       	ldd	r24, Z+4	; 0x04
     5c4:	82 ff       	sbrs	r24, 2
     5c6:	16 c0       	rjmp	.+44     	; 0x5f4 <usart_set_baudrate+0x58>

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
     5c8:	d9 01       	movw	r26, r18
     5ca:	c8 01       	movw	r24, r16
     5cc:	68 94       	set
     5ce:	12 f8       	bld	r1, 2
     5d0:	b6 95       	lsr	r27
     5d2:	a7 95       	ror	r26
     5d4:	97 95       	ror	r25
     5d6:	87 95       	ror	r24
     5d8:	16 94       	lsr	r1
     5da:	d1 f7       	brne	.-12     	; 0x5d0 <usart_set_baudrate+0x34>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
     5dc:	b9 01       	movw	r22, r18
     5de:	a8 01       	movw	r20, r16
     5e0:	03 2e       	mov	r0, r19
     5e2:	36 e1       	ldi	r19, 0x16	; 22
     5e4:	76 95       	lsr	r23
     5e6:	67 95       	ror	r22
     5e8:	57 95       	ror	r21
     5ea:	47 95       	ror	r20
     5ec:	3a 95       	dec	r19
     5ee:	d1 f7       	brne	.-12     	; 0x5e4 <usart_set_baudrate+0x48>
     5f0:	30 2d       	mov	r19, r0
     5f2:	15 c0       	rjmp	.+42     	; 0x61e <usart_set_baudrate+0x82>

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
		max_rate /= 2;
     5f4:	d9 01       	movw	r26, r18
     5f6:	c8 01       	movw	r24, r16
     5f8:	68 94       	set
     5fa:	13 f8       	bld	r1, 3
     5fc:	b6 95       	lsr	r27
     5fe:	a7 95       	ror	r26
     600:	97 95       	ror	r25
     602:	87 95       	ror	r24
     604:	16 94       	lsr	r1
     606:	d1 f7       	brne	.-12     	; 0x5fc <usart_set_baudrate+0x60>
		min_rate /= 2;
     608:	b9 01       	movw	r22, r18
     60a:	a8 01       	movw	r20, r16
     60c:	03 2e       	mov	r0, r19
     60e:	37 e1       	ldi	r19, 0x17	; 23
     610:	76 95       	lsr	r23
     612:	67 95       	ror	r22
     614:	57 95       	ror	r21
     616:	47 95       	ror	r20
     618:	3a 95       	dec	r19
     61a:	d1 f7       	brne	.-12     	; 0x610 <usart_set_baudrate+0x74>
     61c:	30 2d       	mov	r19, r0
	}

	if ((baud > max_rate) || (baud < min_rate)) {
     61e:	88 15       	cp	r24, r8
     620:	99 05       	cpc	r25, r9
     622:	aa 05       	cpc	r26, r10
     624:	bb 05       	cpc	r27, r11
     626:	08 f4       	brcc	.+2      	; 0x62a <usart_set_baudrate+0x8e>
     628:	a6 c0       	rjmp	.+332    	; 0x776 <usart_set_baudrate+0x1da>
     62a:	84 16       	cp	r8, r20
     62c:	95 06       	cpc	r9, r21
     62e:	a6 06       	cpc	r10, r22
     630:	b7 06       	cpc	r11, r23
     632:	08 f4       	brcc	.+2      	; 0x636 <usart_set_baudrate+0x9a>
     634:	a2 c0       	rjmp	.+324    	; 0x77a <usart_set_baudrate+0x1de>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     636:	f7 01       	movw	r30, r14
     638:	84 81       	ldd	r24, Z+4	; 0x04
     63a:	82 fd       	sbrc	r24, 2
     63c:	04 c0       	rjmp	.+8      	; 0x646 <usart_set_baudrate+0xaa>
		baud *= 2;
     63e:	88 0c       	add	r8, r8
     640:	99 1c       	adc	r9, r9
     642:	aa 1c       	adc	r10, r10
     644:	bb 1c       	adc	r11, r11
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
     646:	c3 01       	movw	r24, r6
     648:	b2 01       	movw	r22, r4
     64a:	a5 01       	movw	r20, r10
     64c:	94 01       	movw	r18, r8
     64e:	0e 94 ba 22 	call	0x4574	; 0x4574 <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
     652:	2f 3f       	cpi	r18, 0xFF	; 255
     654:	31 05       	cpc	r19, r1
     656:	41 05       	cpc	r20, r1
     658:	51 05       	cpc	r21, r1
     65a:	08 f4       	brcc	.+2      	; 0x65e <usart_set_baudrate+0xc2>
     65c:	90 c0       	rjmp	.+288    	; 0x77e <usart_set_baudrate+0x1e2>
     65e:	8f ef       	ldi	r24, 0xFF	; 255
     660:	90 e0       	ldi	r25, 0x00	; 0
     662:	a0 e0       	ldi	r26, 0x00	; 0
     664:	b0 e0       	ldi	r27, 0x00	; 0
     666:	c9 ef       	ldi	r28, 0xF9	; 249
     668:	05 c0       	rjmp	.+10     	; 0x674 <usart_set_baudrate+0xd8>
     66a:	28 17       	cp	r18, r24
     66c:	39 07       	cpc	r19, r25
     66e:	4a 07       	cpc	r20, r26
     670:	5b 07       	cpc	r21, r27
     672:	58 f0       	brcs	.+22     	; 0x68a <usart_set_baudrate+0xee>
			break;
		}

		limit <<= 1;
     674:	88 0f       	add	r24, r24
     676:	99 1f       	adc	r25, r25
     678:	aa 1f       	adc	r26, r26
     67a:	bb 1f       	adc	r27, r27

		if (exp < -3) {
     67c:	cd 3f       	cpi	r28, 0xFD	; 253
     67e:	0c f4       	brge	.+2      	; 0x682 <usart_set_baudrate+0xe6>
			limit |= 1;
     680:	81 60       	ori	r24, 0x01	; 1
     682:	cf 5f       	subi	r28, 0xFF	; 255

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     684:	c7 30       	cpi	r28, 0x07	; 7
     686:	89 f7       	brne	.-30     	; 0x66a <usart_set_baudrate+0xce>
     688:	4f c0       	rjmp	.+158    	; 0x728 <usart_set_baudrate+0x18c>
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
     68a:	cc 23       	and	r28, r28
     68c:	0c f0       	brlt	.+2      	; 0x690 <usart_set_baudrate+0xf4>
     68e:	4c c0       	rjmp	.+152    	; 0x728 <usart_set_baudrate+0x18c>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
     690:	d5 01       	movw	r26, r10
     692:	c4 01       	movw	r24, r8
     694:	88 0f       	add	r24, r24
     696:	99 1f       	adc	r25, r25
     698:	aa 1f       	adc	r26, r26
     69a:	bb 1f       	adc	r27, r27
     69c:	88 0f       	add	r24, r24
     69e:	99 1f       	adc	r25, r25
     6a0:	aa 1f       	adc	r26, r26
     6a2:	bb 1f       	adc	r27, r27
     6a4:	88 0f       	add	r24, r24
     6a6:	99 1f       	adc	r25, r25
     6a8:	aa 1f       	adc	r26, r26
     6aa:	bb 1f       	adc	r27, r27
     6ac:	48 1a       	sub	r4, r24
     6ae:	59 0a       	sbc	r5, r25
     6b0:	6a 0a       	sbc	r6, r26
     6b2:	7b 0a       	sbc	r7, r27
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
     6b4:	ce 3f       	cpi	r28, 0xFE	; 254
     6b6:	f4 f4       	brge	.+60     	; 0x6f4 <usart_set_baudrate+0x158>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
     6b8:	8d ef       	ldi	r24, 0xFD	; 253
     6ba:	9f ef       	ldi	r25, 0xFF	; 255
     6bc:	8c 1b       	sub	r24, r28
     6be:	91 09       	sbc	r25, r1
     6c0:	c7 fd       	sbrc	r28, 7
     6c2:	93 95       	inc	r25
     6c4:	04 c0       	rjmp	.+8      	; 0x6ce <usart_set_baudrate+0x132>
     6c6:	44 0c       	add	r4, r4
     6c8:	55 1c       	adc	r5, r5
     6ca:	66 1c       	adc	r6, r6
     6cc:	77 1c       	adc	r7, r7
     6ce:	8a 95       	dec	r24
     6d0:	d2 f7       	brpl	.-12     	; 0x6c6 <usart_set_baudrate+0x12a>
     6d2:	d5 01       	movw	r26, r10
     6d4:	c4 01       	movw	r24, r8
     6d6:	b6 95       	lsr	r27
     6d8:	a7 95       	ror	r26
     6da:	97 95       	ror	r25
     6dc:	87 95       	ror	r24
     6de:	bc 01       	movw	r22, r24
     6e0:	cd 01       	movw	r24, r26
     6e2:	64 0d       	add	r22, r4
     6e4:	75 1d       	adc	r23, r5
     6e6:	86 1d       	adc	r24, r6
     6e8:	97 1d       	adc	r25, r7
     6ea:	a5 01       	movw	r20, r10
     6ec:	94 01       	movw	r18, r8
     6ee:	0e 94 ba 22 	call	0x4574	; 0x4574 <__udivmodsi4>
     6f2:	37 c0       	rjmp	.+110    	; 0x762 <usart_set_baudrate+0x1c6>
		} else {
			baud <<= exp + 3;
     6f4:	83 e0       	ldi	r24, 0x03	; 3
     6f6:	8c 0f       	add	r24, r28
     6f8:	a5 01       	movw	r20, r10
     6fa:	94 01       	movw	r18, r8
     6fc:	04 c0       	rjmp	.+8      	; 0x706 <usart_set_baudrate+0x16a>
     6fe:	22 0f       	add	r18, r18
     700:	33 1f       	adc	r19, r19
     702:	44 1f       	adc	r20, r20
     704:	55 1f       	adc	r21, r21
     706:	8a 95       	dec	r24
     708:	d2 f7       	brpl	.-12     	; 0x6fe <usart_set_baudrate+0x162>
			div = (cpu_hz + baud / 2) / baud;
     70a:	da 01       	movw	r26, r20
     70c:	c9 01       	movw	r24, r18
     70e:	b6 95       	lsr	r27
     710:	a7 95       	ror	r26
     712:	97 95       	ror	r25
     714:	87 95       	ror	r24
     716:	bc 01       	movw	r22, r24
     718:	cd 01       	movw	r24, r26
     71a:	64 0d       	add	r22, r4
     71c:	75 1d       	adc	r23, r5
     71e:	86 1d       	adc	r24, r6
     720:	97 1d       	adc	r25, r7
     722:	0e 94 ba 22 	call	0x4574	; 0x4574 <__udivmodsi4>
     726:	1d c0       	rjmp	.+58     	; 0x762 <usart_set_baudrate+0x1c6>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
     728:	83 e0       	ldi	r24, 0x03	; 3
     72a:	8c 0f       	add	r24, r28
     72c:	a5 01       	movw	r20, r10
     72e:	94 01       	movw	r18, r8
     730:	04 c0       	rjmp	.+8      	; 0x73a <usart_set_baudrate+0x19e>
     732:	22 0f       	add	r18, r18
     734:	33 1f       	adc	r19, r19
     736:	44 1f       	adc	r20, r20
     738:	55 1f       	adc	r21, r21
     73a:	8a 95       	dec	r24
     73c:	d2 f7       	brpl	.-12     	; 0x732 <usart_set_baudrate+0x196>
		div = (cpu_hz + baud / 2) / baud - 1;
     73e:	da 01       	movw	r26, r20
     740:	c9 01       	movw	r24, r18
     742:	b6 95       	lsr	r27
     744:	a7 95       	ror	r26
     746:	97 95       	ror	r25
     748:	87 95       	ror	r24
     74a:	bc 01       	movw	r22, r24
     74c:	cd 01       	movw	r24, r26
     74e:	64 0d       	add	r22, r4
     750:	75 1d       	adc	r23, r5
     752:	86 1d       	adc	r24, r6
     754:	97 1d       	adc	r25, r7
     756:	0e 94 ba 22 	call	0x4574	; 0x4574 <__udivmodsi4>
     75a:	21 50       	subi	r18, 0x01	; 1
     75c:	31 09       	sbc	r19, r1
     75e:	41 09       	sbc	r20, r1
     760:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
     762:	83 2f       	mov	r24, r19
     764:	8f 70       	andi	r24, 0x0F	; 15
     766:	c2 95       	swap	r28
     768:	c0 7f       	andi	r28, 0xF0	; 240
     76a:	c8 2b       	or	r28, r24
     76c:	f7 01       	movw	r30, r14
     76e:	c7 83       	std	Z+7, r28	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
     770:	26 83       	std	Z+6, r18	; 0x06

	return true;
     772:	81 e0       	ldi	r24, 0x01	; 1
     774:	18 c0       	rjmp	.+48     	; 0x7a6 <usart_set_baudrate+0x20a>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
     776:	80 e0       	ldi	r24, 0x00	; 0
     778:	16 c0       	rjmp	.+44     	; 0x7a6 <usart_set_baudrate+0x20a>
     77a:	80 e0       	ldi	r24, 0x00	; 0
     77c:	14 c0       	rjmp	.+40     	; 0x7a6 <usart_set_baudrate+0x20a>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
     77e:	d5 01       	movw	r26, r10
     780:	c4 01       	movw	r24, r8
     782:	88 0f       	add	r24, r24
     784:	99 1f       	adc	r25, r25
     786:	aa 1f       	adc	r26, r26
     788:	bb 1f       	adc	r27, r27
     78a:	88 0f       	add	r24, r24
     78c:	99 1f       	adc	r25, r25
     78e:	aa 1f       	adc	r26, r26
     790:	bb 1f       	adc	r27, r27
     792:	88 0f       	add	r24, r24
     794:	99 1f       	adc	r25, r25
     796:	aa 1f       	adc	r26, r26
     798:	bb 1f       	adc	r27, r27
     79a:	48 1a       	sub	r4, r24
     79c:	59 0a       	sbc	r5, r25
     79e:	6a 0a       	sbc	r6, r26
     7a0:	7b 0a       	sbc	r7, r27

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     7a2:	c9 ef       	ldi	r28, 0xF9	; 249
     7a4:	89 cf       	rjmp	.-238    	; 0x6b8 <usart_set_baudrate+0x11c>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
     7a6:	cf 91       	pop	r28
     7a8:	1f 91       	pop	r17
     7aa:	0f 91       	pop	r16
     7ac:	ff 90       	pop	r15
     7ae:	ef 90       	pop	r14
     7b0:	bf 90       	pop	r11
     7b2:	af 90       	pop	r10
     7b4:	9f 90       	pop	r9
     7b6:	8f 90       	pop	r8
     7b8:	7f 90       	pop	r7
     7ba:	6f 90       	pop	r6
     7bc:	5f 90       	pop	r5
     7be:	4f 90       	pop	r4
     7c0:	08 95       	ret

000007c2 <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
     7c2:	0f 93       	push	r16
     7c4:	1f 93       	push	r17
     7c6:	cf 93       	push	r28
     7c8:	df 93       	push	r29
     7ca:	ec 01       	movw	r28, r24
     7cc:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
     7ce:	00 97       	sbiw	r24, 0x00	; 0
     7d0:	09 f4       	brne	.+2      	; 0x7d4 <usart_init_rs232+0x12>
     7d2:	d6 c0       	rjmp	.+428    	; 0x980 <usart_init_rs232+0x1be>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
     7d4:	80 3c       	cpi	r24, 0xC0	; 192
     7d6:	91 05       	cpc	r25, r1
     7d8:	29 f4       	brne	.+10     	; 0x7e4 <usart_init_rs232+0x22>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
     7da:	60 e1       	ldi	r22, 0x10	; 16
     7dc:	80 e0       	ldi	r24, 0x00	; 0
     7de:	0e 94 04 1d 	call	0x3a08	; 0x3a08 <sysclk_enable_module>
     7e2:	ce c0       	rjmp	.+412    	; 0x980 <usart_init_rs232+0x1be>
	else if (module == &EBI) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
     7e4:	c1 15       	cp	r28, r1
     7e6:	84 e0       	ldi	r24, 0x04	; 4
     7e8:	d8 07       	cpc	r29, r24
     7ea:	29 f4       	brne	.+10     	; 0x7f6 <usart_init_rs232+0x34>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
     7ec:	64 e0       	ldi	r22, 0x04	; 4
     7ee:	80 e0       	ldi	r24, 0x00	; 0
     7f0:	0e 94 04 1d 	call	0x3a08	; 0x3a08 <sysclk_enable_module>
     7f4:	c5 c0       	rjmp	.+394    	; 0x980 <usart_init_rs232+0x1be>
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
     7f6:	c0 38       	cpi	r28, 0x80	; 128
     7f8:	e1 e0       	ldi	r30, 0x01	; 1
     7fa:	de 07       	cpc	r29, r30
     7fc:	29 f4       	brne	.+10     	; 0x808 <usart_init_rs232+0x46>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
     7fe:	62 e0       	ldi	r22, 0x02	; 2
     800:	80 e0       	ldi	r24, 0x00	; 0
     802:	0e 94 04 1d 	call	0x3a08	; 0x3a08 <sysclk_enable_module>
     806:	bc c0       	rjmp	.+376    	; 0x980 <usart_init_rs232+0x1be>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
     808:	c1 15       	cp	r28, r1
     80a:	f1 e0       	ldi	r31, 0x01	; 1
     80c:	df 07       	cpc	r29, r31
     80e:	29 f4       	brne	.+10     	; 0x81a <usart_init_rs232+0x58>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
     810:	61 e0       	ldi	r22, 0x01	; 1
     812:	80 e0       	ldi	r24, 0x00	; 0
     814:	0e 94 04 1d 	call	0x3a08	; 0x3a08 <sysclk_enable_module>
     818:	b3 c0       	rjmp	.+358    	; 0x980 <usart_init_rs232+0x1be>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
     81a:	c0 38       	cpi	r28, 0x80	; 128
     81c:	83 e0       	ldi	r24, 0x03	; 3
     81e:	d8 07       	cpc	r29, r24
     820:	29 f4       	brne	.+10     	; 0x82c <usart_init_rs232+0x6a>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
     822:	61 e0       	ldi	r22, 0x01	; 1
     824:	81 e0       	ldi	r24, 0x01	; 1
     826:	0e 94 04 1d 	call	0x3a08	; 0x3a08 <sysclk_enable_module>
     82a:	aa c0       	rjmp	.+340    	; 0x980 <usart_init_rs232+0x1be>
	else if (module == &ACB) {
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
     82c:	c1 15       	cp	r28, r1
     82e:	e2 e0       	ldi	r30, 0x02	; 2
     830:	de 07       	cpc	r29, r30
     832:	29 f4       	brne	.+10     	; 0x83e <usart_init_rs232+0x7c>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     834:	62 e0       	ldi	r22, 0x02	; 2
     836:	81 e0       	ldi	r24, 0x01	; 1
     838:	0e 94 04 1d 	call	0x3a08	; 0x3a08 <sysclk_enable_module>
     83c:	a1 c0       	rjmp	.+322    	; 0x980 <usart_init_rs232+0x1be>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
     83e:	c0 32       	cpi	r28, 0x20	; 32
     840:	f3 e0       	ldi	r31, 0x03	; 3
     842:	df 07       	cpc	r29, r31
     844:	29 f4       	brne	.+10     	; 0x850 <usart_init_rs232+0x8e>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
     846:	64 e0       	ldi	r22, 0x04	; 4
     848:	82 e0       	ldi	r24, 0x02	; 2
     84a:	0e 94 04 1d 	call	0x3a08	; 0x3a08 <sysclk_enable_module>
     84e:	98 c0       	rjmp	.+304    	; 0x980 <usart_init_rs232+0x1be>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
     850:	c1 15       	cp	r28, r1
     852:	88 e0       	ldi	r24, 0x08	; 8
     854:	d8 07       	cpc	r29, r24
     856:	29 f4       	brne	.+10     	; 0x862 <usart_init_rs232+0xa0>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
     858:	61 e0       	ldi	r22, 0x01	; 1
     85a:	83 e0       	ldi	r24, 0x03	; 3
     85c:	0e 94 04 1d 	call	0x3a08	; 0x3a08 <sysclk_enable_module>
     860:	8f c0       	rjmp	.+286    	; 0x980 <usart_init_rs232+0x1be>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
     862:	c1 15       	cp	r28, r1
     864:	e9 e0       	ldi	r30, 0x09	; 9
     866:	de 07       	cpc	r29, r30
     868:	29 f4       	brne	.+10     	; 0x874 <usart_init_rs232+0xb2>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
     86a:	61 e0       	ldi	r22, 0x01	; 1
     86c:	84 e0       	ldi	r24, 0x04	; 4
     86e:	0e 94 04 1d 	call	0x3a08	; 0x3a08 <sysclk_enable_module>
     872:	86 c0       	rjmp	.+268    	; 0x980 <usart_init_rs232+0x1be>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
     874:	c1 15       	cp	r28, r1
     876:	fa e0       	ldi	r31, 0x0A	; 10
     878:	df 07       	cpc	r29, r31
     87a:	29 f4       	brne	.+10     	; 0x886 <usart_init_rs232+0xc4>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
     87c:	61 e0       	ldi	r22, 0x01	; 1
     87e:	85 e0       	ldi	r24, 0x05	; 5
     880:	0e 94 04 1d 	call	0x3a08	; 0x3a08 <sysclk_enable_module>
     884:	7d c0       	rjmp	.+250    	; 0x980 <usart_init_rs232+0x1be>
	else if (module == &TCF0) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
     886:	c0 34       	cpi	r28, 0x40	; 64
     888:	88 e0       	ldi	r24, 0x08	; 8
     88a:	d8 07       	cpc	r29, r24
     88c:	29 f4       	brne	.+10     	; 0x898 <usart_init_rs232+0xd6>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
     88e:	62 e0       	ldi	r22, 0x02	; 2
     890:	83 e0       	ldi	r24, 0x03	; 3
     892:	0e 94 04 1d 	call	0x3a08	; 0x3a08 <sysclk_enable_module>
     896:	74 c0       	rjmp	.+232    	; 0x980 <usart_init_rs232+0x1be>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
     898:	c0 34       	cpi	r28, 0x40	; 64
     89a:	e9 e0       	ldi	r30, 0x09	; 9
     89c:	de 07       	cpc	r29, r30
     89e:	29 f4       	brne	.+10     	; 0x8aa <usart_init_rs232+0xe8>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
     8a0:	62 e0       	ldi	r22, 0x02	; 2
     8a2:	84 e0       	ldi	r24, 0x04	; 4
     8a4:	0e 94 04 1d 	call	0x3a08	; 0x3a08 <sysclk_enable_module>
     8a8:	6b c0       	rjmp	.+214    	; 0x980 <usart_init_rs232+0x1be>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
     8aa:	c0 39       	cpi	r28, 0x90	; 144
     8ac:	f8 e0       	ldi	r31, 0x08	; 8
     8ae:	df 07       	cpc	r29, r31
     8b0:	29 f4       	brne	.+10     	; 0x8bc <usart_init_rs232+0xfa>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
     8b2:	64 e0       	ldi	r22, 0x04	; 4
     8b4:	83 e0       	ldi	r24, 0x03	; 3
     8b6:	0e 94 04 1d 	call	0x3a08	; 0x3a08 <sysclk_enable_module>
     8ba:	62 c0       	rjmp	.+196    	; 0x980 <usart_init_rs232+0x1be>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
     8bc:	c0 39       	cpi	r28, 0x90	; 144
     8be:	89 e0       	ldi	r24, 0x09	; 9
     8c0:	d8 07       	cpc	r29, r24
     8c2:	29 f4       	brne	.+10     	; 0x8ce <usart_init_rs232+0x10c>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
     8c4:	64 e0       	ldi	r22, 0x04	; 4
     8c6:	84 e0       	ldi	r24, 0x04	; 4
     8c8:	0e 94 04 1d 	call	0x3a08	; 0x3a08 <sysclk_enable_module>
     8cc:	59 c0       	rjmp	.+178    	; 0x980 <usart_init_rs232+0x1be>
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
     8ce:	c0 39       	cpi	r28, 0x90	; 144
     8d0:	ea e0       	ldi	r30, 0x0A	; 10
     8d2:	de 07       	cpc	r29, r30
     8d4:	29 f4       	brne	.+10     	; 0x8e0 <usart_init_rs232+0x11e>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
     8d6:	64 e0       	ldi	r22, 0x04	; 4
     8d8:	85 e0       	ldi	r24, 0x05	; 5
     8da:	0e 94 04 1d 	call	0x3a08	; 0x3a08 <sysclk_enable_module>
     8de:	50 c0       	rjmp	.+160    	; 0x980 <usart_init_rs232+0x1be>
	else if (module == &HIRESF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
     8e0:	c0 3c       	cpi	r28, 0xC0	; 192
     8e2:	f8 e0       	ldi	r31, 0x08	; 8
     8e4:	df 07       	cpc	r29, r31
     8e6:	29 f4       	brne	.+10     	; 0x8f2 <usart_init_rs232+0x130>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
     8e8:	68 e0       	ldi	r22, 0x08	; 8
     8ea:	83 e0       	ldi	r24, 0x03	; 3
     8ec:	0e 94 04 1d 	call	0x3a08	; 0x3a08 <sysclk_enable_module>
     8f0:	47 c0       	rjmp	.+142    	; 0x980 <usart_init_rs232+0x1be>
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
     8f2:	c0 3c       	cpi	r28, 0xC0	; 192
     8f4:	89 e0       	ldi	r24, 0x09	; 9
     8f6:	d8 07       	cpc	r29, r24
     8f8:	29 f4       	brne	.+10     	; 0x904 <usart_init_rs232+0x142>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
     8fa:	68 e0       	ldi	r22, 0x08	; 8
     8fc:	84 e0       	ldi	r24, 0x04	; 4
     8fe:	0e 94 04 1d 	call	0x3a08	; 0x3a08 <sysclk_enable_module>
     902:	3e c0       	rjmp	.+124    	; 0x980 <usart_init_rs232+0x1be>
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
     904:	c0 3a       	cpi	r28, 0xA0	; 160
     906:	e8 e0       	ldi	r30, 0x08	; 8
     908:	de 07       	cpc	r29, r30
     90a:	29 f4       	brne	.+10     	; 0x916 <usart_init_rs232+0x154>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
     90c:	60 e1       	ldi	r22, 0x10	; 16
     90e:	83 e0       	ldi	r24, 0x03	; 3
     910:	0e 94 04 1d 	call	0x3a08	; 0x3a08 <sysclk_enable_module>
     914:	35 c0       	rjmp	.+106    	; 0x980 <usart_init_rs232+0x1be>
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
     916:	c0 3a       	cpi	r28, 0xA0	; 160
     918:	f9 e0       	ldi	r31, 0x09	; 9
     91a:	df 07       	cpc	r29, r31
     91c:	29 f4       	brne	.+10     	; 0x928 <usart_init_rs232+0x166>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
     91e:	60 e1       	ldi	r22, 0x10	; 16
     920:	84 e0       	ldi	r24, 0x04	; 4
     922:	0e 94 04 1d 	call	0x3a08	; 0x3a08 <sysclk_enable_module>
     926:	2c c0       	rjmp	.+88     	; 0x980 <usart_init_rs232+0x1be>
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
     928:	c0 3a       	cpi	r28, 0xA0	; 160
     92a:	8a e0       	ldi	r24, 0x0A	; 10
     92c:	d8 07       	cpc	r29, r24
     92e:	29 f4       	brne	.+10     	; 0x93a <usart_init_rs232+0x178>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
     930:	60 e1       	ldi	r22, 0x10	; 16
     932:	85 e0       	ldi	r24, 0x05	; 5
     934:	0e 94 04 1d 	call	0x3a08	; 0x3a08 <sysclk_enable_module>
     938:	23 c0       	rjmp	.+70     	; 0x980 <usart_init_rs232+0x1be>
	else if (module == &USARTF0) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
     93a:	c0 3b       	cpi	r28, 0xB0	; 176
     93c:	e8 e0       	ldi	r30, 0x08	; 8
     93e:	de 07       	cpc	r29, r30
     940:	29 f4       	brne	.+10     	; 0x94c <usart_init_rs232+0x18a>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
     942:	60 e2       	ldi	r22, 0x20	; 32
     944:	83 e0       	ldi	r24, 0x03	; 3
     946:	0e 94 04 1d 	call	0x3a08	; 0x3a08 <sysclk_enable_module>
     94a:	1a c0       	rjmp	.+52     	; 0x980 <usart_init_rs232+0x1be>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
     94c:	c0 3b       	cpi	r28, 0xB0	; 176
     94e:	f9 e0       	ldi	r31, 0x09	; 9
     950:	df 07       	cpc	r29, r31
     952:	29 f4       	brne	.+10     	; 0x95e <usart_init_rs232+0x19c>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
     954:	60 e2       	ldi	r22, 0x20	; 32
     956:	84 e0       	ldi	r24, 0x04	; 4
     958:	0e 94 04 1d 	call	0x3a08	; 0x3a08 <sysclk_enable_module>
     95c:	11 c0       	rjmp	.+34     	; 0x980 <usart_init_rs232+0x1be>
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
     95e:	c0 38       	cpi	r28, 0x80	; 128
     960:	84 e0       	ldi	r24, 0x04	; 4
     962:	d8 07       	cpc	r29, r24
     964:	29 f4       	brne	.+10     	; 0x970 <usart_init_rs232+0x1ae>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
     966:	60 e4       	ldi	r22, 0x40	; 64
     968:	83 e0       	ldi	r24, 0x03	; 3
     96a:	0e 94 04 1d 	call	0x3a08	; 0x3a08 <sysclk_enable_module>
     96e:	08 c0       	rjmp	.+16     	; 0x980 <usart_init_rs232+0x1be>
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
     970:	c0 3a       	cpi	r28, 0xA0	; 160
     972:	e4 e0       	ldi	r30, 0x04	; 4
     974:	de 07       	cpc	r29, r30
     976:	21 f4       	brne	.+8      	; 0x980 <usart_init_rs232+0x1be>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
     978:	60 e4       	ldi	r22, 0x40	; 64
     97a:	85 e0       	ldi	r24, 0x05	; 5
     97c:	0e 94 04 1d 	call	0x3a08	; 0x3a08 <sysclk_enable_module>
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
     980:	8d 81       	ldd	r24, Y+5	; 0x05
     982:	8f 73       	andi	r24, 0x3F	; 63
     984:	8d 83       	std	Y+5, r24	; 0x05
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
     986:	f8 01       	movw	r30, r16
     988:	95 81       	ldd	r25, Z+5	; 0x05
     98a:	84 81       	ldd	r24, Z+4	; 0x04
     98c:	89 2b       	or	r24, r25
     98e:	96 81       	ldd	r25, Z+6	; 0x06
     990:	91 11       	cpse	r25, r1
     992:	98 e0       	ldi	r25, 0x08	; 8
     994:	89 2b       	or	r24, r25
     996:	8d 83       	std	Y+5, r24	; 0x05
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
     998:	f8 01       	movw	r30, r16
     99a:	40 81       	ld	r20, Z
     99c:	51 81       	ldd	r21, Z+1	; 0x01
     99e:	62 81       	ldd	r22, Z+2	; 0x02
     9a0:	73 81       	ldd	r23, Z+3	; 0x03
     9a2:	00 e0       	ldi	r16, 0x00	; 0
     9a4:	18 e4       	ldi	r17, 0x48	; 72
     9a6:	28 ee       	ldi	r18, 0xE8	; 232
     9a8:	31 e0       	ldi	r19, 0x01	; 1
     9aa:	ce 01       	movw	r24, r28
     9ac:	f7 dd       	rcall	.-1042   	; 0x59c <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
     9ae:	9c 81       	ldd	r25, Y+4	; 0x04
     9b0:	98 60       	ori	r25, 0x08	; 8
     9b2:	9c 83       	std	Y+4, r25	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
     9b4:	9c 81       	ldd	r25, Y+4	; 0x04
     9b6:	90 61       	ori	r25, 0x10	; 16
     9b8:	9c 83       	std	Y+4, r25	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
     9ba:	df 91       	pop	r29
     9bc:	cf 91       	pop	r28
     9be:	1f 91       	pop	r17
     9c0:	0f 91       	pop	r16
     9c2:	08 95       	ret

000009c4 <adc_init>:

#include <asf.h>
#include "adc.h"

void adc_init(void)
{
     9c4:	ff 92       	push	r15
     9c6:	0f 93       	push	r16
     9c8:	1f 93       	push	r17
     9ca:	cf 93       	push	r28
     9cc:	df 93       	push	r29
	ADCA.CTRLA = 0x01; // enable the ADC
     9ce:	c0 e0       	ldi	r28, 0x00	; 0
     9d0:	d2 e0       	ldi	r29, 0x02	; 2
     9d2:	ff 24       	eor	r15, r15
     9d4:	f3 94       	inc	r15
     9d6:	f8 82       	st	Y, r15
	ADCA.CTRLB = 0b00000000;; // signed 12 bit mode
     9d8:	19 82       	std	Y+1, r1	; 0x01
	ADCA.REFCTRL = 0x10; // voltage Reference of Vcc/1.6V
     9da:	80 e1       	ldi	r24, 0x10	; 16
     9dc:	8a 83       	std	Y+2, r24	; 0x02
	ADCA.PRESCALER = 0x05; // prescaler of DIV128 on the clock
     9de:	85 e0       	ldi	r24, 0x05	; 5
     9e0:	8c 83       	std	Y+4, r24	; 0x04
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
     9e2:	61 e2       	ldi	r22, 0x21	; 33
     9e4:	70 e0       	ldi	r23, 0x00	; 0
     9e6:	82 e0       	ldi	r24, 0x02	; 2
     9e8:	0e 94 1a 1d 	call	0x3a34	; 0x3a34 <nvm_read_byte>
	uint16_t data;

	switch (cal) {
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
     9ec:	08 2f       	mov	r16, r24
     9ee:	10 e0       	ldi	r17, 0x00	; 0
		data <<= 8;
     9f0:	10 2f       	mov	r17, r16
     9f2:	00 27       	eor	r16, r16
     9f4:	60 e2       	ldi	r22, 0x20	; 32
     9f6:	70 e0       	ldi	r23, 0x00	; 0
     9f8:	82 e0       	ldi	r24, 0x02	; 2
     9fa:	0e 94 1a 1d 	call	0x3a34	; 0x3a34 <nvm_read_byte>
		data |= nvm_read_production_signature_row(ADCACAL0);
     9fe:	08 2b       	or	r16, r24
	ADCA.CAL = adc_get_calibration_data(ADC_CAL_ADCA); // retrieve stored calibration data about the ADC
     a00:	0c 87       	std	Y+12, r16	; 0x0c
     a02:	1d 87       	std	Y+13, r17	; 0x0d
	
	ADCA.CH0.CTRL = 0x01; // single ended input
     a04:	f8 a2       	std	Y+32, r15	; 0x20
	ADCA.CH0.MUXCTRL = 0b00001000; // pin 1
     a06:	88 e0       	ldi	r24, 0x08	; 8
     a08:	89 a3       	std	Y+33, r24	; 0x21
}
     a0a:	df 91       	pop	r29
     a0c:	cf 91       	pop	r28
     a0e:	1f 91       	pop	r17
     a10:	0f 91       	pop	r16
     a12:	ff 90       	pop	r15
     a14:	08 95       	ret

00000a16 <adc_read>:

int16_t adc_read(void)
{
	ADCA.CH0.CTRL |= 0x80; // start the conversion
     a16:	e0 e0       	ldi	r30, 0x00	; 0
     a18:	f2 e0       	ldi	r31, 0x02	; 2
     a1a:	80 a1       	ldd	r24, Z+32	; 0x20
     a1c:	80 68       	ori	r24, 0x80	; 128
     a1e:	80 a3       	std	Z+32, r24	; 0x20
	while(!(ADCA.CH0.INTFLAGS)); // wait until the conversion is done
     a20:	83 a1       	ldd	r24, Z+35	; 0x23
     a22:	88 23       	and	r24, r24
     a24:	e9 f3       	breq	.-6      	; 0xa20 <adc_read+0xa>
	ADCA.CH0.INTFLAGS = 0; // Set the flag back to false
     a26:	e0 e0       	ldi	r30, 0x00	; 0
     a28:	f2 e0       	ldi	r31, 0x02	; 2
     a2a:	13 a2       	std	Z+35, r1	; 0x23
	return ADCA.CH0.RES; // return the 12-bit result as a uint16_t
     a2c:	84 a1       	ldd	r24, Z+36	; 0x24
     a2e:	95 a1       	ldd	r25, Z+37	; 0x25
     a30:	08 95       	ret

00000a32 <init_imu>:
}

bool imu_is_data_ready(void) //true or false: is data ready
{
	return (bool)is_data_rdy(); //returns true or false off of 0 or 1 checking if IMU data is ready based on the function is_data_ready
}
     a32:	44 e6       	ldi	r20, 0x64	; 100
     a34:	0c 94 8f 19 	jmp	0x331e	; 0x331e <init_mpu9250>
     a38:	08 95       	ret

00000a3a <imu_update>:

imu_data_t imu_update(mpu9250_t imu) //returns an imu data box based on the update. IMU data box is neater
{
     a3a:	2f 92       	push	r2
     a3c:	3f 92       	push	r3
     a3e:	4f 92       	push	r4
     a40:	5f 92       	push	r5
     a42:	6f 92       	push	r6
     a44:	7f 92       	push	r7
     a46:	8f 92       	push	r8
     a48:	9f 92       	push	r9
     a4a:	af 92       	push	r10
     a4c:	bf 92       	push	r11
     a4e:	cf 92       	push	r12
     a50:	df 92       	push	r13
     a52:	ef 92       	push	r14
     a54:	ff 92       	push	r15
     a56:	0f 93       	push	r16
     a58:	1f 93       	push	r17
     a5a:	cf 93       	push	r28
     a5c:	df 93       	push	r29
     a5e:	cd b7       	in	r28, 0x3d	; 61
     a60:	de b7       	in	r29, 0x3e	; 62
     a62:	c1 54       	subi	r28, 0x41	; 65
     a64:	d1 09       	sbc	r29, r1
     a66:	cd bf       	out	0x3d, r28	; 61
     a68:	de bf       	out	0x3e, r29	; 62
     a6a:	1c 01       	movw	r2, r24
	data = read_mpu9250(imu); //tells the mcu to read the mpu thats located on the pins defined in the imu box and put that data into the box with a ton of little boxes
     a6c:	ce 01       	movw	r24, r28
     a6e:	01 96       	adiw	r24, 0x01	; 1
     a70:	0e 94 fd 19 	call	0x33fa	; 0x33fa <read_mpu9250>
     a74:	85 e1       	ldi	r24, 0x15	; 21
     a76:	fe 01       	movw	r30, r28
     a78:	31 96       	adiw	r30, 0x01	; 1
     a7a:	a7 e2       	ldi	r26, 0x27	; 39
     a7c:	b2 e2       	ldi	r27, 0x22	; 34
     a7e:	01 90       	ld	r0, Z+
     a80:	0d 92       	st	X+, r0
     a82:	8a 95       	dec	r24
     a84:	e1 f7       	brne	.-8      	; 0xa7e <imu_update+0x44>
	
	//filters data
	MahonyAHRSupdate(	mapdouble((double)data.gyro_x+(GYR_X_OFF), -32768.0, 32767.0, -2000, 2000),
						mapdouble((double)data.gyro_y+(GYR_Y_OFF), -32768.0, 32767.0, -2000.0, 2000.0),
						mapdouble((double)data.gyro_z+(GYR_Z_OFF), -32768.0, 32767.0, -2000.0, 2000.0),
						(double)data.acc_x+(ACC_X_OFF), (double)data.acc_y+(ACC_Y_OFF), (double)data.acc_z+(ACC_Z_OFF),
     a86:	07 e2       	ldi	r16, 0x27	; 39
     a88:	12 e2       	ldi	r17, 0x22	; 34
imu_data_t imu_update(mpu9250_t imu) //returns an imu data box based on the update. IMU data box is neater
{
	data = read_mpu9250(imu); //tells the mcu to read the mpu thats located on the pins defined in the imu box and put that data into the box with a ton of little boxes
	
	//filters data
	MahonyAHRSupdate(	mapdouble((double)data.gyro_x+(GYR_X_OFF), -32768.0, 32767.0, -2000, 2000),
     a8a:	f8 01       	movw	r30, r16
     a8c:	61 81       	ldd	r22, Z+1	; 0x01
     a8e:	72 81       	ldd	r23, Z+2	; 0x02
     a90:	07 2e       	mov	r0, r23
     a92:	00 0c       	add	r0, r0
     a94:	88 0b       	sbc	r24, r24
     a96:	99 0b       	sbc	r25, r25
     a98:	0e 94 dd 20 	call	0x41ba	; 0x41ba <__floatsisf>
     a9c:	6b 01       	movw	r12, r22
     a9e:	7c 01       	movw	r14, r24
     aa0:	60 91 0c 20 	lds	r22, 0x200C	; 0x80200c <ACC_X_OFF>
     aa4:	70 91 0d 20 	lds	r23, 0x200D	; 0x80200d <ACC_X_OFF+0x1>
     aa8:	07 2e       	mov	r0, r23
     aaa:	00 0c       	add	r0, r0
     aac:	88 0b       	sbc	r24, r24
     aae:	99 0b       	sbc	r25, r25
     ab0:	0e 94 dd 20 	call	0x41ba	; 0x41ba <__floatsisf>
     ab4:	9b 01       	movw	r18, r22
     ab6:	ac 01       	movw	r20, r24
     ab8:	c7 01       	movw	r24, r14
     aba:	b6 01       	movw	r22, r12
     abc:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <__addsf3>
     ac0:	5b 01       	movw	r10, r22
     ac2:	6c 01       	movw	r12, r24
     ac4:	f8 01       	movw	r30, r16
     ac6:	65 85       	ldd	r22, Z+13	; 0x0d
     ac8:	76 85       	ldd	r23, Z+14	; 0x0e
     aca:	07 2e       	mov	r0, r23
     acc:	00 0c       	add	r0, r0
     ace:	88 0b       	sbc	r24, r24
     ad0:	99 0b       	sbc	r25, r25
     ad2:	0e 94 dd 20 	call	0x41ba	; 0x41ba <__floatsisf>
     ad6:	2b 01       	movw	r4, r22
     ad8:	3c 01       	movw	r6, r24
     ada:	60 91 f1 20 	lds	r22, 0x20F1	; 0x8020f1 <GYR_Z_OFF>
     ade:	70 91 f2 20 	lds	r23, 0x20F2	; 0x8020f2 <GYR_Z_OFF+0x1>
     ae2:	07 2e       	mov	r0, r23
     ae4:	00 0c       	add	r0, r0
     ae6:	88 0b       	sbc	r24, r24
     ae8:	99 0b       	sbc	r25, r25
     aea:	0e 94 dd 20 	call	0x41ba	; 0x41ba <__floatsisf>
     aee:	9b 01       	movw	r18, r22
     af0:	ac 01       	movw	r20, r24
     af2:	c3 01       	movw	r24, r6
     af4:	b2 01       	movw	r22, r4
     af6:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <__addsf3>
     afa:	20 e0       	ldi	r18, 0x00	; 0
     afc:	30 e0       	ldi	r19, 0x00	; 0
     afe:	40 e0       	ldi	r20, 0x00	; 0
     b00:	57 e4       	ldi	r21, 0x47	; 71
     b02:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <__addsf3>
     b06:	20 e0       	ldi	r18, 0x00	; 0
     b08:	30 e0       	ldi	r19, 0x00	; 0
     b0a:	4a e7       	ldi	r20, 0x7A	; 122
     b0c:	55 e4       	ldi	r21, 0x45	; 69
     b0e:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
     b12:	20 e0       	ldi	r18, 0x00	; 0
     b14:	3f ef       	ldi	r19, 0xFF	; 255
     b16:	4f e7       	ldi	r20, 0x7F	; 127
     b18:	57 e4       	ldi	r21, 0x47	; 71
     b1a:	0e 94 42 20 	call	0x4084	; 0x4084 <__divsf3>
     b1e:	20 e0       	ldi	r18, 0x00	; 0
     b20:	30 e0       	ldi	r19, 0x00	; 0
     b22:	4a ef       	ldi	r20, 0xFA	; 250
     b24:	54 e4       	ldi	r21, 0x44	; 68
     b26:	0e 94 60 1f 	call	0x3ec0	; 0x3ec0 <__subsf3>
     b2a:	6a 8f       	std	Y+26, r22	; 0x1a
     b2c:	7b 8f       	std	Y+27, r23	; 0x1b
     b2e:	8c 8f       	std	Y+28, r24	; 0x1c
     b30:	9d 8f       	std	Y+29, r25	; 0x1d
     b32:	f8 01       	movw	r30, r16
     b34:	63 85       	ldd	r22, Z+11	; 0x0b
     b36:	74 85       	ldd	r23, Z+12	; 0x0c
     b38:	07 2e       	mov	r0, r23
     b3a:	00 0c       	add	r0, r0
     b3c:	88 0b       	sbc	r24, r24
     b3e:	99 0b       	sbc	r25, r25
     b40:	0e 94 dd 20 	call	0x41ba	; 0x41ba <__floatsisf>
     b44:	2b 01       	movw	r4, r22
     b46:	3c 01       	movw	r6, r24
     b48:	60 91 f3 20 	lds	r22, 0x20F3	; 0x8020f3 <GYR_Y_OFF>
     b4c:	70 91 f4 20 	lds	r23, 0x20F4	; 0x8020f4 <GYR_Y_OFF+0x1>
     b50:	07 2e       	mov	r0, r23
     b52:	00 0c       	add	r0, r0
     b54:	88 0b       	sbc	r24, r24
     b56:	99 0b       	sbc	r25, r25
     b58:	0e 94 dd 20 	call	0x41ba	; 0x41ba <__floatsisf>
     b5c:	9b 01       	movw	r18, r22
     b5e:	ac 01       	movw	r20, r24
     b60:	c3 01       	movw	r24, r6
     b62:	b2 01       	movw	r22, r4
     b64:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <__addsf3>
     b68:	20 e0       	ldi	r18, 0x00	; 0
     b6a:	30 e0       	ldi	r19, 0x00	; 0
     b6c:	40 e0       	ldi	r20, 0x00	; 0
     b6e:	57 e4       	ldi	r21, 0x47	; 71
     b70:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <__addsf3>
     b74:	20 e0       	ldi	r18, 0x00	; 0
     b76:	30 e0       	ldi	r19, 0x00	; 0
     b78:	4a e7       	ldi	r20, 0x7A	; 122
     b7a:	55 e4       	ldi	r21, 0x45	; 69
     b7c:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
     b80:	20 e0       	ldi	r18, 0x00	; 0
     b82:	3f ef       	ldi	r19, 0xFF	; 255
     b84:	4f e7       	ldi	r20, 0x7F	; 127
     b86:	57 e4       	ldi	r21, 0x47	; 71
     b88:	0e 94 42 20 	call	0x4084	; 0x4084 <__divsf3>
     b8c:	20 e0       	ldi	r18, 0x00	; 0
     b8e:	30 e0       	ldi	r19, 0x00	; 0
     b90:	4a ef       	ldi	r20, 0xFA	; 250
     b92:	54 e4       	ldi	r21, 0x44	; 68
     b94:	0e 94 60 1f 	call	0x3ec0	; 0x3ec0 <__subsf3>
     b98:	6e 8f       	std	Y+30, r22	; 0x1e
     b9a:	7f 8f       	std	Y+31, r23	; 0x1f
     b9c:	88 a3       	std	Y+32, r24	; 0x20
     b9e:	99 a3       	std	Y+33, r25	; 0x21
     ba0:	f8 01       	movw	r30, r16
     ba2:	61 85       	ldd	r22, Z+9	; 0x09
     ba4:	72 85       	ldd	r23, Z+10	; 0x0a
     ba6:	07 2e       	mov	r0, r23
     ba8:	00 0c       	add	r0, r0
     baa:	88 0b       	sbc	r24, r24
     bac:	99 0b       	sbc	r25, r25
     bae:	0e 94 dd 20 	call	0x41ba	; 0x41ba <__floatsisf>
     bb2:	2b 01       	movw	r4, r22
     bb4:	3c 01       	movw	r6, r24
     bb6:	60 91 06 20 	lds	r22, 0x2006	; 0x802006 <GYR_X_OFF>
     bba:	70 91 07 20 	lds	r23, 0x2007	; 0x802007 <GYR_X_OFF+0x1>
     bbe:	07 2e       	mov	r0, r23
     bc0:	00 0c       	add	r0, r0
     bc2:	88 0b       	sbc	r24, r24
     bc4:	99 0b       	sbc	r25, r25
     bc6:	0e 94 dd 20 	call	0x41ba	; 0x41ba <__floatsisf>
     bca:	9b 01       	movw	r18, r22
     bcc:	ac 01       	movw	r20, r24
     bce:	c3 01       	movw	r24, r6
     bd0:	b2 01       	movw	r22, r4
     bd2:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <__addsf3>
     bd6:	20 e0       	ldi	r18, 0x00	; 0
     bd8:	30 e0       	ldi	r19, 0x00	; 0
     bda:	40 e0       	ldi	r20, 0x00	; 0
     bdc:	57 e4       	ldi	r21, 0x47	; 71
     bde:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <__addsf3>
     be2:	20 e0       	ldi	r18, 0x00	; 0
     be4:	30 e0       	ldi	r19, 0x00	; 0
     be6:	4a e7       	ldi	r20, 0x7A	; 122
     be8:	55 e4       	ldi	r21, 0x45	; 69
     bea:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
     bee:	20 e0       	ldi	r18, 0x00	; 0
     bf0:	3f ef       	ldi	r19, 0xFF	; 255
     bf2:	4f e7       	ldi	r20, 0x7F	; 127
     bf4:	57 e4       	ldi	r21, 0x47	; 71
     bf6:	0e 94 42 20 	call	0x4084	; 0x4084 <__divsf3>
     bfa:	20 e0       	ldi	r18, 0x00	; 0
     bfc:	30 e0       	ldi	r19, 0x00	; 0
     bfe:	4a ef       	ldi	r20, 0xFA	; 250
     c00:	54 e4       	ldi	r21, 0x44	; 68
     c02:	0e 94 60 1f 	call	0x3ec0	; 0x3ec0 <__subsf3>
     c06:	2b 01       	movw	r4, r22
     c08:	3c 01       	movw	r6, r24
     c0a:	f8 01       	movw	r30, r16
     c0c:	63 89       	ldd	r22, Z+19	; 0x13
     c0e:	74 89       	ldd	r23, Z+20	; 0x14
     c10:	07 2e       	mov	r0, r23
     c12:	00 0c       	add	r0, r0
     c14:	88 0b       	sbc	r24, r24
     c16:	99 0b       	sbc	r25, r25
     c18:	0e 94 dd 20 	call	0x41ba	; 0x41ba <__floatsisf>
     c1c:	6e 8b       	std	Y+22, r22	; 0x16
     c1e:	7f 8b       	std	Y+23, r23	; 0x17
     c20:	88 8f       	std	Y+24, r24	; 0x18
     c22:	99 8f       	std	Y+25, r25	; 0x19
     c24:	60 91 0e 20 	lds	r22, 0x200E	; 0x80200e <MAG_Z_OFF>
     c28:	70 91 0f 20 	lds	r23, 0x200F	; 0x80200f <MAG_Z_OFF+0x1>
     c2c:	07 2e       	mov	r0, r23
     c2e:	00 0c       	add	r0, r0
     c30:	88 0b       	sbc	r24, r24
     c32:	99 0b       	sbc	r25, r25
     c34:	0e 94 dd 20 	call	0x41ba	; 0x41ba <__floatsisf>
     c38:	9b 01       	movw	r18, r22
     c3a:	ac 01       	movw	r20, r24
     c3c:	6e 89       	ldd	r22, Y+22	; 0x16
     c3e:	7f 89       	ldd	r23, Y+23	; 0x17
     c40:	88 8d       	ldd	r24, Y+24	; 0x18
     c42:	99 8d       	ldd	r25, Y+25	; 0x19
     c44:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <__addsf3>
     c48:	dc 01       	movw	r26, r24
     c4a:	cb 01       	movw	r24, r22
     c4c:	b0 58       	subi	r27, 0x80	; 128
     c4e:	bf 93       	push	r27
     c50:	af 93       	push	r26
     c52:	9f 93       	push	r25
     c54:	8f 93       	push	r24
     c56:	f8 01       	movw	r30, r16
     c58:	67 85       	ldd	r22, Z+15	; 0x0f
     c5a:	70 89       	ldd	r23, Z+16	; 0x10
     c5c:	07 2e       	mov	r0, r23
     c5e:	00 0c       	add	r0, r0
     c60:	88 0b       	sbc	r24, r24
     c62:	99 0b       	sbc	r25, r25
     c64:	0e 94 dd 20 	call	0x41ba	; 0x41ba <__floatsisf>
     c68:	6e 8b       	std	Y+22, r22	; 0x16
     c6a:	7f 8b       	std	Y+23, r23	; 0x17
     c6c:	88 8f       	std	Y+24, r24	; 0x18
     c6e:	99 8f       	std	Y+25, r25	; 0x19
     c70:	60 91 12 20 	lds	r22, 0x2012	; 0x802012 <MAG_X_OFF>
     c74:	70 91 13 20 	lds	r23, 0x2013	; 0x802013 <MAG_X_OFF+0x1>
     c78:	07 2e       	mov	r0, r23
     c7a:	00 0c       	add	r0, r0
     c7c:	88 0b       	sbc	r24, r24
     c7e:	99 0b       	sbc	r25, r25
     c80:	0e 94 dd 20 	call	0x41ba	; 0x41ba <__floatsisf>
     c84:	9b 01       	movw	r18, r22
     c86:	ac 01       	movw	r20, r24
     c88:	6e 89       	ldd	r22, Y+22	; 0x16
     c8a:	7f 89       	ldd	r23, Y+23	; 0x17
     c8c:	88 8d       	ldd	r24, Y+24	; 0x18
     c8e:	99 8d       	ldd	r25, Y+25	; 0x19
     c90:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <__addsf3>
     c94:	9f 93       	push	r25
     c96:	8f 93       	push	r24
     c98:	7f 93       	push	r23
     c9a:	6f 93       	push	r22
     c9c:	f8 01       	movw	r30, r16
     c9e:	61 89       	ldd	r22, Z+17	; 0x11
     ca0:	72 89       	ldd	r23, Z+18	; 0x12
     ca2:	07 2e       	mov	r0, r23
     ca4:	00 0c       	add	r0, r0
     ca6:	88 0b       	sbc	r24, r24
     ca8:	99 0b       	sbc	r25, r25
     caa:	0e 94 dd 20 	call	0x41ba	; 0x41ba <__floatsisf>
     cae:	6e 8b       	std	Y+22, r22	; 0x16
     cb0:	7f 8b       	std	Y+23, r23	; 0x17
     cb2:	88 8f       	std	Y+24, r24	; 0x18
     cb4:	99 8f       	std	Y+25, r25	; 0x19
     cb6:	60 91 10 20 	lds	r22, 0x2010	; 0x802010 <MAG_Y_OFF>
     cba:	70 91 11 20 	lds	r23, 0x2011	; 0x802011 <MAG_Y_OFF+0x1>
     cbe:	07 2e       	mov	r0, r23
     cc0:	00 0c       	add	r0, r0
     cc2:	88 0b       	sbc	r24, r24
     cc4:	99 0b       	sbc	r25, r25
     cc6:	0e 94 dd 20 	call	0x41ba	; 0x41ba <__floatsisf>
     cca:	9b 01       	movw	r18, r22
     ccc:	ac 01       	movw	r20, r24
     cce:	6e 89       	ldd	r22, Y+22	; 0x16
     cd0:	7f 89       	ldd	r23, Y+23	; 0x17
     cd2:	88 8d       	ldd	r24, Y+24	; 0x18
     cd4:	99 8d       	ldd	r25, Y+25	; 0x19
     cd6:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <__addsf3>
     cda:	9f 93       	push	r25
     cdc:	8f 93       	push	r24
     cde:	7f 93       	push	r23
     ce0:	6f 93       	push	r22
     ce2:	f8 01       	movw	r30, r16
     ce4:	65 81       	ldd	r22, Z+5	; 0x05
     ce6:	76 81       	ldd	r23, Z+6	; 0x06
     ce8:	07 2e       	mov	r0, r23
     cea:	00 0c       	add	r0, r0
     cec:	88 0b       	sbc	r24, r24
     cee:	99 0b       	sbc	r25, r25
     cf0:	0e 94 dd 20 	call	0x41ba	; 0x41ba <__floatsisf>
     cf4:	6e 8b       	std	Y+22, r22	; 0x16
     cf6:	7f 8b       	std	Y+23, r23	; 0x17
     cf8:	88 8f       	std	Y+24, r24	; 0x18
     cfa:	99 8f       	std	Y+25, r25	; 0x19
     cfc:	60 91 08 20 	lds	r22, 0x2008	; 0x802008 <ACC_Z_OFF>
     d00:	70 91 09 20 	lds	r23, 0x2009	; 0x802009 <ACC_Z_OFF+0x1>
     d04:	07 2e       	mov	r0, r23
     d06:	00 0c       	add	r0, r0
     d08:	88 0b       	sbc	r24, r24
     d0a:	99 0b       	sbc	r25, r25
     d0c:	0e 94 dd 20 	call	0x41ba	; 0x41ba <__floatsisf>
     d10:	9b 01       	movw	r18, r22
     d12:	ac 01       	movw	r20, r24
     d14:	6e 89       	ldd	r22, Y+22	; 0x16
     d16:	7f 89       	ldd	r23, Y+23	; 0x17
     d18:	88 8d       	ldd	r24, Y+24	; 0x18
     d1a:	99 8d       	ldd	r25, Y+25	; 0x19
     d1c:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <__addsf3>
     d20:	9f 93       	push	r25
     d22:	8f 93       	push	r24
     d24:	7f 93       	push	r23
     d26:	6f 93       	push	r22
     d28:	f8 01       	movw	r30, r16
     d2a:	63 81       	ldd	r22, Z+3	; 0x03
     d2c:	74 81       	ldd	r23, Z+4	; 0x04
     d2e:	07 2e       	mov	r0, r23
     d30:	00 0c       	add	r0, r0
     d32:	88 0b       	sbc	r24, r24
     d34:	99 0b       	sbc	r25, r25
     d36:	0e 94 dd 20 	call	0x41ba	; 0x41ba <__floatsisf>
     d3a:	6e 8b       	std	Y+22, r22	; 0x16
     d3c:	7f 8b       	std	Y+23, r23	; 0x17
     d3e:	88 8f       	std	Y+24, r24	; 0x18
     d40:	99 8f       	std	Y+25, r25	; 0x19
     d42:	60 91 0a 20 	lds	r22, 0x200A	; 0x80200a <ACC_Y_OFF>
     d46:	70 91 0b 20 	lds	r23, 0x200B	; 0x80200b <ACC_Y_OFF+0x1>
     d4a:	07 2e       	mov	r0, r23
     d4c:	00 0c       	add	r0, r0
     d4e:	88 0b       	sbc	r24, r24
     d50:	99 0b       	sbc	r25, r25
     d52:	0e 94 dd 20 	call	0x41ba	; 0x41ba <__floatsisf>
     d56:	9b 01       	movw	r18, r22
     d58:	ac 01       	movw	r20, r24
     d5a:	6e 89       	ldd	r22, Y+22	; 0x16
     d5c:	7f 89       	ldd	r23, Y+23	; 0x17
     d5e:	88 8d       	ldd	r24, Y+24	; 0x18
     d60:	99 8d       	ldd	r25, Y+25	; 0x19
     d62:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <__addsf3>
     d66:	9f 93       	push	r25
     d68:	8f 93       	push	r24
     d6a:	7f 93       	push	r23
     d6c:	6f 93       	push	r22
     d6e:	ea 8c       	ldd	r14, Y+26	; 0x1a
     d70:	fb 8c       	ldd	r15, Y+27	; 0x1b
     d72:	0c 8d       	ldd	r16, Y+28	; 0x1c
     d74:	1d 8d       	ldd	r17, Y+29	; 0x1d
     d76:	2e 8d       	ldd	r18, Y+30	; 0x1e
     d78:	3f 8d       	ldd	r19, Y+31	; 0x1f
     d7a:	48 a1       	ldd	r20, Y+32	; 0x20
     d7c:	59 a1       	ldd	r21, Y+33	; 0x21
     d7e:	c3 01       	movw	r24, r6
     d80:	b2 01       	movw	r22, r4
     d82:	83 d7       	rcall	.+3846   	; 0x1c8a <MahonyAHRSupdate>
						(double)data.mag_y+(MAG_Y_OFF), (double)data.mag_x+(MAG_X_OFF), -((double)data.mag_z+(MAG_Z_OFF)));

	
	//converts all the little boxes from the mpu into more digestable boxes of angles
	imu_data_t imudata;					
	imudata.yaw   = atan2(2.0 * (q1 * q2 + q0 * q3), q0 * q0 + q1 * q1 - q2 * q2 - q3 * q3); //gets yaw angle in radians
     d84:	60 91 14 20 	lds	r22, 0x2014	; 0x802014 <q0>
     d88:	70 91 15 20 	lds	r23, 0x2015	; 0x802015 <q0+0x1>
     d8c:	80 91 16 20 	lds	r24, 0x2016	; 0x802016 <q0+0x2>
     d90:	90 91 17 20 	lds	r25, 0x2017	; 0x802017 <q0+0x3>
     d94:	20 91 14 20 	lds	r18, 0x2014	; 0x802014 <q0>
     d98:	30 91 15 20 	lds	r19, 0x2015	; 0x802015 <q0+0x1>
     d9c:	40 91 16 20 	lds	r20, 0x2016	; 0x802016 <q0+0x2>
     da0:	50 91 17 20 	lds	r21, 0x2017	; 0x802017 <q0+0x3>
     da4:	c0 90 09 21 	lds	r12, 0x2109	; 0x802109 <q1>
     da8:	d0 90 0a 21 	lds	r13, 0x210A	; 0x80210a <q1+0x1>
     dac:	e0 90 0b 21 	lds	r14, 0x210B	; 0x80210b <q1+0x2>
     db0:	f0 90 0c 21 	lds	r15, 0x210C	; 0x80210c <q1+0x3>
     db4:	80 90 09 21 	lds	r8, 0x2109	; 0x802109 <q1>
     db8:	90 90 0a 21 	lds	r9, 0x210A	; 0x80210a <q1+0x1>
     dbc:	a0 90 0b 21 	lds	r10, 0x210B	; 0x80210b <q1+0x2>
     dc0:	b0 90 0c 21 	lds	r11, 0x210C	; 0x80210c <q1+0x3>
     dc4:	40 90 05 21 	lds	r4, 0x2105	; 0x802105 <q2>
     dc8:	50 90 06 21 	lds	r5, 0x2106	; 0x802106 <q2+0x1>
     dcc:	60 90 07 21 	lds	r6, 0x2107	; 0x802107 <q2+0x2>
     dd0:	70 90 08 21 	lds	r7, 0x2108	; 0x802108 <q2+0x3>
     dd4:	4a 8e       	std	Y+26, r4	; 0x1a
     dd6:	5b 8e       	std	Y+27, r5	; 0x1b
     dd8:	6c 8e       	std	Y+28, r6	; 0x1c
     dda:	7d 8e       	std	Y+29, r7	; 0x1d
     ddc:	40 90 05 21 	lds	r4, 0x2105	; 0x802105 <q2>
     de0:	50 90 06 21 	lds	r5, 0x2106	; 0x802106 <q2+0x1>
     de4:	60 90 07 21 	lds	r6, 0x2107	; 0x802107 <q2+0x2>
     de8:	70 90 08 21 	lds	r7, 0x2108	; 0x802108 <q2+0x3>
     dec:	4e 8e       	std	Y+30, r4	; 0x1e
     dee:	5f 8e       	std	Y+31, r5	; 0x1f
     df0:	68 a2       	std	Y+32, r6	; 0x20
     df2:	79 a2       	std	Y+33, r7	; 0x21
     df4:	40 90 01 21 	lds	r4, 0x2101	; 0x802101 <q3>
     df8:	50 90 02 21 	lds	r5, 0x2102	; 0x802102 <q3+0x1>
     dfc:	60 90 03 21 	lds	r6, 0x2103	; 0x802103 <q3+0x2>
     e00:	70 90 04 21 	lds	r7, 0x2104	; 0x802104 <q3+0x3>
     e04:	4e 8a       	std	Y+22, r4	; 0x16
     e06:	5f 8a       	std	Y+23, r5	; 0x17
     e08:	68 8e       	std	Y+24, r6	; 0x18
     e0a:	79 8e       	std	Y+25, r7	; 0x19
     e0c:	40 90 01 21 	lds	r4, 0x2101	; 0x802101 <q3>
     e10:	50 90 02 21 	lds	r5, 0x2102	; 0x802102 <q3+0x1>
     e14:	60 90 03 21 	lds	r6, 0x2103	; 0x802103 <q3+0x2>
     e18:	70 90 04 21 	lds	r7, 0x2104	; 0x802104 <q3+0x3>
     e1c:	4a a2       	std	Y+34, r4	; 0x22
     e1e:	5b a2       	std	Y+35, r5	; 0x23
     e20:	6c a2       	std	Y+36, r6	; 0x24
     e22:	7d a2       	std	Y+37, r7	; 0x25
     e24:	40 90 09 21 	lds	r4, 0x2109	; 0x802109 <q1>
     e28:	50 90 0a 21 	lds	r5, 0x210A	; 0x80210a <q1+0x1>
     e2c:	60 90 0b 21 	lds	r6, 0x210B	; 0x80210b <q1+0x2>
     e30:	70 90 0c 21 	lds	r7, 0x210C	; 0x80210c <q1+0x3>
     e34:	4e a2       	std	Y+38, r4	; 0x26
     e36:	5f a2       	std	Y+39, r5	; 0x27
     e38:	68 a6       	std	Y+40, r6	; 0x28
     e3a:	79 a6       	std	Y+41, r7	; 0x29
     e3c:	40 90 05 21 	lds	r4, 0x2105	; 0x802105 <q2>
     e40:	50 90 06 21 	lds	r5, 0x2106	; 0x802106 <q2+0x1>
     e44:	60 90 07 21 	lds	r6, 0x2107	; 0x802107 <q2+0x2>
     e48:	70 90 08 21 	lds	r7, 0x2108	; 0x802108 <q2+0x3>
     e4c:	4a a6       	std	Y+42, r4	; 0x2a
     e4e:	5b a6       	std	Y+43, r5	; 0x2b
     e50:	6c a6       	std	Y+44, r6	; 0x2c
     e52:	7d a6       	std	Y+45, r7	; 0x2d
     e54:	40 90 14 20 	lds	r4, 0x2014	; 0x802014 <q0>
     e58:	50 90 15 20 	lds	r5, 0x2015	; 0x802015 <q0+0x1>
     e5c:	60 90 16 20 	lds	r6, 0x2016	; 0x802016 <q0+0x2>
     e60:	70 90 17 20 	lds	r7, 0x2017	; 0x802017 <q0+0x3>
     e64:	4e aa       	std	Y+54, r4	; 0x36
     e66:	5f aa       	std	Y+55, r5	; 0x37
     e68:	68 ae       	std	Y+56, r6	; 0x38
     e6a:	79 ae       	std	Y+57, r7	; 0x39
     e6c:	40 90 01 21 	lds	r4, 0x2101	; 0x802101 <q3>
     e70:	50 90 02 21 	lds	r5, 0x2102	; 0x802102 <q3+0x1>
     e74:	60 90 03 21 	lds	r6, 0x2103	; 0x802103 <q3+0x2>
     e78:	70 90 04 21 	lds	r7, 0x2104	; 0x802104 <q3+0x3>
     e7c:	4e a6       	std	Y+46, r4	; 0x2e
     e7e:	5f a6       	std	Y+47, r5	; 0x2f
     e80:	68 aa       	std	Y+48, r6	; 0x30
     e82:	79 aa       	std	Y+49, r7	; 0x31
     e84:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
     e88:	2b 01       	movw	r4, r22
     e8a:	3c 01       	movw	r6, r24
     e8c:	a5 01       	movw	r20, r10
     e8e:	94 01       	movw	r18, r8
     e90:	c7 01       	movw	r24, r14
     e92:	b6 01       	movw	r22, r12
     e94:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
     e98:	9b 01       	movw	r18, r22
     e9a:	ac 01       	movw	r20, r24
     e9c:	c3 01       	movw	r24, r6
     e9e:	b2 01       	movw	r22, r4
     ea0:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <__addsf3>
     ea4:	6b 01       	movw	r12, r22
     ea6:	7c 01       	movw	r14, r24
     ea8:	2e 8d       	ldd	r18, Y+30	; 0x1e
     eaa:	3f 8d       	ldd	r19, Y+31	; 0x1f
     eac:	48 a1       	ldd	r20, Y+32	; 0x20
     eae:	59 a1       	ldd	r21, Y+33	; 0x21
     eb0:	6a 8d       	ldd	r22, Y+26	; 0x1a
     eb2:	7b 8d       	ldd	r23, Y+27	; 0x1b
     eb4:	8c 8d       	ldd	r24, Y+28	; 0x1c
     eb6:	9d 8d       	ldd	r25, Y+29	; 0x1d
     eb8:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
     ebc:	9b 01       	movw	r18, r22
     ebe:	ac 01       	movw	r20, r24
     ec0:	c7 01       	movw	r24, r14
     ec2:	b6 01       	movw	r22, r12
     ec4:	0e 94 60 1f 	call	0x3ec0	; 0x3ec0 <__subsf3>
     ec8:	6b 01       	movw	r12, r22
     eca:	7c 01       	movw	r14, r24
     ecc:	2a a1       	ldd	r18, Y+34	; 0x22
     ece:	3b a1       	ldd	r19, Y+35	; 0x23
     ed0:	4c a1       	ldd	r20, Y+36	; 0x24
     ed2:	5d a1       	ldd	r21, Y+37	; 0x25
     ed4:	6e 89       	ldd	r22, Y+22	; 0x16
     ed6:	7f 89       	ldd	r23, Y+23	; 0x17
     ed8:	88 8d       	ldd	r24, Y+24	; 0x18
     eda:	99 8d       	ldd	r25, Y+25	; 0x19
     edc:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
     ee0:	9b 01       	movw	r18, r22
     ee2:	ac 01       	movw	r20, r24
     ee4:	c7 01       	movw	r24, r14
     ee6:	b6 01       	movw	r22, r12
     ee8:	0e 94 60 1f 	call	0x3ec0	; 0x3ec0 <__subsf3>
     eec:	6b 01       	movw	r12, r22
     eee:	7c 01       	movw	r14, r24
     ef0:	2a a5       	ldd	r18, Y+42	; 0x2a
     ef2:	3b a5       	ldd	r19, Y+43	; 0x2b
     ef4:	4c a5       	ldd	r20, Y+44	; 0x2c
     ef6:	5d a5       	ldd	r21, Y+45	; 0x2d
     ef8:	6e a1       	ldd	r22, Y+38	; 0x26
     efa:	7f a1       	ldd	r23, Y+39	; 0x27
     efc:	88 a5       	ldd	r24, Y+40	; 0x28
     efe:	99 a5       	ldd	r25, Y+41	; 0x29
     f00:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
     f04:	4b 01       	movw	r8, r22
     f06:	5c 01       	movw	r10, r24
     f08:	2e a5       	ldd	r18, Y+46	; 0x2e
     f0a:	3f a5       	ldd	r19, Y+47	; 0x2f
     f0c:	48 a9       	ldd	r20, Y+48	; 0x30
     f0e:	59 a9       	ldd	r21, Y+49	; 0x31
     f10:	6e a9       	ldd	r22, Y+54	; 0x36
     f12:	7f a9       	ldd	r23, Y+55	; 0x37
     f14:	88 ad       	ldd	r24, Y+56	; 0x38
     f16:	99 ad       	ldd	r25, Y+57	; 0x39
     f18:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
     f1c:	9b 01       	movw	r18, r22
     f1e:	ac 01       	movw	r20, r24
     f20:	c5 01       	movw	r24, r10
     f22:	b4 01       	movw	r22, r8
     f24:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <__addsf3>
     f28:	9b 01       	movw	r18, r22
     f2a:	ac 01       	movw	r20, r24
     f2c:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <__addsf3>
     f30:	a7 01       	movw	r20, r14
     f32:	96 01       	movw	r18, r12
     f34:	0e 94 eb 1f 	call	0x3fd6	; 0x3fd6 <atan2>
     f38:	6a 8f       	std	Y+26, r22	; 0x1a
     f3a:	7b 8f       	std	Y+27, r23	; 0x1b
     f3c:	8c 8f       	std	Y+28, r24	; 0x1c
     f3e:	9d 8f       	std	Y+29, r25	; 0x1d
	imudata.pitch = -asin(2.0 * (q1 * q3 - q0 * q2)); //gets pitch angle in radians MAY NOT CARE ABOUT
     f40:	60 91 09 21 	lds	r22, 0x2109	; 0x802109 <q1>
     f44:	70 91 0a 21 	lds	r23, 0x210A	; 0x80210a <q1+0x1>
     f48:	80 91 0b 21 	lds	r24, 0x210B	; 0x80210b <q1+0x2>
     f4c:	90 91 0c 21 	lds	r25, 0x210C	; 0x80210c <q1+0x3>
     f50:	20 91 01 21 	lds	r18, 0x2101	; 0x802101 <q3>
     f54:	30 91 02 21 	lds	r19, 0x2102	; 0x802102 <q3+0x1>
     f58:	40 91 03 21 	lds	r20, 0x2103	; 0x802103 <q3+0x2>
     f5c:	50 91 04 21 	lds	r21, 0x2104	; 0x802104 <q3+0x3>
     f60:	80 90 14 20 	lds	r8, 0x2014	; 0x802014 <q0>
     f64:	90 90 15 20 	lds	r9, 0x2015	; 0x802015 <q0+0x1>
     f68:	a0 90 16 20 	lds	r10, 0x2016	; 0x802016 <q0+0x2>
     f6c:	b0 90 17 20 	lds	r11, 0x2017	; 0x802017 <q0+0x3>
     f70:	40 90 05 21 	lds	r4, 0x2105	; 0x802105 <q2>
     f74:	50 90 06 21 	lds	r5, 0x2106	; 0x802106 <q2+0x1>
     f78:	60 90 07 21 	lds	r6, 0x2107	; 0x802107 <q2+0x2>
     f7c:	70 90 08 21 	lds	r7, 0x2108	; 0x802108 <q2+0x3>
     f80:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
     f84:	6b 01       	movw	r12, r22
     f86:	7c 01       	movw	r14, r24
     f88:	a3 01       	movw	r20, r6
     f8a:	92 01       	movw	r18, r4
     f8c:	c5 01       	movw	r24, r10
     f8e:	b4 01       	movw	r22, r8
     f90:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
     f94:	9b 01       	movw	r18, r22
     f96:	ac 01       	movw	r20, r24
     f98:	c7 01       	movw	r24, r14
     f9a:	b6 01       	movw	r22, r12
     f9c:	0e 94 60 1f 	call	0x3ec0	; 0x3ec0 <__subsf3>
     fa0:	9b 01       	movw	r18, r22
     fa2:	ac 01       	movw	r20, r24
     fa4:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <__addsf3>
     fa8:	0e 94 c5 1f 	call	0x3f8a	; 0x3f8a <asin>
     fac:	6e 8f       	std	Y+30, r22	; 0x1e
     fae:	7f 8f       	std	Y+31, r23	; 0x1f
     fb0:	88 a3       	std	Y+32, r24	; 0x20
     fb2:	99 a3       	std	Y+33, r25	; 0x21
	imudata.roll  = atan2(2.0 * (q0 * q1 + q2 * q3), q0 * q0 - q1 * q1 - q2 * q2 + q3 * q3); //gets roll angle in radians
     fb4:	60 91 14 20 	lds	r22, 0x2014	; 0x802014 <q0>
     fb8:	70 91 15 20 	lds	r23, 0x2015	; 0x802015 <q0+0x1>
     fbc:	80 91 16 20 	lds	r24, 0x2016	; 0x802016 <q0+0x2>
     fc0:	90 91 17 20 	lds	r25, 0x2017	; 0x802017 <q0+0x3>
     fc4:	20 91 14 20 	lds	r18, 0x2014	; 0x802014 <q0>
     fc8:	30 91 15 20 	lds	r19, 0x2015	; 0x802015 <q0+0x1>
     fcc:	40 91 16 20 	lds	r20, 0x2016	; 0x802016 <q0+0x2>
     fd0:	50 91 17 20 	lds	r21, 0x2017	; 0x802017 <q0+0x3>
     fd4:	80 90 09 21 	lds	r8, 0x2109	; 0x802109 <q1>
     fd8:	90 90 0a 21 	lds	r9, 0x210A	; 0x80210a <q1+0x1>
     fdc:	a0 90 0b 21 	lds	r10, 0x210B	; 0x80210b <q1+0x2>
     fe0:	b0 90 0c 21 	lds	r11, 0x210C	; 0x80210c <q1+0x3>
     fe4:	40 90 09 21 	lds	r4, 0x2109	; 0x802109 <q1>
     fe8:	50 90 0a 21 	lds	r5, 0x210A	; 0x80210a <q1+0x1>
     fec:	60 90 0b 21 	lds	r6, 0x210B	; 0x80210b <q1+0x2>
     ff0:	70 90 0c 21 	lds	r7, 0x210C	; 0x80210c <q1+0x3>
     ff4:	e0 90 05 21 	lds	r14, 0x2105	; 0x802105 <q2>
     ff8:	f0 90 06 21 	lds	r15, 0x2106	; 0x802106 <q2+0x1>
     ffc:	00 91 07 21 	lds	r16, 0x2107	; 0x802107 <q2+0x2>
    1000:	10 91 08 21 	lds	r17, 0x2108	; 0x802108 <q2+0x3>
    1004:	ee 8a       	std	Y+22, r14	; 0x16
    1006:	ff 8a       	std	Y+23, r15	; 0x17
    1008:	08 8f       	std	Y+24, r16	; 0x18
    100a:	19 8f       	std	Y+25, r17	; 0x19
    100c:	e0 90 05 21 	lds	r14, 0x2105	; 0x802105 <q2>
    1010:	f0 90 06 21 	lds	r15, 0x2106	; 0x802106 <q2+0x1>
    1014:	00 91 07 21 	lds	r16, 0x2107	; 0x802107 <q2+0x2>
    1018:	10 91 08 21 	lds	r17, 0x2108	; 0x802108 <q2+0x3>
    101c:	ea a2       	std	Y+34, r14	; 0x22
    101e:	fb a2       	std	Y+35, r15	; 0x23
    1020:	0c a3       	std	Y+36, r16	; 0x24
    1022:	1d a3       	std	Y+37, r17	; 0x25
    1024:	e0 90 01 21 	lds	r14, 0x2101	; 0x802101 <q3>
    1028:	f0 90 02 21 	lds	r15, 0x2102	; 0x802102 <q3+0x1>
    102c:	00 91 03 21 	lds	r16, 0x2103	; 0x802103 <q3+0x2>
    1030:	10 91 04 21 	lds	r17, 0x2104	; 0x802104 <q3+0x3>
    1034:	ee a2       	std	Y+38, r14	; 0x26
    1036:	ff a2       	std	Y+39, r15	; 0x27
    1038:	08 a7       	std	Y+40, r16	; 0x28
    103a:	19 a7       	std	Y+41, r17	; 0x29
    103c:	e0 90 01 21 	lds	r14, 0x2101	; 0x802101 <q3>
    1040:	f0 90 02 21 	lds	r15, 0x2102	; 0x802102 <q3+0x1>
    1044:	00 91 03 21 	lds	r16, 0x2103	; 0x802103 <q3+0x2>
    1048:	10 91 04 21 	lds	r17, 0x2104	; 0x802104 <q3+0x3>
    104c:	ea a6       	std	Y+42, r14	; 0x2a
    104e:	fb a6       	std	Y+43, r15	; 0x2b
    1050:	0c a7       	std	Y+44, r16	; 0x2c
    1052:	1d a7       	std	Y+45, r17	; 0x2d
    1054:	e0 90 14 20 	lds	r14, 0x2014	; 0x802014 <q0>
    1058:	f0 90 15 20 	lds	r15, 0x2015	; 0x802015 <q0+0x1>
    105c:	00 91 16 20 	lds	r16, 0x2016	; 0x802016 <q0+0x2>
    1060:	10 91 17 20 	lds	r17, 0x2017	; 0x802017 <q0+0x3>
    1064:	ee a6       	std	Y+46, r14	; 0x2e
    1066:	ff a6       	std	Y+47, r15	; 0x2f
    1068:	08 ab       	std	Y+48, r16	; 0x30
    106a:	19 ab       	std	Y+49, r17	; 0x31
    106c:	e0 90 09 21 	lds	r14, 0x2109	; 0x802109 <q1>
    1070:	f0 90 0a 21 	lds	r15, 0x210A	; 0x80210a <q1+0x1>
    1074:	00 91 0b 21 	lds	r16, 0x210B	; 0x80210b <q1+0x2>
    1078:	10 91 0c 21 	lds	r17, 0x210C	; 0x80210c <q1+0x3>
    107c:	ea aa       	std	Y+50, r14	; 0x32
    107e:	fb aa       	std	Y+51, r15	; 0x33
    1080:	0c ab       	std	Y+52, r16	; 0x34
    1082:	1d ab       	std	Y+53, r17	; 0x35
    1084:	e0 90 05 21 	lds	r14, 0x2105	; 0x802105 <q2>
    1088:	f0 90 06 21 	lds	r15, 0x2106	; 0x802106 <q2+0x1>
    108c:	00 91 07 21 	lds	r16, 0x2107	; 0x802107 <q2+0x2>
    1090:	10 91 08 21 	lds	r17, 0x2108	; 0x802108 <q2+0x3>
    1094:	22 96       	adiw	r28, 0x02	; 2
    1096:	ec ae       	std	Y+60, r14	; 0x3c
    1098:	fd ae       	std	Y+61, r15	; 0x3d
    109a:	0e af       	std	Y+62, r16	; 0x3e
    109c:	1f af       	std	Y+63, r17	; 0x3f
    109e:	22 97       	sbiw	r28, 0x02	; 2
    10a0:	e0 90 01 21 	lds	r14, 0x2101	; 0x802101 <q3>
    10a4:	f0 90 02 21 	lds	r15, 0x2102	; 0x802102 <q3+0x1>
    10a8:	00 91 03 21 	lds	r16, 0x2103	; 0x802103 <q3+0x2>
    10ac:	10 91 04 21 	lds	r17, 0x2104	; 0x802104 <q3+0x3>
    10b0:	ee aa       	std	Y+54, r14	; 0x36
    10b2:	ff aa       	std	Y+55, r15	; 0x37
    10b4:	08 af       	std	Y+56, r16	; 0x38
    10b6:	19 af       	std	Y+57, r17	; 0x39
    10b8:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    10bc:	6b 01       	movw	r12, r22
    10be:	7c 01       	movw	r14, r24
    10c0:	a3 01       	movw	r20, r6
    10c2:	92 01       	movw	r18, r4
    10c4:	c5 01       	movw	r24, r10
    10c6:	b4 01       	movw	r22, r8
    10c8:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    10cc:	9b 01       	movw	r18, r22
    10ce:	ac 01       	movw	r20, r24
    10d0:	c7 01       	movw	r24, r14
    10d2:	b6 01       	movw	r22, r12
    10d4:	0e 94 60 1f 	call	0x3ec0	; 0x3ec0 <__subsf3>
    10d8:	4b 01       	movw	r8, r22
    10da:	5c 01       	movw	r10, r24
    10dc:	2a a1       	ldd	r18, Y+34	; 0x22
    10de:	3b a1       	ldd	r19, Y+35	; 0x23
    10e0:	4c a1       	ldd	r20, Y+36	; 0x24
    10e2:	5d a1       	ldd	r21, Y+37	; 0x25
    10e4:	6e 89       	ldd	r22, Y+22	; 0x16
    10e6:	7f 89       	ldd	r23, Y+23	; 0x17
    10e8:	88 8d       	ldd	r24, Y+24	; 0x18
    10ea:	99 8d       	ldd	r25, Y+25	; 0x19
    10ec:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    10f0:	9b 01       	movw	r18, r22
    10f2:	ac 01       	movw	r20, r24
    10f4:	c5 01       	movw	r24, r10
    10f6:	b4 01       	movw	r22, r8
    10f8:	0e 94 60 1f 	call	0x3ec0	; 0x3ec0 <__subsf3>
    10fc:	4b 01       	movw	r8, r22
    10fe:	5c 01       	movw	r10, r24
    1100:	2a a5       	ldd	r18, Y+42	; 0x2a
    1102:	3b a5       	ldd	r19, Y+43	; 0x2b
    1104:	4c a5       	ldd	r20, Y+44	; 0x2c
    1106:	5d a5       	ldd	r21, Y+45	; 0x2d
    1108:	6e a1       	ldd	r22, Y+38	; 0x26
    110a:	7f a1       	ldd	r23, Y+39	; 0x27
    110c:	88 a5       	ldd	r24, Y+40	; 0x28
    110e:	99 a5       	ldd	r25, Y+41	; 0x29
    1110:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    1114:	9b 01       	movw	r18, r22
    1116:	ac 01       	movw	r20, r24
    1118:	c5 01       	movw	r24, r10
    111a:	b4 01       	movw	r22, r8
    111c:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <__addsf3>
    1120:	2b 01       	movw	r4, r22
    1122:	3c 01       	movw	r6, r24
    1124:	2a a9       	ldd	r18, Y+50	; 0x32
    1126:	3b a9       	ldd	r19, Y+51	; 0x33
    1128:	4c a9       	ldd	r20, Y+52	; 0x34
    112a:	5d a9       	ldd	r21, Y+53	; 0x35
    112c:	6e a5       	ldd	r22, Y+46	; 0x2e
    112e:	7f a5       	ldd	r23, Y+47	; 0x2f
    1130:	88 a9       	ldd	r24, Y+48	; 0x30
    1132:	99 a9       	ldd	r25, Y+49	; 0x31
    1134:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    1138:	4b 01       	movw	r8, r22
    113a:	5c 01       	movw	r10, r24
    113c:	2e a9       	ldd	r18, Y+54	; 0x36
    113e:	3f a9       	ldd	r19, Y+55	; 0x37
    1140:	48 ad       	ldd	r20, Y+56	; 0x38
    1142:	59 ad       	ldd	r21, Y+57	; 0x39
    1144:	22 96       	adiw	r28, 0x02	; 2
    1146:	6c ad       	ldd	r22, Y+60	; 0x3c
    1148:	7d ad       	ldd	r23, Y+61	; 0x3d
    114a:	8e ad       	ldd	r24, Y+62	; 0x3e
    114c:	9f ad       	ldd	r25, Y+63	; 0x3f
    114e:	22 97       	sbiw	r28, 0x02	; 2
    1150:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    1154:	9b 01       	movw	r18, r22
    1156:	ac 01       	movw	r20, r24
    1158:	c5 01       	movw	r24, r10
    115a:	b4 01       	movw	r22, r8
    115c:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <__addsf3>
    1160:	9b 01       	movw	r18, r22
    1162:	ac 01       	movw	r20, r24
    1164:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <__addsf3>
    1168:	a3 01       	movw	r20, r6
    116a:	92 01       	movw	r18, r4
    116c:	0e 94 eb 1f 	call	0x3fd6	; 0x3fd6 <atan2>
    1170:	6b 01       	movw	r12, r22
    1172:	7c 01       	movw	r14, r24
	imudata.pitch *= 180.0 / PI; //converts pitch angle to degrees
	imudata.yaw   *= 180.0 / PI; //converts yaw angle to degrees	
	imudata.roll  *= 180.0 / PI;  //converts roll to degrees
	imudata.data = data;
    1174:	85 e1       	ldi	r24, 0x15	; 21
    1176:	e7 e2       	ldi	r30, 0x27	; 39
    1178:	f2 e2       	ldi	r31, 0x22	; 34
    117a:	d1 01       	movw	r26, r2
    117c:	1c 96       	adiw	r26, 0x0c	; 12
    117e:	01 90       	ld	r0, Z+
    1180:	0d 92       	st	X+, r0
    1182:	8a 95       	dec	r24
    1184:	e1 f7       	brne	.-8      	; 0x117e <imu_update+0x744>
	
	return imudata;
    1186:	6e 8d       	ldd	r22, Y+30	; 0x1e
    1188:	7f 8d       	ldd	r23, Y+31	; 0x1f
    118a:	88 a1       	ldd	r24, Y+32	; 0x20
    118c:	99 a1       	ldd	r25, Y+33	; 0x21
    118e:	90 58       	subi	r25, 0x80	; 128
    1190:	2d ee       	ldi	r18, 0xED	; 237
    1192:	3e e2       	ldi	r19, 0x2E	; 46
    1194:	45 e6       	ldi	r20, 0x65	; 101
    1196:	52 e4       	ldi	r21, 0x42	; 66
    1198:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    119c:	f1 01       	movw	r30, r2
    119e:	60 83       	st	Z, r22
    11a0:	71 83       	std	Z+1, r23	; 0x01
    11a2:	82 83       	std	Z+2, r24	; 0x02
    11a4:	93 83       	std	Z+3, r25	; 0x03
    11a6:	2d ee       	ldi	r18, 0xED	; 237
    11a8:	3e e2       	ldi	r19, 0x2E	; 46
    11aa:	45 e6       	ldi	r20, 0x65	; 101
    11ac:	52 e4       	ldi	r21, 0x42	; 66
    11ae:	c7 01       	movw	r24, r14
    11b0:	b6 01       	movw	r22, r12
    11b2:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    11b6:	f1 01       	movw	r30, r2
    11b8:	64 83       	std	Z+4, r22	; 0x04
    11ba:	75 83       	std	Z+5, r23	; 0x05
    11bc:	86 83       	std	Z+6, r24	; 0x06
    11be:	97 83       	std	Z+7, r25	; 0x07
    11c0:	2d ee       	ldi	r18, 0xED	; 237
    11c2:	3e e2       	ldi	r19, 0x2E	; 46
    11c4:	45 e6       	ldi	r20, 0x65	; 101
    11c6:	52 e4       	ldi	r21, 0x42	; 66
    11c8:	6a 8d       	ldd	r22, Y+26	; 0x1a
    11ca:	7b 8d       	ldd	r23, Y+27	; 0x1b
    11cc:	8c 8d       	ldd	r24, Y+28	; 0x1c
    11ce:	9d 8d       	ldd	r25, Y+29	; 0x1d
    11d0:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    11d4:	f1 01       	movw	r30, r2
    11d6:	60 87       	std	Z+8, r22	; 0x08
    11d8:	71 87       	std	Z+9, r23	; 0x09
    11da:	82 87       	std	Z+10, r24	; 0x0a
    11dc:	93 87       	std	Z+11, r25	; 0x0b
    11de:	cd bf       	out	0x3d, r28	; 61
    11e0:	de bf       	out	0x3e, r29	; 62
}
    11e2:	c1 01       	movw	r24, r2
    11e4:	cf 5b       	subi	r28, 0xBF	; 191
    11e6:	df 4f       	sbci	r29, 0xFF	; 255
    11e8:	cd bf       	out	0x3d, r28	; 61
    11ea:	de bf       	out	0x3e, r29	; 62
    11ec:	df 91       	pop	r29
    11ee:	cf 91       	pop	r28
    11f0:	1f 91       	pop	r17
    11f2:	0f 91       	pop	r16
    11f4:	ff 90       	pop	r15
    11f6:	ef 90       	pop	r14
    11f8:	df 90       	pop	r13
    11fa:	cf 90       	pop	r12
    11fc:	bf 90       	pop	r11
    11fe:	af 90       	pop	r10
    1200:	9f 90       	pop	r9
    1202:	8f 90       	pop	r8
    1204:	7f 90       	pop	r7
    1206:	6f 90       	pop	r6
    1208:	5f 90       	pop	r5
    120a:	4f 90       	pop	r4
    120c:	3f 90       	pop	r3
    120e:	2f 90       	pop	r2
    1210:	08 95       	ret

00001212 <invSqrt>:

//---------------------------------------------------------------------------------------------------
// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root

double invSqrt(double x) {
    1212:	cf 92       	push	r12
    1214:	df 92       	push	r13
    1216:	ef 92       	push	r14
    1218:	ff 92       	push	r15
    121a:	0f 93       	push	r16
    121c:	1f 93       	push	r17
	double halfx = 0.5 * x;
	double y = x;
	long i = *(long*)&y;
	i = 0x5f3759df - (i>>1);
	y = *(double*)&i;
    121e:	8b 01       	movw	r16, r22
    1220:	9c 01       	movw	r18, r24
    1222:	35 95       	asr	r19
    1224:	27 95       	ror	r18
    1226:	17 95       	ror	r17
    1228:	07 95       	ror	r16
    122a:	0f 2e       	mov	r0, r31
    122c:	ff ed       	ldi	r31, 0xDF	; 223
    122e:	cf 2e       	mov	r12, r31
    1230:	f9 e5       	ldi	r31, 0x59	; 89
    1232:	df 2e       	mov	r13, r31
    1234:	f7 e3       	ldi	r31, 0x37	; 55
    1236:	ef 2e       	mov	r14, r31
    1238:	ff e5       	ldi	r31, 0x5F	; 95
    123a:	ff 2e       	mov	r15, r31
    123c:	f0 2d       	mov	r31, r0
    123e:	c0 1a       	sub	r12, r16
    1240:	d1 0a       	sbc	r13, r17
    1242:	e2 0a       	sbc	r14, r18
    1244:	f3 0a       	sbc	r15, r19
	y = y * (1.5 - (halfx * y * y));
	return y;
    1246:	20 e0       	ldi	r18, 0x00	; 0
    1248:	30 e0       	ldi	r19, 0x00	; 0
    124a:	40 e0       	ldi	r20, 0x00	; 0
    124c:	5f e3       	ldi	r21, 0x3F	; 63
    124e:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    1252:	a7 01       	movw	r20, r14
    1254:	96 01       	movw	r18, r12
    1256:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    125a:	a7 01       	movw	r20, r14
    125c:	96 01       	movw	r18, r12
    125e:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    1262:	9b 01       	movw	r18, r22
    1264:	ac 01       	movw	r20, r24
    1266:	60 e0       	ldi	r22, 0x00	; 0
    1268:	70 e0       	ldi	r23, 0x00	; 0
    126a:	80 ec       	ldi	r24, 0xC0	; 192
    126c:	9f e3       	ldi	r25, 0x3F	; 63
    126e:	0e 94 60 1f 	call	0x3ec0	; 0x3ec0 <__subsf3>
    1272:	a7 01       	movw	r20, r14
    1274:	96 01       	movw	r18, r12
    1276:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
}
    127a:	1f 91       	pop	r17
    127c:	0f 91       	pop	r16
    127e:	ff 90       	pop	r15
    1280:	ef 90       	pop	r14
    1282:	df 90       	pop	r13
    1284:	cf 90       	pop	r12
    1286:	08 95       	ret

00001288 <MahonyAHRSupdateIMU>:
}

//---------------------------------------------------------------------------------------------------
// IMU algorithm update

void MahonyAHRSupdateIMU(double gx, double gy, double gz, double ax, double ay, double az) {
    1288:	4f 92       	push	r4
    128a:	5f 92       	push	r5
    128c:	6f 92       	push	r6
    128e:	7f 92       	push	r7
    1290:	8f 92       	push	r8
    1292:	9f 92       	push	r9
    1294:	af 92       	push	r10
    1296:	bf 92       	push	r11
    1298:	cf 92       	push	r12
    129a:	df 92       	push	r13
    129c:	ef 92       	push	r14
    129e:	ff 92       	push	r15
    12a0:	0f 93       	push	r16
    12a2:	1f 93       	push	r17
    12a4:	cf 93       	push	r28
    12a6:	df 93       	push	r29
    12a8:	cd b7       	in	r28, 0x3d	; 61
    12aa:	de b7       	in	r29, 0x3e	; 62
    12ac:	a4 97       	sbiw	r28, 0x24	; 36
    12ae:	cd bf       	out	0x3d, r28	; 61
    12b0:	de bf       	out	0x3e, r29	; 62
    12b2:	69 87       	std	Y+9, r22	; 0x09
    12b4:	7a 87       	std	Y+10, r23	; 0x0a
    12b6:	8b 87       	std	Y+11, r24	; 0x0b
    12b8:	9c 87       	std	Y+12, r25	; 0x0c
    12ba:	2d 87       	std	Y+13, r18	; 0x0d
    12bc:	3e 87       	std	Y+14, r19	; 0x0e
    12be:	4f 87       	std	Y+15, r20	; 0x0f
    12c0:	58 8b       	std	Y+16, r21	; 0x10
    12c2:	e9 8a       	std	Y+17, r14	; 0x11
    12c4:	fa 8a       	std	Y+18, r15	; 0x12
    12c6:	0b 8b       	std	Y+19, r16	; 0x13
    12c8:	1c 8b       	std	Y+20, r17	; 0x14
	double halfvx, halfvy, halfvz;
	double halfex, halfey, halfez;
	double qa, qb, qc;

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0) && (ay == 0.0) && (az == 0.0))) {
    12ca:	20 e0       	ldi	r18, 0x00	; 0
    12cc:	30 e0       	ldi	r19, 0x00	; 0
    12ce:	a9 01       	movw	r20, r18
    12d0:	c6 01       	movw	r24, r12
    12d2:	b5 01       	movw	r22, r10
    12d4:	0e 94 3e 20 	call	0x407c	; 0x407c <__cmpsf2>
    12d8:	81 11       	cpse	r24, r1
    12da:	17 c0       	rjmp	.+46     	; 0x130a <MahonyAHRSupdateIMU+0x82>
    12dc:	20 e0       	ldi	r18, 0x00	; 0
    12de:	30 e0       	ldi	r19, 0x00	; 0
    12e0:	a9 01       	movw	r20, r18
    12e2:	6f a9       	ldd	r22, Y+55	; 0x37
    12e4:	78 ad       	ldd	r23, Y+56	; 0x38
    12e6:	89 ad       	ldd	r24, Y+57	; 0x39
    12e8:	9a ad       	ldd	r25, Y+58	; 0x3a
    12ea:	0e 94 3e 20 	call	0x407c	; 0x407c <__cmpsf2>
    12ee:	81 11       	cpse	r24, r1
    12f0:	0c c0       	rjmp	.+24     	; 0x130a <MahonyAHRSupdateIMU+0x82>
    12f2:	20 e0       	ldi	r18, 0x00	; 0
    12f4:	30 e0       	ldi	r19, 0x00	; 0
    12f6:	a9 01       	movw	r20, r18
    12f8:	6b ad       	ldd	r22, Y+59	; 0x3b
    12fa:	7c ad       	ldd	r23, Y+60	; 0x3c
    12fc:	8d ad       	ldd	r24, Y+61	; 0x3d
    12fe:	9e ad       	ldd	r25, Y+62	; 0x3e
    1300:	0e 94 3e 20 	call	0x407c	; 0x407c <__cmpsf2>
    1304:	88 23       	and	r24, r24
    1306:	09 f4       	brne	.+2      	; 0x130a <MahonyAHRSupdateIMU+0x82>
    1308:	60 c2       	rjmp	.+1216   	; 0x17ca <MahonyAHRSupdateIMU+0x542>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
    130a:	a6 01       	movw	r20, r12
    130c:	95 01       	movw	r18, r10
    130e:	c6 01       	movw	r24, r12
    1310:	b5 01       	movw	r22, r10
    1312:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    1316:	2b 01       	movw	r4, r22
    1318:	3c 01       	movw	r6, r24
    131a:	2f a9       	ldd	r18, Y+55	; 0x37
    131c:	38 ad       	ldd	r19, Y+56	; 0x38
    131e:	49 ad       	ldd	r20, Y+57	; 0x39
    1320:	5a ad       	ldd	r21, Y+58	; 0x3a
    1322:	ca 01       	movw	r24, r20
    1324:	b9 01       	movw	r22, r18
    1326:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    132a:	9b 01       	movw	r18, r22
    132c:	ac 01       	movw	r20, r24
    132e:	c3 01       	movw	r24, r6
    1330:	b2 01       	movw	r22, r4
    1332:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <__addsf3>
    1336:	2b 01       	movw	r4, r22
    1338:	3c 01       	movw	r6, r24
    133a:	2b ad       	ldd	r18, Y+59	; 0x3b
    133c:	3c ad       	ldd	r19, Y+60	; 0x3c
    133e:	4d ad       	ldd	r20, Y+61	; 0x3d
    1340:	5e ad       	ldd	r21, Y+62	; 0x3e
    1342:	ca 01       	movw	r24, r20
    1344:	b9 01       	movw	r22, r18
    1346:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    134a:	9b 01       	movw	r18, r22
    134c:	ac 01       	movw	r20, r24
    134e:	c3 01       	movw	r24, r6
    1350:	b2 01       	movw	r22, r4
    1352:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <__addsf3>
    1356:	5d df       	rcall	.-326    	; 0x1212 <invSqrt>
    1358:	2b 01       	movw	r4, r22
    135a:	3c 01       	movw	r6, r24
		ax *= recipNorm;
    135c:	9b 01       	movw	r18, r22
    135e:	ac 01       	movw	r20, r24
    1360:	c6 01       	movw	r24, r12
    1362:	b5 01       	movw	r22, r10
    1364:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    1368:	69 83       	std	Y+1, r22	; 0x01
    136a:	7a 83       	std	Y+2, r23	; 0x02
    136c:	8b 83       	std	Y+3, r24	; 0x03
    136e:	9c 83       	std	Y+4, r25	; 0x04
		ay *= recipNorm;
    1370:	a3 01       	movw	r20, r6
    1372:	92 01       	movw	r18, r4
    1374:	6f a9       	ldd	r22, Y+55	; 0x37
    1376:	78 ad       	ldd	r23, Y+56	; 0x38
    1378:	89 ad       	ldd	r24, Y+57	; 0x39
    137a:	9a ad       	ldd	r25, Y+58	; 0x3a
    137c:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    1380:	6d 83       	std	Y+5, r22	; 0x05
    1382:	7e 83       	std	Y+6, r23	; 0x06
    1384:	8f 83       	std	Y+7, r24	; 0x07
    1386:	98 87       	std	Y+8, r25	; 0x08
		az *= recipNorm;        
    1388:	a3 01       	movw	r20, r6
    138a:	92 01       	movw	r18, r4
    138c:	6b ad       	ldd	r22, Y+59	; 0x3b
    138e:	7c ad       	ldd	r23, Y+60	; 0x3c
    1390:	8d ad       	ldd	r24, Y+61	; 0x3d
    1392:	9e ad       	ldd	r25, Y+62	; 0x3e
    1394:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    1398:	6d 8b       	std	Y+21, r22	; 0x15
    139a:	7e 8b       	std	Y+22, r23	; 0x16
    139c:	8f 8b       	std	Y+23, r24	; 0x17
    139e:	98 8f       	std	Y+24, r25	; 0x18

		// Estimated direction of gravity and vector perpendicular to magnetic flux
		halfvx = q1 * q3 - q0 * q2;
    13a0:	60 91 09 21 	lds	r22, 0x2109	; 0x802109 <q1>
    13a4:	70 91 0a 21 	lds	r23, 0x210A	; 0x80210a <q1+0x1>
    13a8:	80 91 0b 21 	lds	r24, 0x210B	; 0x80210b <q1+0x2>
    13ac:	90 91 0c 21 	lds	r25, 0x210C	; 0x80210c <q1+0x3>
    13b0:	20 91 01 21 	lds	r18, 0x2101	; 0x802101 <q3>
    13b4:	30 91 02 21 	lds	r19, 0x2102	; 0x802102 <q3+0x1>
    13b8:	40 91 03 21 	lds	r20, 0x2103	; 0x802103 <q3+0x2>
    13bc:	50 91 04 21 	lds	r21, 0x2104	; 0x802104 <q3+0x3>
    13c0:	80 90 14 20 	lds	r8, 0x2014	; 0x802014 <q0>
    13c4:	90 90 15 20 	lds	r9, 0x2015	; 0x802015 <q0+0x1>
    13c8:	a0 90 16 20 	lds	r10, 0x2016	; 0x802016 <q0+0x2>
    13cc:	b0 90 17 20 	lds	r11, 0x2017	; 0x802017 <q0+0x3>
    13d0:	40 90 05 21 	lds	r4, 0x2105	; 0x802105 <q2>
    13d4:	50 90 06 21 	lds	r5, 0x2106	; 0x802106 <q2+0x1>
    13d8:	60 90 07 21 	lds	r6, 0x2107	; 0x802107 <q2+0x2>
    13dc:	70 90 08 21 	lds	r7, 0x2108	; 0x802108 <q2+0x3>
    13e0:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    13e4:	6b 01       	movw	r12, r22
    13e6:	7c 01       	movw	r14, r24
    13e8:	a3 01       	movw	r20, r6
    13ea:	92 01       	movw	r18, r4
    13ec:	c5 01       	movw	r24, r10
    13ee:	b4 01       	movw	r22, r8
    13f0:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    13f4:	9b 01       	movw	r18, r22
    13f6:	ac 01       	movw	r20, r24
    13f8:	c7 01       	movw	r24, r14
    13fa:	b6 01       	movw	r22, r12
    13fc:	0e 94 60 1f 	call	0x3ec0	; 0x3ec0 <__subsf3>
    1400:	69 8f       	std	Y+25, r22	; 0x19
    1402:	7a 8f       	std	Y+26, r23	; 0x1a
    1404:	8b 8f       	std	Y+27, r24	; 0x1b
    1406:	9c 8f       	std	Y+28, r25	; 0x1c
		halfvy = q0 * q1 + q2 * q3;
    1408:	60 91 14 20 	lds	r22, 0x2014	; 0x802014 <q0>
    140c:	70 91 15 20 	lds	r23, 0x2015	; 0x802015 <q0+0x1>
    1410:	80 91 16 20 	lds	r24, 0x2016	; 0x802016 <q0+0x2>
    1414:	90 91 17 20 	lds	r25, 0x2017	; 0x802017 <q0+0x3>
    1418:	20 91 09 21 	lds	r18, 0x2109	; 0x802109 <q1>
    141c:	30 91 0a 21 	lds	r19, 0x210A	; 0x80210a <q1+0x1>
    1420:	40 91 0b 21 	lds	r20, 0x210B	; 0x80210b <q1+0x2>
    1424:	50 91 0c 21 	lds	r21, 0x210C	; 0x80210c <q1+0x3>
    1428:	80 90 05 21 	lds	r8, 0x2105	; 0x802105 <q2>
    142c:	90 90 06 21 	lds	r9, 0x2106	; 0x802106 <q2+0x1>
    1430:	a0 90 07 21 	lds	r10, 0x2107	; 0x802107 <q2+0x2>
    1434:	b0 90 08 21 	lds	r11, 0x2108	; 0x802108 <q2+0x3>
    1438:	40 90 01 21 	lds	r4, 0x2101	; 0x802101 <q3>
    143c:	50 90 02 21 	lds	r5, 0x2102	; 0x802102 <q3+0x1>
    1440:	60 90 03 21 	lds	r6, 0x2103	; 0x802103 <q3+0x2>
    1444:	70 90 04 21 	lds	r7, 0x2104	; 0x802104 <q3+0x3>
    1448:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    144c:	6b 01       	movw	r12, r22
    144e:	7c 01       	movw	r14, r24
    1450:	a3 01       	movw	r20, r6
    1452:	92 01       	movw	r18, r4
    1454:	c5 01       	movw	r24, r10
    1456:	b4 01       	movw	r22, r8
    1458:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    145c:	9b 01       	movw	r18, r22
    145e:	ac 01       	movw	r20, r24
    1460:	c7 01       	movw	r24, r14
    1462:	b6 01       	movw	r22, r12
    1464:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <__addsf3>
    1468:	6d 8f       	std	Y+29, r22	; 0x1d
    146a:	7e 8f       	std	Y+30, r23	; 0x1e
    146c:	8f 8f       	std	Y+31, r24	; 0x1f
    146e:	98 a3       	std	Y+32, r25	; 0x20
		halfvz = q0 * q0 - 0.5 + q3 * q3;
    1470:	60 91 14 20 	lds	r22, 0x2014	; 0x802014 <q0>
    1474:	70 91 15 20 	lds	r23, 0x2015	; 0x802015 <q0+0x1>
    1478:	80 91 16 20 	lds	r24, 0x2016	; 0x802016 <q0+0x2>
    147c:	90 91 17 20 	lds	r25, 0x2017	; 0x802017 <q0+0x3>
    1480:	20 91 14 20 	lds	r18, 0x2014	; 0x802014 <q0>
    1484:	30 91 15 20 	lds	r19, 0x2015	; 0x802015 <q0+0x1>
    1488:	40 91 16 20 	lds	r20, 0x2016	; 0x802016 <q0+0x2>
    148c:	50 91 17 20 	lds	r21, 0x2017	; 0x802017 <q0+0x3>
    1490:	80 90 01 21 	lds	r8, 0x2101	; 0x802101 <q3>
    1494:	90 90 02 21 	lds	r9, 0x2102	; 0x802102 <q3+0x1>
    1498:	a0 90 03 21 	lds	r10, 0x2103	; 0x802103 <q3+0x2>
    149c:	b0 90 04 21 	lds	r11, 0x2104	; 0x802104 <q3+0x3>
    14a0:	40 90 01 21 	lds	r4, 0x2101	; 0x802101 <q3>
    14a4:	50 90 02 21 	lds	r5, 0x2102	; 0x802102 <q3+0x1>
    14a8:	60 90 03 21 	lds	r6, 0x2103	; 0x802103 <q3+0x2>
    14ac:	70 90 04 21 	lds	r7, 0x2104	; 0x802104 <q3+0x3>
    14b0:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    14b4:	20 e0       	ldi	r18, 0x00	; 0
    14b6:	30 e0       	ldi	r19, 0x00	; 0
    14b8:	40 e0       	ldi	r20, 0x00	; 0
    14ba:	5f e3       	ldi	r21, 0x3F	; 63
    14bc:	0e 94 60 1f 	call	0x3ec0	; 0x3ec0 <__subsf3>
    14c0:	6b 01       	movw	r12, r22
    14c2:	7c 01       	movw	r14, r24
    14c4:	a3 01       	movw	r20, r6
    14c6:	92 01       	movw	r18, r4
    14c8:	c5 01       	movw	r24, r10
    14ca:	b4 01       	movw	r22, r8
    14cc:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    14d0:	9b 01       	movw	r18, r22
    14d2:	ac 01       	movw	r20, r24
    14d4:	c7 01       	movw	r24, r14
    14d6:	b6 01       	movw	r22, r12
    14d8:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <__addsf3>
    14dc:	6b 01       	movw	r12, r22
    14de:	7c 01       	movw	r14, r24
	
		// Error is sum of cross product between estimated and measured direction of gravity
		halfex = (ay * halfvz - az * halfvy);
    14e0:	9b 01       	movw	r18, r22
    14e2:	ac 01       	movw	r20, r24
    14e4:	6d 81       	ldd	r22, Y+5	; 0x05
    14e6:	7e 81       	ldd	r23, Y+6	; 0x06
    14e8:	8f 81       	ldd	r24, Y+7	; 0x07
    14ea:	98 85       	ldd	r25, Y+8	; 0x08
    14ec:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    14f0:	4b 01       	movw	r8, r22
    14f2:	5c 01       	movw	r10, r24
    14f4:	2d 8d       	ldd	r18, Y+29	; 0x1d
    14f6:	3e 8d       	ldd	r19, Y+30	; 0x1e
    14f8:	4f 8d       	ldd	r20, Y+31	; 0x1f
    14fa:	58 a1       	ldd	r21, Y+32	; 0x20
    14fc:	6d 89       	ldd	r22, Y+21	; 0x15
    14fe:	7e 89       	ldd	r23, Y+22	; 0x16
    1500:	8f 89       	ldd	r24, Y+23	; 0x17
    1502:	98 8d       	ldd	r25, Y+24	; 0x18
    1504:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    1508:	9b 01       	movw	r18, r22
    150a:	ac 01       	movw	r20, r24
    150c:	c5 01       	movw	r24, r10
    150e:	b4 01       	movw	r22, r8
    1510:	0e 94 60 1f 	call	0x3ec0	; 0x3ec0 <__subsf3>
    1514:	69 a3       	std	Y+33, r22	; 0x21
    1516:	7a a3       	std	Y+34, r23	; 0x22
    1518:	8b a3       	std	Y+35, r24	; 0x23
    151a:	9c a3       	std	Y+36, r25	; 0x24
		halfey = (az * halfvx - ax * halfvz);
    151c:	29 8d       	ldd	r18, Y+25	; 0x19
    151e:	3a 8d       	ldd	r19, Y+26	; 0x1a
    1520:	4b 8d       	ldd	r20, Y+27	; 0x1b
    1522:	5c 8d       	ldd	r21, Y+28	; 0x1c
    1524:	6d 89       	ldd	r22, Y+21	; 0x15
    1526:	7e 89       	ldd	r23, Y+22	; 0x16
    1528:	8f 89       	ldd	r24, Y+23	; 0x17
    152a:	98 8d       	ldd	r25, Y+24	; 0x18
    152c:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    1530:	4b 01       	movw	r8, r22
    1532:	5c 01       	movw	r10, r24
    1534:	a7 01       	movw	r20, r14
    1536:	96 01       	movw	r18, r12
    1538:	69 81       	ldd	r22, Y+1	; 0x01
    153a:	7a 81       	ldd	r23, Y+2	; 0x02
    153c:	8b 81       	ldd	r24, Y+3	; 0x03
    153e:	9c 81       	ldd	r25, Y+4	; 0x04
    1540:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    1544:	9b 01       	movw	r18, r22
    1546:	ac 01       	movw	r20, r24
    1548:	c5 01       	movw	r24, r10
    154a:	b4 01       	movw	r22, r8
    154c:	0e 94 60 1f 	call	0x3ec0	; 0x3ec0 <__subsf3>
    1550:	4b 01       	movw	r8, r22
    1552:	5c 01       	movw	r10, r24
		halfez = (ax * halfvy - ay * halfvx);
    1554:	2d 8d       	ldd	r18, Y+29	; 0x1d
    1556:	3e 8d       	ldd	r19, Y+30	; 0x1e
    1558:	4f 8d       	ldd	r20, Y+31	; 0x1f
    155a:	58 a1       	ldd	r21, Y+32	; 0x20
    155c:	69 81       	ldd	r22, Y+1	; 0x01
    155e:	7a 81       	ldd	r23, Y+2	; 0x02
    1560:	8b 81       	ldd	r24, Y+3	; 0x03
    1562:	9c 81       	ldd	r25, Y+4	; 0x04
    1564:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    1568:	6b 01       	movw	r12, r22
    156a:	7c 01       	movw	r14, r24
    156c:	29 8d       	ldd	r18, Y+25	; 0x19
    156e:	3a 8d       	ldd	r19, Y+26	; 0x1a
    1570:	4b 8d       	ldd	r20, Y+27	; 0x1b
    1572:	5c 8d       	ldd	r21, Y+28	; 0x1c
    1574:	6d 81       	ldd	r22, Y+5	; 0x05
    1576:	7e 81       	ldd	r23, Y+6	; 0x06
    1578:	8f 81       	ldd	r24, Y+7	; 0x07
    157a:	98 85       	ldd	r25, Y+8	; 0x08
    157c:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    1580:	9b 01       	movw	r18, r22
    1582:	ac 01       	movw	r20, r24
    1584:	c7 01       	movw	r24, r14
    1586:	b6 01       	movw	r22, r12
    1588:	0e 94 60 1f 	call	0x3ec0	; 0x3ec0 <__subsf3>
    158c:	6b 01       	movw	r12, r22
    158e:	7c 01       	movw	r14, r24

		// Compute and apply integral feedback if enabled
		if(twoKi > 0.0) {
    1590:	60 91 0d 21 	lds	r22, 0x210D	; 0x80210d <twoKi>
    1594:	70 91 0e 21 	lds	r23, 0x210E	; 0x80210e <twoKi+0x1>
    1598:	80 91 0f 21 	lds	r24, 0x210F	; 0x80210f <twoKi+0x2>
    159c:	90 91 10 21 	lds	r25, 0x2110	; 0x802110 <twoKi+0x3>
    15a0:	20 e0       	ldi	r18, 0x00	; 0
    15a2:	30 e0       	ldi	r19, 0x00	; 0
    15a4:	a9 01       	movw	r20, r18
    15a6:	0e 94 de 21 	call	0x43bc	; 0x43bc <__gesf2>
    15aa:	18 16       	cp	r1, r24
    15ac:	0c f0       	brlt	.+2      	; 0x15b0 <MahonyAHRSupdateIMU+0x328>
    15ae:	ab c0       	rjmp	.+342    	; 0x1706 <MahonyAHRSupdateIMU+0x47e>
			integralFBx += twoKi * halfex * (1.0 / sampleFreq);	// integral error scaled by Ki
    15b0:	20 91 0d 21 	lds	r18, 0x210D	; 0x80210d <twoKi>
    15b4:	30 91 0e 21 	lds	r19, 0x210E	; 0x80210e <twoKi+0x1>
    15b8:	40 91 0f 21 	lds	r20, 0x210F	; 0x80210f <twoKi+0x2>
    15bc:	50 91 10 21 	lds	r21, 0x2110	; 0x802110 <twoKi+0x3>
    15c0:	40 90 fd 20 	lds	r4, 0x20FD	; 0x8020fd <integralFBx>
    15c4:	50 90 fe 20 	lds	r5, 0x20FE	; 0x8020fe <integralFBx+0x1>
    15c8:	60 90 ff 20 	lds	r6, 0x20FF	; 0x8020ff <integralFBx+0x2>
    15cc:	70 90 00 21 	lds	r7, 0x2100	; 0x802100 <integralFBx+0x3>
    15d0:	69 a1       	ldd	r22, Y+33	; 0x21
    15d2:	7a a1       	ldd	r23, Y+34	; 0x22
    15d4:	8b a1       	ldd	r24, Y+35	; 0x23
    15d6:	9c a1       	ldd	r25, Y+36	; 0x24
    15d8:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    15dc:	2a ef       	ldi	r18, 0xFA	; 250
    15de:	39 ec       	ldi	r19, 0xC9	; 201
    15e0:	44 e3       	ldi	r20, 0x34	; 52
    15e2:	59 e3       	ldi	r21, 0x39	; 57
    15e4:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    15e8:	a3 01       	movw	r20, r6
    15ea:	92 01       	movw	r18, r4
    15ec:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <__addsf3>
    15f0:	60 93 fd 20 	sts	0x20FD, r22	; 0x8020fd <integralFBx>
    15f4:	70 93 fe 20 	sts	0x20FE, r23	; 0x8020fe <integralFBx+0x1>
    15f8:	80 93 ff 20 	sts	0x20FF, r24	; 0x8020ff <integralFBx+0x2>
    15fc:	90 93 00 21 	sts	0x2100, r25	; 0x802100 <integralFBx+0x3>
			integralFBy += twoKi * halfey * (1.0 / sampleFreq);
    1600:	20 91 0d 21 	lds	r18, 0x210D	; 0x80210d <twoKi>
    1604:	30 91 0e 21 	lds	r19, 0x210E	; 0x80210e <twoKi+0x1>
    1608:	40 91 0f 21 	lds	r20, 0x210F	; 0x80210f <twoKi+0x2>
    160c:	50 91 10 21 	lds	r21, 0x2110	; 0x802110 <twoKi+0x3>
    1610:	40 90 f9 20 	lds	r4, 0x20F9	; 0x8020f9 <integralFBy>
    1614:	50 90 fa 20 	lds	r5, 0x20FA	; 0x8020fa <integralFBy+0x1>
    1618:	60 90 fb 20 	lds	r6, 0x20FB	; 0x8020fb <integralFBy+0x2>
    161c:	70 90 fc 20 	lds	r7, 0x20FC	; 0x8020fc <integralFBy+0x3>
    1620:	c5 01       	movw	r24, r10
    1622:	b4 01       	movw	r22, r8
    1624:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    1628:	2a ef       	ldi	r18, 0xFA	; 250
    162a:	39 ec       	ldi	r19, 0xC9	; 201
    162c:	44 e3       	ldi	r20, 0x34	; 52
    162e:	59 e3       	ldi	r21, 0x39	; 57
    1630:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    1634:	a3 01       	movw	r20, r6
    1636:	92 01       	movw	r18, r4
    1638:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <__addsf3>
    163c:	60 93 f9 20 	sts	0x20F9, r22	; 0x8020f9 <integralFBy>
    1640:	70 93 fa 20 	sts	0x20FA, r23	; 0x8020fa <integralFBy+0x1>
    1644:	80 93 fb 20 	sts	0x20FB, r24	; 0x8020fb <integralFBy+0x2>
    1648:	90 93 fc 20 	sts	0x20FC, r25	; 0x8020fc <integralFBy+0x3>
			integralFBz += twoKi * halfez * (1.0 / sampleFreq);
    164c:	20 91 0d 21 	lds	r18, 0x210D	; 0x80210d <twoKi>
    1650:	30 91 0e 21 	lds	r19, 0x210E	; 0x80210e <twoKi+0x1>
    1654:	40 91 0f 21 	lds	r20, 0x210F	; 0x80210f <twoKi+0x2>
    1658:	50 91 10 21 	lds	r21, 0x2110	; 0x802110 <twoKi+0x3>
    165c:	40 90 f5 20 	lds	r4, 0x20F5	; 0x8020f5 <integralFBz>
    1660:	50 90 f6 20 	lds	r5, 0x20F6	; 0x8020f6 <integralFBz+0x1>
    1664:	60 90 f7 20 	lds	r6, 0x20F7	; 0x8020f7 <integralFBz+0x2>
    1668:	70 90 f8 20 	lds	r7, 0x20F8	; 0x8020f8 <integralFBz+0x3>
    166c:	c7 01       	movw	r24, r14
    166e:	b6 01       	movw	r22, r12
    1670:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    1674:	2a ef       	ldi	r18, 0xFA	; 250
    1676:	39 ec       	ldi	r19, 0xC9	; 201
    1678:	44 e3       	ldi	r20, 0x34	; 52
    167a:	59 e3       	ldi	r21, 0x39	; 57
    167c:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    1680:	a3 01       	movw	r20, r6
    1682:	92 01       	movw	r18, r4
    1684:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <__addsf3>
    1688:	60 93 f5 20 	sts	0x20F5, r22	; 0x8020f5 <integralFBz>
    168c:	70 93 f6 20 	sts	0x20F6, r23	; 0x8020f6 <integralFBz+0x1>
    1690:	80 93 f7 20 	sts	0x20F7, r24	; 0x8020f7 <integralFBz+0x2>
    1694:	90 93 f8 20 	sts	0x20F8, r25	; 0x8020f8 <integralFBz+0x3>
			gx += integralFBx;	// apply integral feedback
    1698:	20 91 fd 20 	lds	r18, 0x20FD	; 0x8020fd <integralFBx>
    169c:	30 91 fe 20 	lds	r19, 0x20FE	; 0x8020fe <integralFBx+0x1>
    16a0:	40 91 ff 20 	lds	r20, 0x20FF	; 0x8020ff <integralFBx+0x2>
    16a4:	50 91 00 21 	lds	r21, 0x2100	; 0x802100 <integralFBx+0x3>
    16a8:	69 85       	ldd	r22, Y+9	; 0x09
    16aa:	7a 85       	ldd	r23, Y+10	; 0x0a
    16ac:	8b 85       	ldd	r24, Y+11	; 0x0b
    16ae:	9c 85       	ldd	r25, Y+12	; 0x0c
    16b0:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <__addsf3>
    16b4:	69 87       	std	Y+9, r22	; 0x09
    16b6:	7a 87       	std	Y+10, r23	; 0x0a
    16b8:	8b 87       	std	Y+11, r24	; 0x0b
    16ba:	9c 87       	std	Y+12, r25	; 0x0c
			gy += integralFBy;
    16bc:	20 91 f9 20 	lds	r18, 0x20F9	; 0x8020f9 <integralFBy>
    16c0:	30 91 fa 20 	lds	r19, 0x20FA	; 0x8020fa <integralFBy+0x1>
    16c4:	40 91 fb 20 	lds	r20, 0x20FB	; 0x8020fb <integralFBy+0x2>
    16c8:	50 91 fc 20 	lds	r21, 0x20FC	; 0x8020fc <integralFBy+0x3>
    16cc:	6d 85       	ldd	r22, Y+13	; 0x0d
    16ce:	7e 85       	ldd	r23, Y+14	; 0x0e
    16d0:	8f 85       	ldd	r24, Y+15	; 0x0f
    16d2:	98 89       	ldd	r25, Y+16	; 0x10
    16d4:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <__addsf3>
    16d8:	6d 87       	std	Y+13, r22	; 0x0d
    16da:	7e 87       	std	Y+14, r23	; 0x0e
    16dc:	8f 87       	std	Y+15, r24	; 0x0f
    16de:	98 8b       	std	Y+16, r25	; 0x10
			gz += integralFBz;
    16e0:	20 91 f5 20 	lds	r18, 0x20F5	; 0x8020f5 <integralFBz>
    16e4:	30 91 f6 20 	lds	r19, 0x20F6	; 0x8020f6 <integralFBz+0x1>
    16e8:	40 91 f7 20 	lds	r20, 0x20F7	; 0x8020f7 <integralFBz+0x2>
    16ec:	50 91 f8 20 	lds	r21, 0x20F8	; 0x8020f8 <integralFBz+0x3>
    16f0:	69 89       	ldd	r22, Y+17	; 0x11
    16f2:	7a 89       	ldd	r23, Y+18	; 0x12
    16f4:	8b 89       	ldd	r24, Y+19	; 0x13
    16f6:	9c 89       	ldd	r25, Y+20	; 0x14
    16f8:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <__addsf3>
    16fc:	69 8b       	std	Y+17, r22	; 0x11
    16fe:	7a 8b       	std	Y+18, r23	; 0x12
    1700:	8b 8b       	std	Y+19, r24	; 0x13
    1702:	9c 8b       	std	Y+20, r25	; 0x14
    1704:	18 c0       	rjmp	.+48     	; 0x1736 <MahonyAHRSupdateIMU+0x4ae>
		}
		else {
			integralFBx = 0.0;	// prevent integral windup
    1706:	10 92 fd 20 	sts	0x20FD, r1	; 0x8020fd <integralFBx>
    170a:	10 92 fe 20 	sts	0x20FE, r1	; 0x8020fe <integralFBx+0x1>
    170e:	10 92 ff 20 	sts	0x20FF, r1	; 0x8020ff <integralFBx+0x2>
    1712:	10 92 00 21 	sts	0x2100, r1	; 0x802100 <integralFBx+0x3>
			integralFBy = 0.0;
    1716:	10 92 f9 20 	sts	0x20F9, r1	; 0x8020f9 <integralFBy>
    171a:	10 92 fa 20 	sts	0x20FA, r1	; 0x8020fa <integralFBy+0x1>
    171e:	10 92 fb 20 	sts	0x20FB, r1	; 0x8020fb <integralFBy+0x2>
    1722:	10 92 fc 20 	sts	0x20FC, r1	; 0x8020fc <integralFBy+0x3>
			integralFBz = 0.0;
    1726:	10 92 f5 20 	sts	0x20F5, r1	; 0x8020f5 <integralFBz>
    172a:	10 92 f6 20 	sts	0x20F6, r1	; 0x8020f6 <integralFBz+0x1>
    172e:	10 92 f7 20 	sts	0x20F7, r1	; 0x8020f7 <integralFBz+0x2>
    1732:	10 92 f8 20 	sts	0x20F8, r1	; 0x8020f8 <integralFBz+0x3>
		}

		// Apply proportional feedback
		gx += twoKp * halfex;
    1736:	20 91 18 20 	lds	r18, 0x2018	; 0x802018 <twoKp>
    173a:	30 91 19 20 	lds	r19, 0x2019	; 0x802019 <twoKp+0x1>
    173e:	40 91 1a 20 	lds	r20, 0x201A	; 0x80201a <twoKp+0x2>
    1742:	50 91 1b 20 	lds	r21, 0x201B	; 0x80201b <twoKp+0x3>
    1746:	69 a1       	ldd	r22, Y+33	; 0x21
    1748:	7a a1       	ldd	r23, Y+34	; 0x22
    174a:	8b a1       	ldd	r24, Y+35	; 0x23
    174c:	9c a1       	ldd	r25, Y+36	; 0x24
    174e:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    1752:	9b 01       	movw	r18, r22
    1754:	ac 01       	movw	r20, r24
    1756:	69 85       	ldd	r22, Y+9	; 0x09
    1758:	7a 85       	ldd	r23, Y+10	; 0x0a
    175a:	8b 85       	ldd	r24, Y+11	; 0x0b
    175c:	9c 85       	ldd	r25, Y+12	; 0x0c
    175e:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <__addsf3>
    1762:	69 87       	std	Y+9, r22	; 0x09
    1764:	7a 87       	std	Y+10, r23	; 0x0a
    1766:	8b 87       	std	Y+11, r24	; 0x0b
    1768:	9c 87       	std	Y+12, r25	; 0x0c
		gy += twoKp * halfey;
    176a:	20 91 18 20 	lds	r18, 0x2018	; 0x802018 <twoKp>
    176e:	30 91 19 20 	lds	r19, 0x2019	; 0x802019 <twoKp+0x1>
    1772:	40 91 1a 20 	lds	r20, 0x201A	; 0x80201a <twoKp+0x2>
    1776:	50 91 1b 20 	lds	r21, 0x201B	; 0x80201b <twoKp+0x3>
    177a:	c5 01       	movw	r24, r10
    177c:	b4 01       	movw	r22, r8
    177e:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    1782:	9b 01       	movw	r18, r22
    1784:	ac 01       	movw	r20, r24
    1786:	6d 85       	ldd	r22, Y+13	; 0x0d
    1788:	7e 85       	ldd	r23, Y+14	; 0x0e
    178a:	8f 85       	ldd	r24, Y+15	; 0x0f
    178c:	98 89       	ldd	r25, Y+16	; 0x10
    178e:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <__addsf3>
    1792:	6d 87       	std	Y+13, r22	; 0x0d
    1794:	7e 87       	std	Y+14, r23	; 0x0e
    1796:	8f 87       	std	Y+15, r24	; 0x0f
    1798:	98 8b       	std	Y+16, r25	; 0x10
		gz += twoKp * halfez;
    179a:	20 91 18 20 	lds	r18, 0x2018	; 0x802018 <twoKp>
    179e:	30 91 19 20 	lds	r19, 0x2019	; 0x802019 <twoKp+0x1>
    17a2:	40 91 1a 20 	lds	r20, 0x201A	; 0x80201a <twoKp+0x2>
    17a6:	50 91 1b 20 	lds	r21, 0x201B	; 0x80201b <twoKp+0x3>
    17aa:	c7 01       	movw	r24, r14
    17ac:	b6 01       	movw	r22, r12
    17ae:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    17b2:	9b 01       	movw	r18, r22
    17b4:	ac 01       	movw	r20, r24
    17b6:	69 89       	ldd	r22, Y+17	; 0x11
    17b8:	7a 89       	ldd	r23, Y+18	; 0x12
    17ba:	8b 89       	ldd	r24, Y+19	; 0x13
    17bc:	9c 89       	ldd	r25, Y+20	; 0x14
    17be:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <__addsf3>
    17c2:	69 8b       	std	Y+17, r22	; 0x11
    17c4:	7a 8b       	std	Y+18, r23	; 0x12
    17c6:	8b 8b       	std	Y+19, r24	; 0x13
    17c8:	9c 8b       	std	Y+20, r25	; 0x14
	}
	
	// Integrate rate of change of quaternion
	gx *= (0.5 * (1.0 / sampleFreq));		// pre-multiply common factors
    17ca:	2a ef       	ldi	r18, 0xFA	; 250
    17cc:	39 ec       	ldi	r19, 0xC9	; 201
    17ce:	44 eb       	ldi	r20, 0xB4	; 180
    17d0:	58 e3       	ldi	r21, 0x38	; 56
    17d2:	69 85       	ldd	r22, Y+9	; 0x09
    17d4:	7a 85       	ldd	r23, Y+10	; 0x0a
    17d6:	8b 85       	ldd	r24, Y+11	; 0x0b
    17d8:	9c 85       	ldd	r25, Y+12	; 0x0c
    17da:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    17de:	69 87       	std	Y+9, r22	; 0x09
    17e0:	7a 87       	std	Y+10, r23	; 0x0a
    17e2:	8b 87       	std	Y+11, r24	; 0x0b
    17e4:	9c 87       	std	Y+12, r25	; 0x0c
	gy *= (0.5 * (1.0 / sampleFreq));
    17e6:	2a ef       	ldi	r18, 0xFA	; 250
    17e8:	39 ec       	ldi	r19, 0xC9	; 201
    17ea:	44 eb       	ldi	r20, 0xB4	; 180
    17ec:	58 e3       	ldi	r21, 0x38	; 56
    17ee:	6d 85       	ldd	r22, Y+13	; 0x0d
    17f0:	7e 85       	ldd	r23, Y+14	; 0x0e
    17f2:	8f 85       	ldd	r24, Y+15	; 0x0f
    17f4:	98 89       	ldd	r25, Y+16	; 0x10
    17f6:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    17fa:	6d 87       	std	Y+13, r22	; 0x0d
    17fc:	7e 87       	std	Y+14, r23	; 0x0e
    17fe:	8f 87       	std	Y+15, r24	; 0x0f
    1800:	98 8b       	std	Y+16, r25	; 0x10
	gz *= (0.5 * (1.0 / sampleFreq));
    1802:	2a ef       	ldi	r18, 0xFA	; 250
    1804:	39 ec       	ldi	r19, 0xC9	; 201
    1806:	44 eb       	ldi	r20, 0xB4	; 180
    1808:	58 e3       	ldi	r21, 0x38	; 56
    180a:	69 89       	ldd	r22, Y+17	; 0x11
    180c:	7a 89       	ldd	r23, Y+18	; 0x12
    180e:	8b 89       	ldd	r24, Y+19	; 0x13
    1810:	9c 89       	ldd	r25, Y+20	; 0x14
    1812:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    1816:	69 8b       	std	Y+17, r22	; 0x11
    1818:	7a 8b       	std	Y+18, r23	; 0x12
    181a:	8b 8b       	std	Y+19, r24	; 0x13
    181c:	9c 8b       	std	Y+20, r25	; 0x14
	qa = q0;
    181e:	e0 90 14 20 	lds	r14, 0x2014	; 0x802014 <q0>
    1822:	f0 90 15 20 	lds	r15, 0x2015	; 0x802015 <q0+0x1>
    1826:	00 91 16 20 	lds	r16, 0x2016	; 0x802016 <q0+0x2>
    182a:	10 91 17 20 	lds	r17, 0x2017	; 0x802017 <q0+0x3>
    182e:	ed 82       	std	Y+5, r14	; 0x05
    1830:	fe 82       	std	Y+6, r15	; 0x06
    1832:	0f 83       	std	Y+7, r16	; 0x07
    1834:	18 87       	std	Y+8, r17	; 0x08
	qb = q1;
    1836:	80 90 09 21 	lds	r8, 0x2109	; 0x802109 <q1>
    183a:	90 90 0a 21 	lds	r9, 0x210A	; 0x80210a <q1+0x1>
    183e:	a0 90 0b 21 	lds	r10, 0x210B	; 0x80210b <q1+0x2>
    1842:	b0 90 0c 21 	lds	r11, 0x210C	; 0x80210c <q1+0x3>
	qc = q2;
    1846:	e0 90 05 21 	lds	r14, 0x2105	; 0x802105 <q2>
    184a:	f0 90 06 21 	lds	r15, 0x2106	; 0x802106 <q2+0x1>
    184e:	00 91 07 21 	lds	r16, 0x2107	; 0x802107 <q2+0x2>
    1852:	10 91 08 21 	lds	r17, 0x2108	; 0x802108 <q2+0x3>
    1856:	ed 8a       	std	Y+21, r14	; 0x15
    1858:	fe 8a       	std	Y+22, r15	; 0x16
    185a:	0f 8b       	std	Y+23, r16	; 0x17
    185c:	18 8f       	std	Y+24, r17	; 0x18
	q0 += (-qb * gx - qc * gy - q3 * gz);
    185e:	40 90 01 21 	lds	r4, 0x2101	; 0x802101 <q3>
    1862:	50 90 02 21 	lds	r5, 0x2102	; 0x802102 <q3+0x1>
    1866:	60 90 03 21 	lds	r6, 0x2103	; 0x802103 <q3+0x2>
    186a:	70 90 04 21 	lds	r7, 0x2104	; 0x802104 <q3+0x3>
    186e:	c0 90 14 20 	lds	r12, 0x2014	; 0x802014 <q0>
    1872:	d0 90 15 20 	lds	r13, 0x2015	; 0x802015 <q0+0x1>
    1876:	e0 90 16 20 	lds	r14, 0x2016	; 0x802016 <q0+0x2>
    187a:	f0 90 17 20 	lds	r15, 0x2017	; 0x802017 <q0+0x3>
    187e:	c5 01       	movw	r24, r10
    1880:	b4 01       	movw	r22, r8
    1882:	90 58       	subi	r25, 0x80	; 128
    1884:	29 85       	ldd	r18, Y+9	; 0x09
    1886:	3a 85       	ldd	r19, Y+10	; 0x0a
    1888:	4b 85       	ldd	r20, Y+11	; 0x0b
    188a:	5c 85       	ldd	r21, Y+12	; 0x0c
    188c:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    1890:	69 83       	std	Y+1, r22	; 0x01
    1892:	7a 83       	std	Y+2, r23	; 0x02
    1894:	8b 83       	std	Y+3, r24	; 0x03
    1896:	9c 83       	std	Y+4, r25	; 0x04
    1898:	2d 89       	ldd	r18, Y+21	; 0x15
    189a:	3e 89       	ldd	r19, Y+22	; 0x16
    189c:	4f 89       	ldd	r20, Y+23	; 0x17
    189e:	58 8d       	ldd	r21, Y+24	; 0x18
    18a0:	6d 85       	ldd	r22, Y+13	; 0x0d
    18a2:	7e 85       	ldd	r23, Y+14	; 0x0e
    18a4:	8f 85       	ldd	r24, Y+15	; 0x0f
    18a6:	98 89       	ldd	r25, Y+16	; 0x10
    18a8:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    18ac:	9b 01       	movw	r18, r22
    18ae:	ac 01       	movw	r20, r24
    18b0:	69 81       	ldd	r22, Y+1	; 0x01
    18b2:	7a 81       	ldd	r23, Y+2	; 0x02
    18b4:	8b 81       	ldd	r24, Y+3	; 0x03
    18b6:	9c 81       	ldd	r25, Y+4	; 0x04
    18b8:	0e 94 60 1f 	call	0x3ec0	; 0x3ec0 <__subsf3>
    18bc:	69 83       	std	Y+1, r22	; 0x01
    18be:	7a 83       	std	Y+2, r23	; 0x02
    18c0:	8b 83       	std	Y+3, r24	; 0x03
    18c2:	9c 83       	std	Y+4, r25	; 0x04
    18c4:	a3 01       	movw	r20, r6
    18c6:	92 01       	movw	r18, r4
    18c8:	69 89       	ldd	r22, Y+17	; 0x11
    18ca:	7a 89       	ldd	r23, Y+18	; 0x12
    18cc:	8b 89       	ldd	r24, Y+19	; 0x13
    18ce:	9c 89       	ldd	r25, Y+20	; 0x14
    18d0:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    18d4:	9b 01       	movw	r18, r22
    18d6:	ac 01       	movw	r20, r24
    18d8:	69 81       	ldd	r22, Y+1	; 0x01
    18da:	7a 81       	ldd	r23, Y+2	; 0x02
    18dc:	8b 81       	ldd	r24, Y+3	; 0x03
    18de:	9c 81       	ldd	r25, Y+4	; 0x04
    18e0:	0e 94 60 1f 	call	0x3ec0	; 0x3ec0 <__subsf3>
    18e4:	a7 01       	movw	r20, r14
    18e6:	96 01       	movw	r18, r12
    18e8:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <__addsf3>
    18ec:	60 93 14 20 	sts	0x2014, r22	; 0x802014 <q0>
    18f0:	70 93 15 20 	sts	0x2015, r23	; 0x802015 <q0+0x1>
    18f4:	80 93 16 20 	sts	0x2016, r24	; 0x802016 <q0+0x2>
    18f8:	90 93 17 20 	sts	0x2017, r25	; 0x802017 <q0+0x3>
	q1 += (qa * gx + qc * gz - q3 * gy);
    18fc:	40 90 01 21 	lds	r4, 0x2101	; 0x802101 <q3>
    1900:	50 90 02 21 	lds	r5, 0x2102	; 0x802102 <q3+0x1>
    1904:	60 90 03 21 	lds	r6, 0x2103	; 0x802103 <q3+0x2>
    1908:	70 90 04 21 	lds	r7, 0x2104	; 0x802104 <q3+0x3>
    190c:	c0 90 09 21 	lds	r12, 0x2109	; 0x802109 <q1>
    1910:	d0 90 0a 21 	lds	r13, 0x210A	; 0x80210a <q1+0x1>
    1914:	e0 90 0b 21 	lds	r14, 0x210B	; 0x80210b <q1+0x2>
    1918:	f0 90 0c 21 	lds	r15, 0x210C	; 0x80210c <q1+0x3>
    191c:	2d 81       	ldd	r18, Y+5	; 0x05
    191e:	3e 81       	ldd	r19, Y+6	; 0x06
    1920:	4f 81       	ldd	r20, Y+7	; 0x07
    1922:	58 85       	ldd	r21, Y+8	; 0x08
    1924:	69 85       	ldd	r22, Y+9	; 0x09
    1926:	7a 85       	ldd	r23, Y+10	; 0x0a
    1928:	8b 85       	ldd	r24, Y+11	; 0x0b
    192a:	9c 85       	ldd	r25, Y+12	; 0x0c
    192c:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    1930:	69 83       	std	Y+1, r22	; 0x01
    1932:	7a 83       	std	Y+2, r23	; 0x02
    1934:	8b 83       	std	Y+3, r24	; 0x03
    1936:	9c 83       	std	Y+4, r25	; 0x04
    1938:	2d 89       	ldd	r18, Y+21	; 0x15
    193a:	3e 89       	ldd	r19, Y+22	; 0x16
    193c:	4f 89       	ldd	r20, Y+23	; 0x17
    193e:	58 8d       	ldd	r21, Y+24	; 0x18
    1940:	69 89       	ldd	r22, Y+17	; 0x11
    1942:	7a 89       	ldd	r23, Y+18	; 0x12
    1944:	8b 89       	ldd	r24, Y+19	; 0x13
    1946:	9c 89       	ldd	r25, Y+20	; 0x14
    1948:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    194c:	9b 01       	movw	r18, r22
    194e:	ac 01       	movw	r20, r24
    1950:	69 81       	ldd	r22, Y+1	; 0x01
    1952:	7a 81       	ldd	r23, Y+2	; 0x02
    1954:	8b 81       	ldd	r24, Y+3	; 0x03
    1956:	9c 81       	ldd	r25, Y+4	; 0x04
    1958:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <__addsf3>
    195c:	69 83       	std	Y+1, r22	; 0x01
    195e:	7a 83       	std	Y+2, r23	; 0x02
    1960:	8b 83       	std	Y+3, r24	; 0x03
    1962:	9c 83       	std	Y+4, r25	; 0x04
    1964:	a3 01       	movw	r20, r6
    1966:	92 01       	movw	r18, r4
    1968:	6d 85       	ldd	r22, Y+13	; 0x0d
    196a:	7e 85       	ldd	r23, Y+14	; 0x0e
    196c:	8f 85       	ldd	r24, Y+15	; 0x0f
    196e:	98 89       	ldd	r25, Y+16	; 0x10
    1970:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    1974:	9b 01       	movw	r18, r22
    1976:	ac 01       	movw	r20, r24
    1978:	69 81       	ldd	r22, Y+1	; 0x01
    197a:	7a 81       	ldd	r23, Y+2	; 0x02
    197c:	8b 81       	ldd	r24, Y+3	; 0x03
    197e:	9c 81       	ldd	r25, Y+4	; 0x04
    1980:	0e 94 60 1f 	call	0x3ec0	; 0x3ec0 <__subsf3>
    1984:	a7 01       	movw	r20, r14
    1986:	96 01       	movw	r18, r12
    1988:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <__addsf3>
    198c:	60 93 09 21 	sts	0x2109, r22	; 0x802109 <q1>
    1990:	70 93 0a 21 	sts	0x210A, r23	; 0x80210a <q1+0x1>
    1994:	80 93 0b 21 	sts	0x210B, r24	; 0x80210b <q1+0x2>
    1998:	90 93 0c 21 	sts	0x210C, r25	; 0x80210c <q1+0x3>
	q2 += (qa * gy - qb * gz + q3 * gx);
    199c:	40 90 01 21 	lds	r4, 0x2101	; 0x802101 <q3>
    19a0:	50 90 02 21 	lds	r5, 0x2102	; 0x802102 <q3+0x1>
    19a4:	60 90 03 21 	lds	r6, 0x2103	; 0x802103 <q3+0x2>
    19a8:	70 90 04 21 	lds	r7, 0x2104	; 0x802104 <q3+0x3>
    19ac:	c0 90 05 21 	lds	r12, 0x2105	; 0x802105 <q2>
    19b0:	d0 90 06 21 	lds	r13, 0x2106	; 0x802106 <q2+0x1>
    19b4:	e0 90 07 21 	lds	r14, 0x2107	; 0x802107 <q2+0x2>
    19b8:	f0 90 08 21 	lds	r15, 0x2108	; 0x802108 <q2+0x3>
    19bc:	2d 81       	ldd	r18, Y+5	; 0x05
    19be:	3e 81       	ldd	r19, Y+6	; 0x06
    19c0:	4f 81       	ldd	r20, Y+7	; 0x07
    19c2:	58 85       	ldd	r21, Y+8	; 0x08
    19c4:	6d 85       	ldd	r22, Y+13	; 0x0d
    19c6:	7e 85       	ldd	r23, Y+14	; 0x0e
    19c8:	8f 85       	ldd	r24, Y+15	; 0x0f
    19ca:	98 89       	ldd	r25, Y+16	; 0x10
    19cc:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    19d0:	69 83       	std	Y+1, r22	; 0x01
    19d2:	7a 83       	std	Y+2, r23	; 0x02
    19d4:	8b 83       	std	Y+3, r24	; 0x03
    19d6:	9c 83       	std	Y+4, r25	; 0x04
    19d8:	a5 01       	movw	r20, r10
    19da:	94 01       	movw	r18, r8
    19dc:	69 89       	ldd	r22, Y+17	; 0x11
    19de:	7a 89       	ldd	r23, Y+18	; 0x12
    19e0:	8b 89       	ldd	r24, Y+19	; 0x13
    19e2:	9c 89       	ldd	r25, Y+20	; 0x14
    19e4:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    19e8:	9b 01       	movw	r18, r22
    19ea:	ac 01       	movw	r20, r24
    19ec:	69 81       	ldd	r22, Y+1	; 0x01
    19ee:	7a 81       	ldd	r23, Y+2	; 0x02
    19f0:	8b 81       	ldd	r24, Y+3	; 0x03
    19f2:	9c 81       	ldd	r25, Y+4	; 0x04
    19f4:	0e 94 60 1f 	call	0x3ec0	; 0x3ec0 <__subsf3>
    19f8:	69 83       	std	Y+1, r22	; 0x01
    19fa:	7a 83       	std	Y+2, r23	; 0x02
    19fc:	8b 83       	std	Y+3, r24	; 0x03
    19fe:	9c 83       	std	Y+4, r25	; 0x04
    1a00:	a3 01       	movw	r20, r6
    1a02:	92 01       	movw	r18, r4
    1a04:	69 85       	ldd	r22, Y+9	; 0x09
    1a06:	7a 85       	ldd	r23, Y+10	; 0x0a
    1a08:	8b 85       	ldd	r24, Y+11	; 0x0b
    1a0a:	9c 85       	ldd	r25, Y+12	; 0x0c
    1a0c:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    1a10:	9b 01       	movw	r18, r22
    1a12:	ac 01       	movw	r20, r24
    1a14:	69 81       	ldd	r22, Y+1	; 0x01
    1a16:	7a 81       	ldd	r23, Y+2	; 0x02
    1a18:	8b 81       	ldd	r24, Y+3	; 0x03
    1a1a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a1c:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <__addsf3>
    1a20:	a7 01       	movw	r20, r14
    1a22:	96 01       	movw	r18, r12
    1a24:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <__addsf3>
    1a28:	60 93 05 21 	sts	0x2105, r22	; 0x802105 <q2>
    1a2c:	70 93 06 21 	sts	0x2106, r23	; 0x802106 <q2+0x1>
    1a30:	80 93 07 21 	sts	0x2107, r24	; 0x802107 <q2+0x2>
    1a34:	90 93 08 21 	sts	0x2108, r25	; 0x802108 <q2+0x3>
	q3 += (qa * gz + qb * gy - qc * gx); 
    1a38:	c0 90 01 21 	lds	r12, 0x2101	; 0x802101 <q3>
    1a3c:	d0 90 02 21 	lds	r13, 0x2102	; 0x802102 <q3+0x1>
    1a40:	e0 90 03 21 	lds	r14, 0x2103	; 0x802103 <q3+0x2>
    1a44:	f0 90 04 21 	lds	r15, 0x2104	; 0x802104 <q3+0x3>
    1a48:	2d 81       	ldd	r18, Y+5	; 0x05
    1a4a:	3e 81       	ldd	r19, Y+6	; 0x06
    1a4c:	4f 81       	ldd	r20, Y+7	; 0x07
    1a4e:	58 85       	ldd	r21, Y+8	; 0x08
    1a50:	69 89       	ldd	r22, Y+17	; 0x11
    1a52:	7a 89       	ldd	r23, Y+18	; 0x12
    1a54:	8b 89       	ldd	r24, Y+19	; 0x13
    1a56:	9c 89       	ldd	r25, Y+20	; 0x14
    1a58:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    1a5c:	2b 01       	movw	r4, r22
    1a5e:	3c 01       	movw	r6, r24
    1a60:	a5 01       	movw	r20, r10
    1a62:	94 01       	movw	r18, r8
    1a64:	6d 85       	ldd	r22, Y+13	; 0x0d
    1a66:	7e 85       	ldd	r23, Y+14	; 0x0e
    1a68:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a6a:	98 89       	ldd	r25, Y+16	; 0x10
    1a6c:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    1a70:	9b 01       	movw	r18, r22
    1a72:	ac 01       	movw	r20, r24
    1a74:	c3 01       	movw	r24, r6
    1a76:	b2 01       	movw	r22, r4
    1a78:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <__addsf3>
    1a7c:	4b 01       	movw	r8, r22
    1a7e:	5c 01       	movw	r10, r24
    1a80:	2d 89       	ldd	r18, Y+21	; 0x15
    1a82:	3e 89       	ldd	r19, Y+22	; 0x16
    1a84:	4f 89       	ldd	r20, Y+23	; 0x17
    1a86:	58 8d       	ldd	r21, Y+24	; 0x18
    1a88:	69 85       	ldd	r22, Y+9	; 0x09
    1a8a:	7a 85       	ldd	r23, Y+10	; 0x0a
    1a8c:	8b 85       	ldd	r24, Y+11	; 0x0b
    1a8e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1a90:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    1a94:	9b 01       	movw	r18, r22
    1a96:	ac 01       	movw	r20, r24
    1a98:	c5 01       	movw	r24, r10
    1a9a:	b4 01       	movw	r22, r8
    1a9c:	0e 94 60 1f 	call	0x3ec0	; 0x3ec0 <__subsf3>
    1aa0:	a7 01       	movw	r20, r14
    1aa2:	96 01       	movw	r18, r12
    1aa4:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <__addsf3>
    1aa8:	60 93 01 21 	sts	0x2101, r22	; 0x802101 <q3>
    1aac:	70 93 02 21 	sts	0x2102, r23	; 0x802102 <q3+0x1>
    1ab0:	80 93 03 21 	sts	0x2103, r24	; 0x802103 <q3+0x2>
    1ab4:	90 93 04 21 	sts	0x2104, r25	; 0x802104 <q3+0x3>
	
	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
    1ab8:	60 91 14 20 	lds	r22, 0x2014	; 0x802014 <q0>
    1abc:	70 91 15 20 	lds	r23, 0x2015	; 0x802015 <q0+0x1>
    1ac0:	80 91 16 20 	lds	r24, 0x2016	; 0x802016 <q0+0x2>
    1ac4:	90 91 17 20 	lds	r25, 0x2017	; 0x802017 <q0+0x3>
    1ac8:	20 91 14 20 	lds	r18, 0x2014	; 0x802014 <q0>
    1acc:	30 91 15 20 	lds	r19, 0x2015	; 0x802015 <q0+0x1>
    1ad0:	40 91 16 20 	lds	r20, 0x2016	; 0x802016 <q0+0x2>
    1ad4:	50 91 17 20 	lds	r21, 0x2017	; 0x802017 <q0+0x3>
    1ad8:	80 90 09 21 	lds	r8, 0x2109	; 0x802109 <q1>
    1adc:	90 90 0a 21 	lds	r9, 0x210A	; 0x80210a <q1+0x1>
    1ae0:	a0 90 0b 21 	lds	r10, 0x210B	; 0x80210b <q1+0x2>
    1ae4:	b0 90 0c 21 	lds	r11, 0x210C	; 0x80210c <q1+0x3>
    1ae8:	40 90 09 21 	lds	r4, 0x2109	; 0x802109 <q1>
    1aec:	50 90 0a 21 	lds	r5, 0x210A	; 0x80210a <q1+0x1>
    1af0:	60 90 0b 21 	lds	r6, 0x210B	; 0x80210b <q1+0x2>
    1af4:	70 90 0c 21 	lds	r7, 0x210C	; 0x80210c <q1+0x3>
    1af8:	e0 90 05 21 	lds	r14, 0x2105	; 0x802105 <q2>
    1afc:	f0 90 06 21 	lds	r15, 0x2106	; 0x802106 <q2+0x1>
    1b00:	00 91 07 21 	lds	r16, 0x2107	; 0x802107 <q2+0x2>
    1b04:	10 91 08 21 	lds	r17, 0x2108	; 0x802108 <q2+0x3>
    1b08:	e9 86       	std	Y+9, r14	; 0x09
    1b0a:	fa 86       	std	Y+10, r15	; 0x0a
    1b0c:	0b 87       	std	Y+11, r16	; 0x0b
    1b0e:	1c 87       	std	Y+12, r17	; 0x0c
    1b10:	e0 90 05 21 	lds	r14, 0x2105	; 0x802105 <q2>
    1b14:	f0 90 06 21 	lds	r15, 0x2106	; 0x802106 <q2+0x1>
    1b18:	00 91 07 21 	lds	r16, 0x2107	; 0x802107 <q2+0x2>
    1b1c:	10 91 08 21 	lds	r17, 0x2108	; 0x802108 <q2+0x3>
    1b20:	ed 86       	std	Y+13, r14	; 0x0d
    1b22:	fe 86       	std	Y+14, r15	; 0x0e
    1b24:	0f 87       	std	Y+15, r16	; 0x0f
    1b26:	18 8b       	std	Y+16, r17	; 0x10
    1b28:	e0 90 01 21 	lds	r14, 0x2101	; 0x802101 <q3>
    1b2c:	f0 90 02 21 	lds	r15, 0x2102	; 0x802102 <q3+0x1>
    1b30:	00 91 03 21 	lds	r16, 0x2103	; 0x802103 <q3+0x2>
    1b34:	10 91 04 21 	lds	r17, 0x2104	; 0x802104 <q3+0x3>
    1b38:	e9 82       	std	Y+1, r14	; 0x01
    1b3a:	fa 82       	std	Y+2, r15	; 0x02
    1b3c:	0b 83       	std	Y+3, r16	; 0x03
    1b3e:	1c 83       	std	Y+4, r17	; 0x04
    1b40:	e0 90 01 21 	lds	r14, 0x2101	; 0x802101 <q3>
    1b44:	f0 90 02 21 	lds	r15, 0x2102	; 0x802102 <q3+0x1>
    1b48:	00 91 03 21 	lds	r16, 0x2103	; 0x802103 <q3+0x2>
    1b4c:	10 91 04 21 	lds	r17, 0x2104	; 0x802104 <q3+0x3>
    1b50:	e9 8a       	std	Y+17, r14	; 0x11
    1b52:	fa 8a       	std	Y+18, r15	; 0x12
    1b54:	0b 8b       	std	Y+19, r16	; 0x13
    1b56:	1c 8b       	std	Y+20, r17	; 0x14
    1b58:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    1b5c:	6b 01       	movw	r12, r22
    1b5e:	7c 01       	movw	r14, r24
    1b60:	a3 01       	movw	r20, r6
    1b62:	92 01       	movw	r18, r4
    1b64:	c5 01       	movw	r24, r10
    1b66:	b4 01       	movw	r22, r8
    1b68:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    1b6c:	9b 01       	movw	r18, r22
    1b6e:	ac 01       	movw	r20, r24
    1b70:	c7 01       	movw	r24, r14
    1b72:	b6 01       	movw	r22, r12
    1b74:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <__addsf3>
    1b78:	4b 01       	movw	r8, r22
    1b7a:	5c 01       	movw	r10, r24
    1b7c:	2d 85       	ldd	r18, Y+13	; 0x0d
    1b7e:	3e 85       	ldd	r19, Y+14	; 0x0e
    1b80:	4f 85       	ldd	r20, Y+15	; 0x0f
    1b82:	58 89       	ldd	r21, Y+16	; 0x10
    1b84:	69 85       	ldd	r22, Y+9	; 0x09
    1b86:	7a 85       	ldd	r23, Y+10	; 0x0a
    1b88:	8b 85       	ldd	r24, Y+11	; 0x0b
    1b8a:	9c 85       	ldd	r25, Y+12	; 0x0c
    1b8c:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    1b90:	9b 01       	movw	r18, r22
    1b92:	ac 01       	movw	r20, r24
    1b94:	c5 01       	movw	r24, r10
    1b96:	b4 01       	movw	r22, r8
    1b98:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <__addsf3>
    1b9c:	4b 01       	movw	r8, r22
    1b9e:	5c 01       	movw	r10, r24
    1ba0:	29 89       	ldd	r18, Y+17	; 0x11
    1ba2:	3a 89       	ldd	r19, Y+18	; 0x12
    1ba4:	4b 89       	ldd	r20, Y+19	; 0x13
    1ba6:	5c 89       	ldd	r21, Y+20	; 0x14
    1ba8:	69 81       	ldd	r22, Y+1	; 0x01
    1baa:	7a 81       	ldd	r23, Y+2	; 0x02
    1bac:	8b 81       	ldd	r24, Y+3	; 0x03
    1bae:	9c 81       	ldd	r25, Y+4	; 0x04
    1bb0:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    1bb4:	9b 01       	movw	r18, r22
    1bb6:	ac 01       	movw	r20, r24
    1bb8:	c5 01       	movw	r24, r10
    1bba:	b4 01       	movw	r22, r8
    1bbc:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <__addsf3>
    1bc0:	28 db       	rcall	.-2480   	; 0x1212 <invSqrt>
    1bc2:	6b 01       	movw	r12, r22
    1bc4:	7c 01       	movw	r14, r24
	q0 *= recipNorm;
    1bc6:	20 91 14 20 	lds	r18, 0x2014	; 0x802014 <q0>
    1bca:	30 91 15 20 	lds	r19, 0x2015	; 0x802015 <q0+0x1>
    1bce:	40 91 16 20 	lds	r20, 0x2016	; 0x802016 <q0+0x2>
    1bd2:	50 91 17 20 	lds	r21, 0x2017	; 0x802017 <q0+0x3>
    1bd6:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    1bda:	60 93 14 20 	sts	0x2014, r22	; 0x802014 <q0>
    1bde:	70 93 15 20 	sts	0x2015, r23	; 0x802015 <q0+0x1>
    1be2:	80 93 16 20 	sts	0x2016, r24	; 0x802016 <q0+0x2>
    1be6:	90 93 17 20 	sts	0x2017, r25	; 0x802017 <q0+0x3>
	q1 *= recipNorm;
    1bea:	20 91 09 21 	lds	r18, 0x2109	; 0x802109 <q1>
    1bee:	30 91 0a 21 	lds	r19, 0x210A	; 0x80210a <q1+0x1>
    1bf2:	40 91 0b 21 	lds	r20, 0x210B	; 0x80210b <q1+0x2>
    1bf6:	50 91 0c 21 	lds	r21, 0x210C	; 0x80210c <q1+0x3>
    1bfa:	c7 01       	movw	r24, r14
    1bfc:	b6 01       	movw	r22, r12
    1bfe:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    1c02:	60 93 09 21 	sts	0x2109, r22	; 0x802109 <q1>
    1c06:	70 93 0a 21 	sts	0x210A, r23	; 0x80210a <q1+0x1>
    1c0a:	80 93 0b 21 	sts	0x210B, r24	; 0x80210b <q1+0x2>
    1c0e:	90 93 0c 21 	sts	0x210C, r25	; 0x80210c <q1+0x3>
	q2 *= recipNorm;
    1c12:	20 91 05 21 	lds	r18, 0x2105	; 0x802105 <q2>
    1c16:	30 91 06 21 	lds	r19, 0x2106	; 0x802106 <q2+0x1>
    1c1a:	40 91 07 21 	lds	r20, 0x2107	; 0x802107 <q2+0x2>
    1c1e:	50 91 08 21 	lds	r21, 0x2108	; 0x802108 <q2+0x3>
    1c22:	c7 01       	movw	r24, r14
    1c24:	b6 01       	movw	r22, r12
    1c26:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    1c2a:	60 93 05 21 	sts	0x2105, r22	; 0x802105 <q2>
    1c2e:	70 93 06 21 	sts	0x2106, r23	; 0x802106 <q2+0x1>
    1c32:	80 93 07 21 	sts	0x2107, r24	; 0x802107 <q2+0x2>
    1c36:	90 93 08 21 	sts	0x2108, r25	; 0x802108 <q2+0x3>
	q3 *= recipNorm;
    1c3a:	20 91 01 21 	lds	r18, 0x2101	; 0x802101 <q3>
    1c3e:	30 91 02 21 	lds	r19, 0x2102	; 0x802102 <q3+0x1>
    1c42:	40 91 03 21 	lds	r20, 0x2103	; 0x802103 <q3+0x2>
    1c46:	50 91 04 21 	lds	r21, 0x2104	; 0x802104 <q3+0x3>
    1c4a:	c7 01       	movw	r24, r14
    1c4c:	b6 01       	movw	r22, r12
    1c4e:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    1c52:	60 93 01 21 	sts	0x2101, r22	; 0x802101 <q3>
    1c56:	70 93 02 21 	sts	0x2102, r23	; 0x802102 <q3+0x1>
    1c5a:	80 93 03 21 	sts	0x2103, r24	; 0x802103 <q3+0x2>
    1c5e:	90 93 04 21 	sts	0x2104, r25	; 0x802104 <q3+0x3>
}
    1c62:	a4 96       	adiw	r28, 0x24	; 36
    1c64:	cd bf       	out	0x3d, r28	; 61
    1c66:	de bf       	out	0x3e, r29	; 62
    1c68:	df 91       	pop	r29
    1c6a:	cf 91       	pop	r28
    1c6c:	1f 91       	pop	r17
    1c6e:	0f 91       	pop	r16
    1c70:	ff 90       	pop	r15
    1c72:	ef 90       	pop	r14
    1c74:	df 90       	pop	r13
    1c76:	cf 90       	pop	r12
    1c78:	bf 90       	pop	r11
    1c7a:	af 90       	pop	r10
    1c7c:	9f 90       	pop	r9
    1c7e:	8f 90       	pop	r8
    1c80:	7f 90       	pop	r7
    1c82:	6f 90       	pop	r6
    1c84:	5f 90       	pop	r5
    1c86:	4f 90       	pop	r4
    1c88:	08 95       	ret

00001c8a <MahonyAHRSupdate>:
// Functions

//---------------------------------------------------------------------------------------------------
// AHRS algorithm update

void MahonyAHRSupdate(double gx, double gy, double gz, double ax, double ay, double az, double mx, double my, double mz) {
    1c8a:	2f 92       	push	r2
    1c8c:	3f 92       	push	r3
    1c8e:	4f 92       	push	r4
    1c90:	5f 92       	push	r5
    1c92:	6f 92       	push	r6
    1c94:	7f 92       	push	r7
    1c96:	8f 92       	push	r8
    1c98:	9f 92       	push	r9
    1c9a:	af 92       	push	r10
    1c9c:	bf 92       	push	r11
    1c9e:	cf 92       	push	r12
    1ca0:	df 92       	push	r13
    1ca2:	ef 92       	push	r14
    1ca4:	ff 92       	push	r15
    1ca6:	0f 93       	push	r16
    1ca8:	1f 93       	push	r17
    1caa:	cf 93       	push	r28
    1cac:	df 93       	push	r29
    1cae:	cd b7       	in	r28, 0x3d	; 61
    1cb0:	de b7       	in	r29, 0x3e	; 62
    1cb2:	c8 55       	subi	r28, 0x58	; 88
    1cb4:	d1 09       	sbc	r29, r1
    1cb6:	cd bf       	out	0x3d, r28	; 61
    1cb8:	de bf       	out	0x3e, r29	; 62
    1cba:	69 8b       	std	Y+17, r22	; 0x11
    1cbc:	7a 8b       	std	Y+18, r23	; 0x12
    1cbe:	8b 8b       	std	Y+19, r24	; 0x13
    1cc0:	9c 8b       	std	Y+20, r25	; 0x14
    1cc2:	29 8f       	std	Y+25, r18	; 0x19
    1cc4:	3a 8f       	std	Y+26, r19	; 0x1a
    1cc6:	4b 8f       	std	Y+27, r20	; 0x1b
    1cc8:	5c 8f       	std	Y+28, r21	; 0x1c
    1cca:	e9 82       	std	Y+1, r14	; 0x01
    1ccc:	fa 82       	std	Y+2, r15	; 0x02
    1cce:	0b 83       	std	Y+3, r16	; 0x03
    1cd0:	1c 83       	std	Y+4, r17	; 0x04
    1cd2:	ae 96       	adiw	r28, 0x2e	; 46
    1cd4:	ff ac       	ldd	r15, Y+63	; 0x3f
    1cd6:	ae 97       	sbiw	r28, 0x2e	; 46
    1cd8:	af 96       	adiw	r28, 0x2f	; 47
    1cda:	ef ac       	ldd	r14, Y+63	; 0x3f
    1cdc:	af 97       	sbiw	r28, 0x2f	; 47
    1cde:	e0 96       	adiw	r28, 0x30	; 48
    1ce0:	9f ac       	ldd	r9, Y+63	; 0x3f
    1ce2:	e0 97       	sbiw	r28, 0x30	; 48
    1ce4:	e1 96       	adiw	r28, 0x31	; 49
    1ce6:	8f ac       	ldd	r8, Y+63	; 0x3f
    1ce8:	e1 97       	sbiw	r28, 0x31	; 49
    1cea:	e2 96       	adiw	r28, 0x32	; 50
    1cec:	1f ad       	ldd	r17, Y+63	; 0x3f
    1cee:	e2 97       	sbiw	r28, 0x32	; 50
    1cf0:	e3 96       	adiw	r28, 0x33	; 51
    1cf2:	0f ad       	ldd	r16, Y+63	; 0x3f
    1cf4:	e3 97       	sbiw	r28, 0x33	; 51
    1cf6:	e4 96       	adiw	r28, 0x34	; 52
    1cf8:	3f ac       	ldd	r3, Y+63	; 0x3f
    1cfa:	e4 97       	sbiw	r28, 0x34	; 52
    1cfc:	e5 96       	adiw	r28, 0x35	; 53
    1cfe:	2f ac       	ldd	r2, Y+63	; 0x3f
    1d00:	e5 97       	sbiw	r28, 0x35	; 53
	double halfvx, halfvy, halfvz, halfwx, halfwy, halfwz;
	double halfex, halfey, halfez;
	double qa, qb, qc;

	// Use IMU algorithm if magnetometer measurement invalid (avoids NaN in magnetometer normalisation)
	if((mx == 0.0) && (my == 0.0) && (mz == 0.0)) {
    1d02:	20 e0       	ldi	r18, 0x00	; 0
    1d04:	30 e0       	ldi	r19, 0x00	; 0
    1d06:	a9 01       	movw	r20, r18
    1d08:	e9 96       	adiw	r28, 0x39	; 57
    1d0a:	6c ad       	ldd	r22, Y+60	; 0x3c
    1d0c:	7d ad       	ldd	r23, Y+61	; 0x3d
    1d0e:	8e ad       	ldd	r24, Y+62	; 0x3e
    1d10:	9f ad       	ldd	r25, Y+63	; 0x3f
    1d12:	e9 97       	sbiw	r28, 0x39	; 57
    1d14:	0e 94 3e 20 	call	0x407c	; 0x407c <__cmpsf2>
    1d18:	81 11       	cpse	r24, r1
    1d1a:	34 c0       	rjmp	.+104    	; 0x1d84 <MahonyAHRSupdate+0xfa>
    1d1c:	20 e0       	ldi	r18, 0x00	; 0
    1d1e:	30 e0       	ldi	r19, 0x00	; 0
    1d20:	a9 01       	movw	r20, r18
    1d22:	ed 96       	adiw	r28, 0x3d	; 61
    1d24:	6c ad       	ldd	r22, Y+60	; 0x3c
    1d26:	7d ad       	ldd	r23, Y+61	; 0x3d
    1d28:	8e ad       	ldd	r24, Y+62	; 0x3e
    1d2a:	9f ad       	ldd	r25, Y+63	; 0x3f
    1d2c:	ed 97       	sbiw	r28, 0x3d	; 61
    1d2e:	0e 94 3e 20 	call	0x407c	; 0x407c <__cmpsf2>
    1d32:	81 11       	cpse	r24, r1
    1d34:	27 c0       	rjmp	.+78     	; 0x1d84 <MahonyAHRSupdate+0xfa>
    1d36:	20 e0       	ldi	r18, 0x00	; 0
    1d38:	30 e0       	ldi	r19, 0x00	; 0
    1d3a:	a9 01       	movw	r20, r18
    1d3c:	c3 58       	subi	r28, 0x83	; 131
    1d3e:	df 4f       	sbci	r29, 0xFF	; 255
    1d40:	68 81       	ld	r22, Y
    1d42:	79 81       	ldd	r23, Y+1	; 0x01
    1d44:	8a 81       	ldd	r24, Y+2	; 0x02
    1d46:	9b 81       	ldd	r25, Y+3	; 0x03
    1d48:	cd 57       	subi	r28, 0x7D	; 125
    1d4a:	d0 40       	sbci	r29, 0x00	; 0
    1d4c:	0e 94 3e 20 	call	0x407c	; 0x407c <__cmpsf2>
    1d50:	81 11       	cpse	r24, r1
    1d52:	18 c0       	rjmp	.+48     	; 0x1d84 <MahonyAHRSupdate+0xfa>
		MahonyAHRSupdateIMU(gx, gy, gz, ax, ay, az);
    1d54:	2f 92       	push	r2
    1d56:	3f 92       	push	r3
    1d58:	0f 93       	push	r16
    1d5a:	1f 93       	push	r17
    1d5c:	8f 92       	push	r8
    1d5e:	9f 92       	push	r9
    1d60:	ef 92       	push	r14
    1d62:	ff 92       	push	r15
    1d64:	e9 80       	ldd	r14, Y+1	; 0x01
    1d66:	fa 80       	ldd	r15, Y+2	; 0x02
    1d68:	0b 81       	ldd	r16, Y+3	; 0x03
    1d6a:	1c 81       	ldd	r17, Y+4	; 0x04
    1d6c:	29 8d       	ldd	r18, Y+25	; 0x19
    1d6e:	3a 8d       	ldd	r19, Y+26	; 0x1a
    1d70:	4b 8d       	ldd	r20, Y+27	; 0x1b
    1d72:	5c 8d       	ldd	r21, Y+28	; 0x1c
    1d74:	69 89       	ldd	r22, Y+17	; 0x11
    1d76:	7a 89       	ldd	r23, Y+18	; 0x12
    1d78:	8b 89       	ldd	r24, Y+19	; 0x13
    1d7a:	9c 89       	ldd	r25, Y+20	; 0x14
    1d7c:	85 da       	rcall	.-2806   	; 0x1288 <MahonyAHRSupdateIMU>
		return;
    1d7e:	cd bf       	out	0x3d, r28	; 61
    1d80:	de bf       	out	0x3e, r29	; 62
    1d82:	a4 c7       	rjmp	.+3912   	; 0x2ccc <MahonyAHRSupdate+0x1042>
	}

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0) && (ay == 0.0) && (az == 0.0))) {
    1d84:	20 e0       	ldi	r18, 0x00	; 0
    1d86:	30 e0       	ldi	r19, 0x00	; 0
    1d88:	a9 01       	movw	r20, r18
    1d8a:	c6 01       	movw	r24, r12
    1d8c:	b5 01       	movw	r22, r10
    1d8e:	0e 94 3e 20 	call	0x407c	; 0x407c <__cmpsf2>
    1d92:	81 11       	cpse	r24, r1
    1d94:	17 c0       	rjmp	.+46     	; 0x1dc4 <MahonyAHRSupdate+0x13a>
    1d96:	20 e0       	ldi	r18, 0x00	; 0
    1d98:	30 e0       	ldi	r19, 0x00	; 0
    1d9a:	a9 01       	movw	r20, r18
    1d9c:	6f 2d       	mov	r22, r15
    1d9e:	7e 2d       	mov	r23, r14
    1da0:	89 2d       	mov	r24, r9
    1da2:	98 2d       	mov	r25, r8
    1da4:	0e 94 3e 20 	call	0x407c	; 0x407c <__cmpsf2>
    1da8:	81 11       	cpse	r24, r1
    1daa:	0c c0       	rjmp	.+24     	; 0x1dc4 <MahonyAHRSupdate+0x13a>
    1dac:	20 e0       	ldi	r18, 0x00	; 0
    1dae:	30 e0       	ldi	r19, 0x00	; 0
    1db0:	a9 01       	movw	r20, r18
    1db2:	61 2f       	mov	r22, r17
    1db4:	70 2f       	mov	r23, r16
    1db6:	83 2d       	mov	r24, r3
    1db8:	92 2d       	mov	r25, r2
    1dba:	0e 94 3e 20 	call	0x407c	; 0x407c <__cmpsf2>
    1dbe:	88 23       	and	r24, r24
    1dc0:	09 f4       	brne	.+2      	; 0x1dc4 <MahonyAHRSupdate+0x13a>
    1dc2:	37 c5       	rjmp	.+2670   	; 0x2832 <MahonyAHRSupdate+0xba8>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
    1dc4:	a6 01       	movw	r20, r12
    1dc6:	95 01       	movw	r18, r10
    1dc8:	c6 01       	movw	r24, r12
    1dca:	b5 01       	movw	r22, r10
    1dcc:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    1dd0:	2b 01       	movw	r4, r22
    1dd2:	3c 01       	movw	r6, r24
    1dd4:	2f 2d       	mov	r18, r15
    1dd6:	3e 2d       	mov	r19, r14
    1dd8:	49 2d       	mov	r20, r9
    1dda:	58 2d       	mov	r21, r8
    1ddc:	6f 2d       	mov	r22, r15
    1dde:	7e 2d       	mov	r23, r14
    1de0:	89 2d       	mov	r24, r9
    1de2:	98 2d       	mov	r25, r8
    1de4:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    1de8:	9b 01       	movw	r18, r22
    1dea:	ac 01       	movw	r20, r24
    1dec:	c3 01       	movw	r24, r6
    1dee:	b2 01       	movw	r22, r4
    1df0:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <__addsf3>
    1df4:	2b 01       	movw	r4, r22
    1df6:	3c 01       	movw	r6, r24
    1df8:	21 2f       	mov	r18, r17
    1dfa:	30 2f       	mov	r19, r16
    1dfc:	43 2d       	mov	r20, r3
    1dfe:	52 2d       	mov	r21, r2
    1e00:	61 2f       	mov	r22, r17
    1e02:	70 2f       	mov	r23, r16
    1e04:	83 2d       	mov	r24, r3
    1e06:	92 2d       	mov	r25, r2
    1e08:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    1e0c:	9b 01       	movw	r18, r22
    1e0e:	ac 01       	movw	r20, r24
    1e10:	c3 01       	movw	r24, r6
    1e12:	b2 01       	movw	r22, r4
    1e14:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <__addsf3>
    1e18:	fc d9       	rcall	.-3080   	; 0x1212 <invSqrt>
    1e1a:	2b 01       	movw	r4, r22
    1e1c:	3c 01       	movw	r6, r24
		ax *= recipNorm;
    1e1e:	9b 01       	movw	r18, r22
    1e20:	ac 01       	movw	r20, r24
    1e22:	c6 01       	movw	r24, r12
    1e24:	b5 01       	movw	r22, r10
    1e26:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    1e2a:	6d ab       	std	Y+53, r22	; 0x35
    1e2c:	7e ab       	std	Y+54, r23	; 0x36
    1e2e:	8f ab       	std	Y+55, r24	; 0x37
    1e30:	98 af       	std	Y+56, r25	; 0x38
		ay *= recipNorm;
    1e32:	a3 01       	movw	r20, r6
    1e34:	92 01       	movw	r18, r4
    1e36:	6f 2d       	mov	r22, r15
    1e38:	7e 2d       	mov	r23, r14
    1e3a:	89 2d       	mov	r24, r9
    1e3c:	98 2d       	mov	r25, r8
    1e3e:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    1e42:	69 af       	std	Y+57, r22	; 0x39
    1e44:	7a af       	std	Y+58, r23	; 0x3a
    1e46:	8b af       	std	Y+59, r24	; 0x3b
    1e48:	9c af       	std	Y+60, r25	; 0x3c
		az *= recipNorm;     
    1e4a:	a3 01       	movw	r20, r6
    1e4c:	92 01       	movw	r18, r4
    1e4e:	61 2f       	mov	r22, r17
    1e50:	70 2f       	mov	r23, r16
    1e52:	83 2d       	mov	r24, r3
    1e54:	92 2d       	mov	r25, r2
    1e56:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    1e5a:	21 96       	adiw	r28, 0x01	; 1
    1e5c:	6c af       	std	Y+60, r22	; 0x3c
    1e5e:	7d af       	std	Y+61, r23	; 0x3d
    1e60:	8e af       	std	Y+62, r24	; 0x3e
    1e62:	9f af       	std	Y+63, r25	; 0x3f
    1e64:	21 97       	sbiw	r28, 0x01	; 1

		// Normalise magnetometer measurement
		recipNorm = invSqrt(mx * mx + my * my + mz * mz);
    1e66:	e9 96       	adiw	r28, 0x39	; 57
    1e68:	2c ad       	ldd	r18, Y+60	; 0x3c
    1e6a:	3d ad       	ldd	r19, Y+61	; 0x3d
    1e6c:	4e ad       	ldd	r20, Y+62	; 0x3e
    1e6e:	5f ad       	ldd	r21, Y+63	; 0x3f
    1e70:	e9 97       	sbiw	r28, 0x39	; 57
    1e72:	ca 01       	movw	r24, r20
    1e74:	b9 01       	movw	r22, r18
    1e76:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    1e7a:	6b 01       	movw	r12, r22
    1e7c:	7c 01       	movw	r14, r24
    1e7e:	ed 96       	adiw	r28, 0x3d	; 61
    1e80:	2c ad       	ldd	r18, Y+60	; 0x3c
    1e82:	3d ad       	ldd	r19, Y+61	; 0x3d
    1e84:	4e ad       	ldd	r20, Y+62	; 0x3e
    1e86:	5f ad       	ldd	r21, Y+63	; 0x3f
    1e88:	ed 97       	sbiw	r28, 0x3d	; 61
    1e8a:	ca 01       	movw	r24, r20
    1e8c:	b9 01       	movw	r22, r18
    1e8e:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    1e92:	9b 01       	movw	r18, r22
    1e94:	ac 01       	movw	r20, r24
    1e96:	c7 01       	movw	r24, r14
    1e98:	b6 01       	movw	r22, r12
    1e9a:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <__addsf3>
    1e9e:	6b 01       	movw	r12, r22
    1ea0:	7c 01       	movw	r14, r24
    1ea2:	c3 58       	subi	r28, 0x83	; 131
    1ea4:	df 4f       	sbci	r29, 0xFF	; 255
    1ea6:	28 81       	ld	r18, Y
    1ea8:	39 81       	ldd	r19, Y+1	; 0x01
    1eaa:	4a 81       	ldd	r20, Y+2	; 0x02
    1eac:	5b 81       	ldd	r21, Y+3	; 0x03
    1eae:	cd 57       	subi	r28, 0x7D	; 125
    1eb0:	d0 40       	sbci	r29, 0x00	; 0
    1eb2:	ca 01       	movw	r24, r20
    1eb4:	b9 01       	movw	r22, r18
    1eb6:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    1eba:	9b 01       	movw	r18, r22
    1ebc:	ac 01       	movw	r20, r24
    1ebe:	c7 01       	movw	r24, r14
    1ec0:	b6 01       	movw	r22, r12
    1ec2:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <__addsf3>
    1ec6:	a5 d9       	rcall	.-3254   	; 0x1212 <invSqrt>
    1ec8:	6b 01       	movw	r12, r22
    1eca:	7c 01       	movw	r14, r24
		mx *= recipNorm;
    1ecc:	9b 01       	movw	r18, r22
    1ece:	ac 01       	movw	r20, r24
    1ed0:	e9 96       	adiw	r28, 0x39	; 57
    1ed2:	6c ad       	ldd	r22, Y+60	; 0x3c
    1ed4:	7d ad       	ldd	r23, Y+61	; 0x3d
    1ed6:	8e ad       	ldd	r24, Y+62	; 0x3e
    1ed8:	9f ad       	ldd	r25, Y+63	; 0x3f
    1eda:	e9 97       	sbiw	r28, 0x39	; 57
    1edc:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    1ee0:	6d 83       	std	Y+5, r22	; 0x05
    1ee2:	7e 83       	std	Y+6, r23	; 0x06
    1ee4:	8f 83       	std	Y+7, r24	; 0x07
    1ee6:	98 87       	std	Y+8, r25	; 0x08
		my *= recipNorm;
    1ee8:	a7 01       	movw	r20, r14
    1eea:	96 01       	movw	r18, r12
    1eec:	ed 96       	adiw	r28, 0x3d	; 61
    1eee:	6c ad       	ldd	r22, Y+60	; 0x3c
    1ef0:	7d ad       	ldd	r23, Y+61	; 0x3d
    1ef2:	8e ad       	ldd	r24, Y+62	; 0x3e
    1ef4:	9f ad       	ldd	r25, Y+63	; 0x3f
    1ef6:	ed 97       	sbiw	r28, 0x3d	; 61
    1ef8:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    1efc:	69 87       	std	Y+9, r22	; 0x09
    1efe:	7a 87       	std	Y+10, r23	; 0x0a
    1f00:	8b 87       	std	Y+11, r24	; 0x0b
    1f02:	9c 87       	std	Y+12, r25	; 0x0c
		mz *= recipNorm;   
    1f04:	a7 01       	movw	r20, r14
    1f06:	96 01       	movw	r18, r12
    1f08:	c3 58       	subi	r28, 0x83	; 131
    1f0a:	df 4f       	sbci	r29, 0xFF	; 255
    1f0c:	68 81       	ld	r22, Y
    1f0e:	79 81       	ldd	r23, Y+1	; 0x01
    1f10:	8a 81       	ldd	r24, Y+2	; 0x02
    1f12:	9b 81       	ldd	r25, Y+3	; 0x03
    1f14:	cd 57       	subi	r28, 0x7D	; 125
    1f16:	d0 40       	sbci	r29, 0x00	; 0
    1f18:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    1f1c:	6d 87       	std	Y+13, r22	; 0x0d
    1f1e:	7e 87       	std	Y+14, r23	; 0x0e
    1f20:	8f 87       	std	Y+15, r24	; 0x0f
    1f22:	98 8b       	std	Y+16, r25	; 0x10

        // Auxiliary variables to avoid repeated arithmetic
        q0q0 = q0 * q0;
    1f24:	40 90 14 20 	lds	r4, 0x2014	; 0x802014 <q0>
    1f28:	50 90 15 20 	lds	r5, 0x2015	; 0x802015 <q0+0x1>
    1f2c:	60 90 16 20 	lds	r6, 0x2016	; 0x802016 <q0+0x2>
    1f30:	70 90 17 20 	lds	r7, 0x2017	; 0x802017 <q0+0x3>
    1f34:	e0 90 14 20 	lds	r14, 0x2014	; 0x802014 <q0>
    1f38:	f0 90 15 20 	lds	r15, 0x2015	; 0x802015 <q0+0x1>
    1f3c:	00 91 16 20 	lds	r16, 0x2016	; 0x802016 <q0+0x2>
    1f40:	10 91 17 20 	lds	r17, 0x2017	; 0x802017 <q0+0x3>
    1f44:	69 96       	adiw	r28, 0x19	; 25
    1f46:	ec ae       	std	Y+60, r14	; 0x3c
    1f48:	fd ae       	std	Y+61, r15	; 0x3d
    1f4a:	0e af       	std	Y+62, r16	; 0x3e
    1f4c:	1f af       	std	Y+63, r17	; 0x3f
    1f4e:	69 97       	sbiw	r28, 0x19	; 25
        q0q1 = q0 * q1;
    1f50:	60 91 14 20 	lds	r22, 0x2014	; 0x802014 <q0>
    1f54:	70 91 15 20 	lds	r23, 0x2015	; 0x802015 <q0+0x1>
    1f58:	80 91 16 20 	lds	r24, 0x2016	; 0x802016 <q0+0x2>
    1f5c:	90 91 17 20 	lds	r25, 0x2017	; 0x802017 <q0+0x3>
    1f60:	20 91 09 21 	lds	r18, 0x2109	; 0x802109 <q1>
    1f64:	30 91 0a 21 	lds	r19, 0x210A	; 0x80210a <q1+0x1>
    1f68:	40 91 0b 21 	lds	r20, 0x210B	; 0x80210b <q1+0x2>
    1f6c:	50 91 0c 21 	lds	r21, 0x210C	; 0x80210c <q1+0x3>
    1f70:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    1f74:	69 a3       	std	Y+33, r22	; 0x21
    1f76:	7a a3       	std	Y+34, r23	; 0x22
    1f78:	8b a3       	std	Y+35, r24	; 0x23
    1f7a:	9c a3       	std	Y+36, r25	; 0x24
        q0q2 = q0 * q2;
    1f7c:	60 91 14 20 	lds	r22, 0x2014	; 0x802014 <q0>
    1f80:	70 91 15 20 	lds	r23, 0x2015	; 0x802015 <q0+0x1>
    1f84:	80 91 16 20 	lds	r24, 0x2016	; 0x802016 <q0+0x2>
    1f88:	90 91 17 20 	lds	r25, 0x2017	; 0x802017 <q0+0x3>
    1f8c:	20 91 05 21 	lds	r18, 0x2105	; 0x802105 <q2>
    1f90:	30 91 06 21 	lds	r19, 0x2106	; 0x802106 <q2+0x1>
    1f94:	40 91 07 21 	lds	r20, 0x2107	; 0x802107 <q2+0x2>
    1f98:	50 91 08 21 	lds	r21, 0x2108	; 0x802108 <q2+0x3>
    1f9c:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    1fa0:	6d 8f       	std	Y+29, r22	; 0x1d
    1fa2:	7e 8f       	std	Y+30, r23	; 0x1e
    1fa4:	8f 8f       	std	Y+31, r24	; 0x1f
    1fa6:	98 a3       	std	Y+32, r25	; 0x20
        q0q3 = q0 * q3;
    1fa8:	60 91 14 20 	lds	r22, 0x2014	; 0x802014 <q0>
    1fac:	70 91 15 20 	lds	r23, 0x2015	; 0x802015 <q0+0x1>
    1fb0:	80 91 16 20 	lds	r24, 0x2016	; 0x802016 <q0+0x2>
    1fb4:	90 91 17 20 	lds	r25, 0x2017	; 0x802017 <q0+0x3>
    1fb8:	20 91 01 21 	lds	r18, 0x2101	; 0x802101 <q3>
    1fbc:	30 91 02 21 	lds	r19, 0x2102	; 0x802102 <q3+0x1>
    1fc0:	40 91 03 21 	lds	r20, 0x2103	; 0x802103 <q3+0x2>
    1fc4:	50 91 04 21 	lds	r21, 0x2104	; 0x802104 <q3+0x3>
    1fc8:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    1fcc:	6d 8b       	std	Y+21, r22	; 0x15
    1fce:	7e 8b       	std	Y+22, r23	; 0x16
    1fd0:	8f 8b       	std	Y+23, r24	; 0x17
    1fd2:	98 8f       	std	Y+24, r25	; 0x18
        q1q1 = q1 * q1;
    1fd4:	c0 90 09 21 	lds	r12, 0x2109	; 0x802109 <q1>
    1fd8:	d0 90 0a 21 	lds	r13, 0x210A	; 0x80210a <q1+0x1>
    1fdc:	e0 90 0b 21 	lds	r14, 0x210B	; 0x80210b <q1+0x2>
    1fe0:	f0 90 0c 21 	lds	r15, 0x210C	; 0x80210c <q1+0x3>
    1fe4:	80 91 09 21 	lds	r24, 0x2109	; 0x802109 <q1>
    1fe8:	90 91 0a 21 	lds	r25, 0x210A	; 0x80210a <q1+0x1>
    1fec:	a0 91 0b 21 	lds	r26, 0x210B	; 0x80210b <q1+0x2>
    1ff0:	b0 91 0c 21 	lds	r27, 0x210C	; 0x80210c <q1+0x3>
    1ff4:	89 ab       	std	Y+49, r24	; 0x31
    1ff6:	9a ab       	std	Y+50, r25	; 0x32
    1ff8:	ab ab       	std	Y+51, r26	; 0x33
    1ffa:	bc ab       	std	Y+52, r27	; 0x34
        q1q2 = q1 * q2;
    1ffc:	60 91 09 21 	lds	r22, 0x2109	; 0x802109 <q1>
    2000:	70 91 0a 21 	lds	r23, 0x210A	; 0x80210a <q1+0x1>
    2004:	80 91 0b 21 	lds	r24, 0x210B	; 0x80210b <q1+0x2>
    2008:	90 91 0c 21 	lds	r25, 0x210C	; 0x80210c <q1+0x3>
    200c:	20 91 05 21 	lds	r18, 0x2105	; 0x802105 <q2>
    2010:	30 91 06 21 	lds	r19, 0x2106	; 0x802106 <q2+0x1>
    2014:	40 91 07 21 	lds	r20, 0x2107	; 0x802107 <q2+0x2>
    2018:	50 91 08 21 	lds	r21, 0x2108	; 0x802108 <q2+0x3>
    201c:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    2020:	69 a7       	std	Y+41, r22	; 0x29
    2022:	7a a7       	std	Y+42, r23	; 0x2a
    2024:	8b a7       	std	Y+43, r24	; 0x2b
    2026:	9c a7       	std	Y+44, r25	; 0x2c
        q1q3 = q1 * q3;
    2028:	60 91 09 21 	lds	r22, 0x2109	; 0x802109 <q1>
    202c:	70 91 0a 21 	lds	r23, 0x210A	; 0x80210a <q1+0x1>
    2030:	80 91 0b 21 	lds	r24, 0x210B	; 0x80210b <q1+0x2>
    2034:	90 91 0c 21 	lds	r25, 0x210C	; 0x80210c <q1+0x3>
    2038:	20 91 01 21 	lds	r18, 0x2101	; 0x802101 <q3>
    203c:	30 91 02 21 	lds	r19, 0x2102	; 0x802102 <q3+0x1>
    2040:	40 91 03 21 	lds	r20, 0x2103	; 0x802103 <q3+0x2>
    2044:	50 91 04 21 	lds	r21, 0x2104	; 0x802104 <q3+0x3>
    2048:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    204c:	6d a7       	std	Y+45, r22	; 0x2d
    204e:	7e a7       	std	Y+46, r23	; 0x2e
    2050:	8f a7       	std	Y+47, r24	; 0x2f
    2052:	98 ab       	std	Y+48, r25	; 0x30
        q2q2 = q2 * q2;
    2054:	60 91 05 21 	lds	r22, 0x2105	; 0x802105 <q2>
    2058:	70 91 06 21 	lds	r23, 0x2106	; 0x802106 <q2+0x1>
    205c:	80 91 07 21 	lds	r24, 0x2107	; 0x802107 <q2+0x2>
    2060:	90 91 08 21 	lds	r25, 0x2108	; 0x802108 <q2+0x3>
    2064:	20 91 05 21 	lds	r18, 0x2105	; 0x802105 <q2>
    2068:	30 91 06 21 	lds	r19, 0x2106	; 0x802106 <q2+0x1>
    206c:	40 91 07 21 	lds	r20, 0x2107	; 0x802107 <q2+0x2>
    2070:	50 91 08 21 	lds	r21, 0x2108	; 0x802108 <q2+0x3>
    2074:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    2078:	25 96       	adiw	r28, 0x05	; 5
    207a:	6c af       	std	Y+60, r22	; 0x3c
    207c:	7d af       	std	Y+61, r23	; 0x3d
    207e:	8e af       	std	Y+62, r24	; 0x3e
    2080:	9f af       	std	Y+63, r25	; 0x3f
    2082:	25 97       	sbiw	r28, 0x05	; 5
        q2q3 = q2 * q3;
    2084:	60 91 05 21 	lds	r22, 0x2105	; 0x802105 <q2>
    2088:	70 91 06 21 	lds	r23, 0x2106	; 0x802106 <q2+0x1>
    208c:	80 91 07 21 	lds	r24, 0x2107	; 0x802107 <q2+0x2>
    2090:	90 91 08 21 	lds	r25, 0x2108	; 0x802108 <q2+0x3>
    2094:	20 91 01 21 	lds	r18, 0x2101	; 0x802101 <q3>
    2098:	30 91 02 21 	lds	r19, 0x2102	; 0x802102 <q3+0x1>
    209c:	40 91 03 21 	lds	r20, 0x2103	; 0x802103 <q3+0x2>
    20a0:	50 91 04 21 	lds	r21, 0x2104	; 0x802104 <q3+0x3>
    20a4:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    20a8:	29 96       	adiw	r28, 0x09	; 9
    20aa:	6c af       	std	Y+60, r22	; 0x3c
    20ac:	7d af       	std	Y+61, r23	; 0x3d
    20ae:	8e af       	std	Y+62, r24	; 0x3e
    20b0:	9f af       	std	Y+63, r25	; 0x3f
    20b2:	29 97       	sbiw	r28, 0x09	; 9
        q3q3 = q3 * q3;   
    20b4:	60 91 01 21 	lds	r22, 0x2101	; 0x802101 <q3>
    20b8:	70 91 02 21 	lds	r23, 0x2102	; 0x802102 <q3+0x1>
    20bc:	80 91 03 21 	lds	r24, 0x2103	; 0x802103 <q3+0x2>
    20c0:	90 91 04 21 	lds	r25, 0x2104	; 0x802104 <q3+0x3>
    20c4:	20 91 01 21 	lds	r18, 0x2101	; 0x802101 <q3>
    20c8:	30 91 02 21 	lds	r19, 0x2102	; 0x802102 <q3+0x1>
    20cc:	40 91 03 21 	lds	r20, 0x2103	; 0x802103 <q3+0x2>
    20d0:	50 91 04 21 	lds	r21, 0x2104	; 0x802104 <q3+0x3>
    20d4:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    20d8:	6d a3       	std	Y+37, r22	; 0x25
    20da:	7e a3       	std	Y+38, r23	; 0x26
    20dc:	8f a3       	std	Y+39, r24	; 0x27
    20de:	98 a7       	std	Y+40, r25	; 0x28

        // Reference direction of Earth's magnetic field
        hx = 2.0 * (mx * (0.5 - q2q2 - q3q3) + my * (q1q2 - q0q3) + mz * (q1q3 + q0q2));
    20e0:	25 96       	adiw	r28, 0x05	; 5
    20e2:	2c ad       	ldd	r18, Y+60	; 0x3c
    20e4:	3d ad       	ldd	r19, Y+61	; 0x3d
    20e6:	4e ad       	ldd	r20, Y+62	; 0x3e
    20e8:	5f ad       	ldd	r21, Y+63	; 0x3f
    20ea:	25 97       	sbiw	r28, 0x05	; 5
    20ec:	60 e0       	ldi	r22, 0x00	; 0
    20ee:	70 e0       	ldi	r23, 0x00	; 0
    20f0:	80 e0       	ldi	r24, 0x00	; 0
    20f2:	9f e3       	ldi	r25, 0x3F	; 63
    20f4:	0e 94 60 1f 	call	0x3ec0	; 0x3ec0 <__subsf3>
    20f8:	2d a1       	ldd	r18, Y+37	; 0x25
    20fa:	3e a1       	ldd	r19, Y+38	; 0x26
    20fc:	4f a1       	ldd	r20, Y+39	; 0x27
    20fe:	58 a5       	ldd	r21, Y+40	; 0x28
    2100:	0e 94 60 1f 	call	0x3ec0	; 0x3ec0 <__subsf3>
    2104:	2d 96       	adiw	r28, 0x0d	; 13
    2106:	6c af       	std	Y+60, r22	; 0x3c
    2108:	7d af       	std	Y+61, r23	; 0x3d
    210a:	8e af       	std	Y+62, r24	; 0x3e
    210c:	9f af       	std	Y+63, r25	; 0x3f
    210e:	2d 97       	sbiw	r28, 0x0d	; 13
    2110:	2d 89       	ldd	r18, Y+21	; 0x15
    2112:	3e 89       	ldd	r19, Y+22	; 0x16
    2114:	4f 89       	ldd	r20, Y+23	; 0x17
    2116:	58 8d       	ldd	r21, Y+24	; 0x18
    2118:	69 a5       	ldd	r22, Y+41	; 0x29
    211a:	7a a5       	ldd	r23, Y+42	; 0x2a
    211c:	8b a5       	ldd	r24, Y+43	; 0x2b
    211e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2120:	0e 94 60 1f 	call	0x3ec0	; 0x3ec0 <__subsf3>
    2124:	61 96       	adiw	r28, 0x11	; 17
    2126:	6c af       	std	Y+60, r22	; 0x3c
    2128:	7d af       	std	Y+61, r23	; 0x3d
    212a:	8e af       	std	Y+62, r24	; 0x3e
    212c:	9f af       	std	Y+63, r25	; 0x3f
    212e:	61 97       	sbiw	r28, 0x11	; 17
    2130:	2d a5       	ldd	r18, Y+45	; 0x2d
    2132:	3e a5       	ldd	r19, Y+46	; 0x2e
    2134:	4f a5       	ldd	r20, Y+47	; 0x2f
    2136:	58 a9       	ldd	r21, Y+48	; 0x30
    2138:	6d 8d       	ldd	r22, Y+29	; 0x1d
    213a:	7e 8d       	ldd	r23, Y+30	; 0x1e
    213c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    213e:	98 a1       	ldd	r25, Y+32	; 0x20
    2140:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <__addsf3>
    2144:	65 96       	adiw	r28, 0x15	; 21
    2146:	6c af       	std	Y+60, r22	; 0x3c
    2148:	7d af       	std	Y+61, r23	; 0x3d
    214a:	8e af       	std	Y+62, r24	; 0x3e
    214c:	9f af       	std	Y+63, r25	; 0x3f
    214e:	65 97       	sbiw	r28, 0x15	; 21
    2150:	2d 96       	adiw	r28, 0x0d	; 13
    2152:	2c ad       	ldd	r18, Y+60	; 0x3c
    2154:	3d ad       	ldd	r19, Y+61	; 0x3d
    2156:	4e ad       	ldd	r20, Y+62	; 0x3e
    2158:	5f ad       	ldd	r21, Y+63	; 0x3f
    215a:	2d 97       	sbiw	r28, 0x0d	; 13
    215c:	6d 81       	ldd	r22, Y+5	; 0x05
    215e:	7e 81       	ldd	r23, Y+6	; 0x06
    2160:	8f 81       	ldd	r24, Y+7	; 0x07
    2162:	98 85       	ldd	r25, Y+8	; 0x08
    2164:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    2168:	4b 01       	movw	r8, r22
    216a:	5c 01       	movw	r10, r24
    216c:	61 96       	adiw	r28, 0x11	; 17
    216e:	2c ad       	ldd	r18, Y+60	; 0x3c
    2170:	3d ad       	ldd	r19, Y+61	; 0x3d
    2172:	4e ad       	ldd	r20, Y+62	; 0x3e
    2174:	5f ad       	ldd	r21, Y+63	; 0x3f
    2176:	61 97       	sbiw	r28, 0x11	; 17
    2178:	69 85       	ldd	r22, Y+9	; 0x09
    217a:	7a 85       	ldd	r23, Y+10	; 0x0a
    217c:	8b 85       	ldd	r24, Y+11	; 0x0b
    217e:	9c 85       	ldd	r25, Y+12	; 0x0c
    2180:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    2184:	9b 01       	movw	r18, r22
    2186:	ac 01       	movw	r20, r24
    2188:	c5 01       	movw	r24, r10
    218a:	b4 01       	movw	r22, r8
    218c:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <__addsf3>
    2190:	4b 01       	movw	r8, r22
    2192:	5c 01       	movw	r10, r24
    2194:	65 96       	adiw	r28, 0x15	; 21
    2196:	2c ad       	ldd	r18, Y+60	; 0x3c
    2198:	3d ad       	ldd	r19, Y+61	; 0x3d
    219a:	4e ad       	ldd	r20, Y+62	; 0x3e
    219c:	5f ad       	ldd	r21, Y+63	; 0x3f
    219e:	65 97       	sbiw	r28, 0x15	; 21
    21a0:	6d 85       	ldd	r22, Y+13	; 0x0d
    21a2:	7e 85       	ldd	r23, Y+14	; 0x0e
    21a4:	8f 85       	ldd	r24, Y+15	; 0x0f
    21a6:	98 89       	ldd	r25, Y+16	; 0x10
    21a8:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    21ac:	9b 01       	movw	r18, r22
    21ae:	ac 01       	movw	r20, r24
    21b0:	c5 01       	movw	r24, r10
    21b2:	b4 01       	movw	r22, r8
    21b4:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <__addsf3>
    21b8:	9b 01       	movw	r18, r22
    21ba:	ac 01       	movw	r20, r24
    21bc:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <__addsf3>
    21c0:	4b 01       	movw	r8, r22
    21c2:	5c 01       	movw	r10, r24
        hy = 2.0 * (mx * (q1q2 + q0q3) + my * (0.5 - q1q1 - q3q3) + mz * (q2q3 - q0q1));
    21c4:	29 a9       	ldd	r18, Y+49	; 0x31
    21c6:	3a a9       	ldd	r19, Y+50	; 0x32
    21c8:	4b a9       	ldd	r20, Y+51	; 0x33
    21ca:	5c a9       	ldd	r21, Y+52	; 0x34
    21cc:	c7 01       	movw	r24, r14
    21ce:	b6 01       	movw	r22, r12
    21d0:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    21d4:	9b 01       	movw	r18, r22
    21d6:	ac 01       	movw	r20, r24
    21d8:	60 e0       	ldi	r22, 0x00	; 0
    21da:	70 e0       	ldi	r23, 0x00	; 0
    21dc:	80 e0       	ldi	r24, 0x00	; 0
    21de:	9f e3       	ldi	r25, 0x3F	; 63
    21e0:	0e 94 60 1f 	call	0x3ec0	; 0x3ec0 <__subsf3>
    21e4:	69 ab       	std	Y+49, r22	; 0x31
    21e6:	7a ab       	std	Y+50, r23	; 0x32
    21e8:	8b ab       	std	Y+51, r24	; 0x33
    21ea:	9c ab       	std	Y+52, r25	; 0x34
    21ec:	29 a5       	ldd	r18, Y+41	; 0x29
    21ee:	3a a5       	ldd	r19, Y+42	; 0x2a
    21f0:	4b a5       	ldd	r20, Y+43	; 0x2b
    21f2:	5c a5       	ldd	r21, Y+44	; 0x2c
    21f4:	6d 89       	ldd	r22, Y+21	; 0x15
    21f6:	7e 89       	ldd	r23, Y+22	; 0x16
    21f8:	8f 89       	ldd	r24, Y+23	; 0x17
    21fa:	98 8d       	ldd	r25, Y+24	; 0x18
    21fc:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <__addsf3>
    2200:	2d 81       	ldd	r18, Y+5	; 0x05
    2202:	3e 81       	ldd	r19, Y+6	; 0x06
    2204:	4f 81       	ldd	r20, Y+7	; 0x07
    2206:	58 85       	ldd	r21, Y+8	; 0x08
    2208:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    220c:	6b 01       	movw	r12, r22
    220e:	7c 01       	movw	r14, r24
    2210:	2d a1       	ldd	r18, Y+37	; 0x25
    2212:	3e a1       	ldd	r19, Y+38	; 0x26
    2214:	4f a1       	ldd	r20, Y+39	; 0x27
    2216:	58 a5       	ldd	r21, Y+40	; 0x28
    2218:	69 a9       	ldd	r22, Y+49	; 0x31
    221a:	7a a9       	ldd	r23, Y+50	; 0x32
    221c:	8b a9       	ldd	r24, Y+51	; 0x33
    221e:	9c a9       	ldd	r25, Y+52	; 0x34
    2220:	0e 94 60 1f 	call	0x3ec0	; 0x3ec0 <__subsf3>
    2224:	29 85       	ldd	r18, Y+9	; 0x09
    2226:	3a 85       	ldd	r19, Y+10	; 0x0a
    2228:	4b 85       	ldd	r20, Y+11	; 0x0b
    222a:	5c 85       	ldd	r21, Y+12	; 0x0c
    222c:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    2230:	9b 01       	movw	r18, r22
    2232:	ac 01       	movw	r20, r24
    2234:	c7 01       	movw	r24, r14
    2236:	b6 01       	movw	r22, r12
    2238:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <__addsf3>
    223c:	6b 01       	movw	r12, r22
    223e:	7c 01       	movw	r14, r24
    2240:	29 a1       	ldd	r18, Y+33	; 0x21
    2242:	3a a1       	ldd	r19, Y+34	; 0x22
    2244:	4b a1       	ldd	r20, Y+35	; 0x23
    2246:	5c a1       	ldd	r21, Y+36	; 0x24
    2248:	29 96       	adiw	r28, 0x09	; 9
    224a:	6c ad       	ldd	r22, Y+60	; 0x3c
    224c:	7d ad       	ldd	r23, Y+61	; 0x3d
    224e:	8e ad       	ldd	r24, Y+62	; 0x3e
    2250:	9f ad       	ldd	r25, Y+63	; 0x3f
    2252:	29 97       	sbiw	r28, 0x09	; 9
    2254:	0e 94 60 1f 	call	0x3ec0	; 0x3ec0 <__subsf3>
    2258:	2d 85       	ldd	r18, Y+13	; 0x0d
    225a:	3e 85       	ldd	r19, Y+14	; 0x0e
    225c:	4f 85       	ldd	r20, Y+15	; 0x0f
    225e:	58 89       	ldd	r21, Y+16	; 0x10
    2260:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    2264:	9b 01       	movw	r18, r22
    2266:	ac 01       	movw	r20, r24
    2268:	c7 01       	movw	r24, r14
    226a:	b6 01       	movw	r22, r12
    226c:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <__addsf3>
    2270:	9b 01       	movw	r18, r22
    2272:	ac 01       	movw	r20, r24
    2274:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <__addsf3>
    2278:	6b 01       	movw	r12, r22
    227a:	7c 01       	movw	r14, r24
        bx = sqrt(hx * hx + hy * hy);
    227c:	a5 01       	movw	r20, r10
    227e:	94 01       	movw	r18, r8
    2280:	c5 01       	movw	r24, r10
    2282:	b4 01       	movw	r22, r8
    2284:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    2288:	6d 8b       	std	Y+21, r22	; 0x15
    228a:	7e 8b       	std	Y+22, r23	; 0x16
    228c:	8f 8b       	std	Y+23, r24	; 0x17
    228e:	98 8f       	std	Y+24, r25	; 0x18
    2290:	a5 01       	movw	r20, r10
    2292:	94 01       	movw	r18, r8
    2294:	c5 01       	movw	r24, r10
    2296:	b4 01       	movw	r22, r8
    2298:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    229c:	4b 01       	movw	r8, r22
    229e:	5c 01       	movw	r10, r24
    22a0:	a7 01       	movw	r20, r14
    22a2:	96 01       	movw	r18, r12
    22a4:	c7 01       	movw	r24, r14
    22a6:	b6 01       	movw	r22, r12
    22a8:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    22ac:	9b 01       	movw	r18, r22
    22ae:	ac 01       	movw	r20, r24
    22b0:	c5 01       	movw	r24, r10
    22b2:	b4 01       	movw	r22, r8
    22b4:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <__addsf3>
    22b8:	0e 94 50 22 	call	0x44a0	; 0x44a0 <sqrt>
    22bc:	4b 01       	movw	r8, r22
    22be:	5c 01       	movw	r10, r24
        bz = 2.0 * (mx * (q1q3 - q0q2) + my * (q2q3 + q0q1) + mz * (0.5 - q1q1 - q2q2));
    22c0:	2d 8d       	ldd	r18, Y+29	; 0x1d
    22c2:	3e 8d       	ldd	r19, Y+30	; 0x1e
    22c4:	4f 8d       	ldd	r20, Y+31	; 0x1f
    22c6:	58 a1       	ldd	r21, Y+32	; 0x20
    22c8:	6d a5       	ldd	r22, Y+45	; 0x2d
    22ca:	7e a5       	ldd	r23, Y+46	; 0x2e
    22cc:	8f a5       	ldd	r24, Y+47	; 0x2f
    22ce:	98 a9       	ldd	r25, Y+48	; 0x30
    22d0:	0e 94 60 1f 	call	0x3ec0	; 0x3ec0 <__subsf3>
    22d4:	6d 8f       	std	Y+29, r22	; 0x1d
    22d6:	7e 8f       	std	Y+30, r23	; 0x1e
    22d8:	8f 8f       	std	Y+31, r24	; 0x1f
    22da:	98 a3       	std	Y+32, r25	; 0x20
    22dc:	29 96       	adiw	r28, 0x09	; 9
    22de:	2c ad       	ldd	r18, Y+60	; 0x3c
    22e0:	3d ad       	ldd	r19, Y+61	; 0x3d
    22e2:	4e ad       	ldd	r20, Y+62	; 0x3e
    22e4:	5f ad       	ldd	r21, Y+63	; 0x3f
    22e6:	29 97       	sbiw	r28, 0x09	; 9
    22e8:	69 a1       	ldd	r22, Y+33	; 0x21
    22ea:	7a a1       	ldd	r23, Y+34	; 0x22
    22ec:	8b a1       	ldd	r24, Y+35	; 0x23
    22ee:	9c a1       	ldd	r25, Y+36	; 0x24
    22f0:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <__addsf3>
    22f4:	69 a3       	std	Y+33, r22	; 0x21
    22f6:	7a a3       	std	Y+34, r23	; 0x22
    22f8:	8b a3       	std	Y+35, r24	; 0x23
    22fa:	9c a3       	std	Y+36, r25	; 0x24
    22fc:	25 96       	adiw	r28, 0x05	; 5
    22fe:	2c ad       	ldd	r18, Y+60	; 0x3c
    2300:	3d ad       	ldd	r19, Y+61	; 0x3d
    2302:	4e ad       	ldd	r20, Y+62	; 0x3e
    2304:	5f ad       	ldd	r21, Y+63	; 0x3f
    2306:	25 97       	sbiw	r28, 0x05	; 5
    2308:	69 a9       	ldd	r22, Y+49	; 0x31
    230a:	7a a9       	ldd	r23, Y+50	; 0x32
    230c:	8b a9       	ldd	r24, Y+51	; 0x33
    230e:	9c a9       	ldd	r25, Y+52	; 0x34
    2310:	0e 94 60 1f 	call	0x3ec0	; 0x3ec0 <__subsf3>
    2314:	6d 8b       	std	Y+21, r22	; 0x15
    2316:	7e 8b       	std	Y+22, r23	; 0x16
    2318:	8f 8b       	std	Y+23, r24	; 0x17
    231a:	98 8f       	std	Y+24, r25	; 0x18
    231c:	2d 8d       	ldd	r18, Y+29	; 0x1d
    231e:	3e 8d       	ldd	r19, Y+30	; 0x1e
    2320:	4f 8d       	ldd	r20, Y+31	; 0x1f
    2322:	58 a1       	ldd	r21, Y+32	; 0x20
    2324:	6d 81       	ldd	r22, Y+5	; 0x05
    2326:	7e 81       	ldd	r23, Y+6	; 0x06
    2328:	8f 81       	ldd	r24, Y+7	; 0x07
    232a:	98 85       	ldd	r25, Y+8	; 0x08
    232c:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    2330:	6b 01       	movw	r12, r22
    2332:	7c 01       	movw	r14, r24
    2334:	29 a1       	ldd	r18, Y+33	; 0x21
    2336:	3a a1       	ldd	r19, Y+34	; 0x22
    2338:	4b a1       	ldd	r20, Y+35	; 0x23
    233a:	5c a1       	ldd	r21, Y+36	; 0x24
    233c:	69 85       	ldd	r22, Y+9	; 0x09
    233e:	7a 85       	ldd	r23, Y+10	; 0x0a
    2340:	8b 85       	ldd	r24, Y+11	; 0x0b
    2342:	9c 85       	ldd	r25, Y+12	; 0x0c
    2344:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    2348:	9b 01       	movw	r18, r22
    234a:	ac 01       	movw	r20, r24
    234c:	c7 01       	movw	r24, r14
    234e:	b6 01       	movw	r22, r12
    2350:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <__addsf3>
    2354:	6b 01       	movw	r12, r22
    2356:	7c 01       	movw	r14, r24
    2358:	2d 89       	ldd	r18, Y+21	; 0x15
    235a:	3e 89       	ldd	r19, Y+22	; 0x16
    235c:	4f 89       	ldd	r20, Y+23	; 0x17
    235e:	58 8d       	ldd	r21, Y+24	; 0x18
    2360:	6d 85       	ldd	r22, Y+13	; 0x0d
    2362:	7e 85       	ldd	r23, Y+14	; 0x0e
    2364:	8f 85       	ldd	r24, Y+15	; 0x0f
    2366:	98 89       	ldd	r25, Y+16	; 0x10
    2368:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    236c:	9b 01       	movw	r18, r22
    236e:	ac 01       	movw	r20, r24
    2370:	c7 01       	movw	r24, r14
    2372:	b6 01       	movw	r22, r12
    2374:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <__addsf3>
    2378:	9b 01       	movw	r18, r22
    237a:	ac 01       	movw	r20, r24
    237c:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <__addsf3>
    2380:	6b 01       	movw	r12, r22
    2382:	7c 01       	movw	r14, r24

		// Estimated direction of gravity and magnetic field
		halfvx = q1q3 - q0q2;
		halfvy = q0q1 + q2q3;
		halfvz = q0q0 - 0.5 + q3q3;
    2384:	69 96       	adiw	r28, 0x19	; 25
    2386:	2c ad       	ldd	r18, Y+60	; 0x3c
    2388:	3d ad       	ldd	r19, Y+61	; 0x3d
    238a:	4e ad       	ldd	r20, Y+62	; 0x3e
    238c:	5f ad       	ldd	r21, Y+63	; 0x3f
    238e:	69 97       	sbiw	r28, 0x19	; 25
    2390:	c3 01       	movw	r24, r6
    2392:	b2 01       	movw	r22, r4
    2394:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    2398:	20 e0       	ldi	r18, 0x00	; 0
    239a:	30 e0       	ldi	r19, 0x00	; 0
    239c:	40 e0       	ldi	r20, 0x00	; 0
    239e:	5f e3       	ldi	r21, 0x3F	; 63
    23a0:	0e 94 60 1f 	call	0x3ec0	; 0x3ec0 <__subsf3>
    23a4:	2d a1       	ldd	r18, Y+37	; 0x25
    23a6:	3e a1       	ldd	r19, Y+38	; 0x26
    23a8:	4f a1       	ldd	r20, Y+39	; 0x27
    23aa:	58 a5       	ldd	r21, Y+40	; 0x28
    23ac:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <__addsf3>
    23b0:	6d a3       	std	Y+37, r22	; 0x25
    23b2:	7e a3       	std	Y+38, r23	; 0x26
    23b4:	8f a3       	std	Y+39, r24	; 0x27
    23b6:	98 a7       	std	Y+40, r25	; 0x28
        halfwx = bx * (0.5 - q2q2 - q3q3) + bz * (q1q3 - q0q2);
    23b8:	a5 01       	movw	r20, r10
    23ba:	94 01       	movw	r18, r8
    23bc:	2d 96       	adiw	r28, 0x0d	; 13
    23be:	6c ad       	ldd	r22, Y+60	; 0x3c
    23c0:	7d ad       	ldd	r23, Y+61	; 0x3d
    23c2:	8e ad       	ldd	r24, Y+62	; 0x3e
    23c4:	9f ad       	ldd	r25, Y+63	; 0x3f
    23c6:	2d 97       	sbiw	r28, 0x0d	; 13
    23c8:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    23cc:	2b 01       	movw	r4, r22
    23ce:	3c 01       	movw	r6, r24
    23d0:	a7 01       	movw	r20, r14
    23d2:	96 01       	movw	r18, r12
    23d4:	6d 8d       	ldd	r22, Y+29	; 0x1d
    23d6:	7e 8d       	ldd	r23, Y+30	; 0x1e
    23d8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    23da:	98 a1       	ldd	r25, Y+32	; 0x20
    23dc:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    23e0:	9b 01       	movw	r18, r22
    23e2:	ac 01       	movw	r20, r24
    23e4:	c3 01       	movw	r24, r6
    23e6:	b2 01       	movw	r22, r4
    23e8:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <__addsf3>
    23ec:	69 a7       	std	Y+41, r22	; 0x29
    23ee:	7a a7       	std	Y+42, r23	; 0x2a
    23f0:	8b a7       	std	Y+43, r24	; 0x2b
    23f2:	9c a7       	std	Y+44, r25	; 0x2c
        halfwy = bx * (q1q2 - q0q3) + bz * (q0q1 + q2q3);
    23f4:	a5 01       	movw	r20, r10
    23f6:	94 01       	movw	r18, r8
    23f8:	61 96       	adiw	r28, 0x11	; 17
    23fa:	6c ad       	ldd	r22, Y+60	; 0x3c
    23fc:	7d ad       	ldd	r23, Y+61	; 0x3d
    23fe:	8e ad       	ldd	r24, Y+62	; 0x3e
    2400:	9f ad       	ldd	r25, Y+63	; 0x3f
    2402:	61 97       	sbiw	r28, 0x11	; 17
    2404:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    2408:	2b 01       	movw	r4, r22
    240a:	3c 01       	movw	r6, r24
    240c:	a7 01       	movw	r20, r14
    240e:	96 01       	movw	r18, r12
    2410:	69 a1       	ldd	r22, Y+33	; 0x21
    2412:	7a a1       	ldd	r23, Y+34	; 0x22
    2414:	8b a1       	ldd	r24, Y+35	; 0x23
    2416:	9c a1       	ldd	r25, Y+36	; 0x24
    2418:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    241c:	9b 01       	movw	r18, r22
    241e:	ac 01       	movw	r20, r24
    2420:	c3 01       	movw	r24, r6
    2422:	b2 01       	movw	r22, r4
    2424:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <__addsf3>
    2428:	6d a7       	std	Y+45, r22	; 0x2d
    242a:	7e a7       	std	Y+46, r23	; 0x2e
    242c:	8f a7       	std	Y+47, r24	; 0x2f
    242e:	98 ab       	std	Y+48, r25	; 0x30
        halfwz = bx * (q0q2 + q1q3) + bz * (0.5 - q1q1 - q2q2);  
    2430:	a5 01       	movw	r20, r10
    2432:	94 01       	movw	r18, r8
    2434:	65 96       	adiw	r28, 0x15	; 21
    2436:	6c ad       	ldd	r22, Y+60	; 0x3c
    2438:	7d ad       	ldd	r23, Y+61	; 0x3d
    243a:	8e ad       	ldd	r24, Y+62	; 0x3e
    243c:	9f ad       	ldd	r25, Y+63	; 0x3f
    243e:	65 97       	sbiw	r28, 0x15	; 21
    2440:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    2444:	2b 01       	movw	r4, r22
    2446:	3c 01       	movw	r6, r24
    2448:	a7 01       	movw	r20, r14
    244a:	96 01       	movw	r18, r12
    244c:	6d 89       	ldd	r22, Y+21	; 0x15
    244e:	7e 89       	ldd	r23, Y+22	; 0x16
    2450:	8f 89       	ldd	r24, Y+23	; 0x17
    2452:	98 8d       	ldd	r25, Y+24	; 0x18
    2454:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    2458:	9b 01       	movw	r18, r22
    245a:	ac 01       	movw	r20, r24
    245c:	c3 01       	movw	r24, r6
    245e:	b2 01       	movw	r22, r4
    2460:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <__addsf3>
    2464:	6b 01       	movw	r12, r22
    2466:	7c 01       	movw	r14, r24
	
		// Error is sum of cross product between estimated direction and measured direction of field vectors
		halfex = (ay * halfvz - az * halfvy) + (my * halfwz - mz * halfwy);
    2468:	2d a1       	ldd	r18, Y+37	; 0x25
    246a:	3e a1       	ldd	r19, Y+38	; 0x26
    246c:	4f a1       	ldd	r20, Y+39	; 0x27
    246e:	58 a5       	ldd	r21, Y+40	; 0x28
    2470:	69 ad       	ldd	r22, Y+57	; 0x39
    2472:	7a ad       	ldd	r23, Y+58	; 0x3a
    2474:	8b ad       	ldd	r24, Y+59	; 0x3b
    2476:	9c ad       	ldd	r25, Y+60	; 0x3c
    2478:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    247c:	4b 01       	movw	r8, r22
    247e:	5c 01       	movw	r10, r24
    2480:	29 a1       	ldd	r18, Y+33	; 0x21
    2482:	3a a1       	ldd	r19, Y+34	; 0x22
    2484:	4b a1       	ldd	r20, Y+35	; 0x23
    2486:	5c a1       	ldd	r21, Y+36	; 0x24
    2488:	21 96       	adiw	r28, 0x01	; 1
    248a:	6c ad       	ldd	r22, Y+60	; 0x3c
    248c:	7d ad       	ldd	r23, Y+61	; 0x3d
    248e:	8e ad       	ldd	r24, Y+62	; 0x3e
    2490:	9f ad       	ldd	r25, Y+63	; 0x3f
    2492:	21 97       	sbiw	r28, 0x01	; 1
    2494:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    2498:	9b 01       	movw	r18, r22
    249a:	ac 01       	movw	r20, r24
    249c:	c5 01       	movw	r24, r10
    249e:	b4 01       	movw	r22, r8
    24a0:	0e 94 60 1f 	call	0x3ec0	; 0x3ec0 <__subsf3>
    24a4:	4b 01       	movw	r8, r22
    24a6:	5c 01       	movw	r10, r24
    24a8:	a7 01       	movw	r20, r14
    24aa:	96 01       	movw	r18, r12
    24ac:	69 85       	ldd	r22, Y+9	; 0x09
    24ae:	7a 85       	ldd	r23, Y+10	; 0x0a
    24b0:	8b 85       	ldd	r24, Y+11	; 0x0b
    24b2:	9c 85       	ldd	r25, Y+12	; 0x0c
    24b4:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    24b8:	2b 01       	movw	r4, r22
    24ba:	3c 01       	movw	r6, r24
    24bc:	2d a5       	ldd	r18, Y+45	; 0x2d
    24be:	3e a5       	ldd	r19, Y+46	; 0x2e
    24c0:	4f a5       	ldd	r20, Y+47	; 0x2f
    24c2:	58 a9       	ldd	r21, Y+48	; 0x30
    24c4:	6d 85       	ldd	r22, Y+13	; 0x0d
    24c6:	7e 85       	ldd	r23, Y+14	; 0x0e
    24c8:	8f 85       	ldd	r24, Y+15	; 0x0f
    24ca:	98 89       	ldd	r25, Y+16	; 0x10
    24cc:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    24d0:	9b 01       	movw	r18, r22
    24d2:	ac 01       	movw	r20, r24
    24d4:	c3 01       	movw	r24, r6
    24d6:	b2 01       	movw	r22, r4
    24d8:	0e 94 60 1f 	call	0x3ec0	; 0x3ec0 <__subsf3>
    24dc:	9b 01       	movw	r18, r22
    24de:	ac 01       	movw	r20, r24
    24e0:	c5 01       	movw	r24, r10
    24e2:	b4 01       	movw	r22, r8
    24e4:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <__addsf3>
    24e8:	6d 8b       	std	Y+21, r22	; 0x15
    24ea:	7e 8b       	std	Y+22, r23	; 0x16
    24ec:	8f 8b       	std	Y+23, r24	; 0x17
    24ee:	98 8f       	std	Y+24, r25	; 0x18
		halfey = (az * halfvx - ax * halfvz) + (mz * halfwx - mx * halfwz);
    24f0:	2d 8d       	ldd	r18, Y+29	; 0x1d
    24f2:	3e 8d       	ldd	r19, Y+30	; 0x1e
    24f4:	4f 8d       	ldd	r20, Y+31	; 0x1f
    24f6:	58 a1       	ldd	r21, Y+32	; 0x20
    24f8:	21 96       	adiw	r28, 0x01	; 1
    24fa:	6c ad       	ldd	r22, Y+60	; 0x3c
    24fc:	7d ad       	ldd	r23, Y+61	; 0x3d
    24fe:	8e ad       	ldd	r24, Y+62	; 0x3e
    2500:	9f ad       	ldd	r25, Y+63	; 0x3f
    2502:	21 97       	sbiw	r28, 0x01	; 1
    2504:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    2508:	4b 01       	movw	r8, r22
    250a:	5c 01       	movw	r10, r24
    250c:	2d a1       	ldd	r18, Y+37	; 0x25
    250e:	3e a1       	ldd	r19, Y+38	; 0x26
    2510:	4f a1       	ldd	r20, Y+39	; 0x27
    2512:	58 a5       	ldd	r21, Y+40	; 0x28
    2514:	6d a9       	ldd	r22, Y+53	; 0x35
    2516:	7e a9       	ldd	r23, Y+54	; 0x36
    2518:	8f a9       	ldd	r24, Y+55	; 0x37
    251a:	98 ad       	ldd	r25, Y+56	; 0x38
    251c:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    2520:	9b 01       	movw	r18, r22
    2522:	ac 01       	movw	r20, r24
    2524:	c5 01       	movw	r24, r10
    2526:	b4 01       	movw	r22, r8
    2528:	0e 94 60 1f 	call	0x3ec0	; 0x3ec0 <__subsf3>
    252c:	4b 01       	movw	r8, r22
    252e:	5c 01       	movw	r10, r24
    2530:	29 a5       	ldd	r18, Y+41	; 0x29
    2532:	3a a5       	ldd	r19, Y+42	; 0x2a
    2534:	4b a5       	ldd	r20, Y+43	; 0x2b
    2536:	5c a5       	ldd	r21, Y+44	; 0x2c
    2538:	6d 85       	ldd	r22, Y+13	; 0x0d
    253a:	7e 85       	ldd	r23, Y+14	; 0x0e
    253c:	8f 85       	ldd	r24, Y+15	; 0x0f
    253e:	98 89       	ldd	r25, Y+16	; 0x10
    2540:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    2544:	2b 01       	movw	r4, r22
    2546:	3c 01       	movw	r6, r24
    2548:	a7 01       	movw	r20, r14
    254a:	96 01       	movw	r18, r12
    254c:	6d 81       	ldd	r22, Y+5	; 0x05
    254e:	7e 81       	ldd	r23, Y+6	; 0x06
    2550:	8f 81       	ldd	r24, Y+7	; 0x07
    2552:	98 85       	ldd	r25, Y+8	; 0x08
    2554:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    2558:	9b 01       	movw	r18, r22
    255a:	ac 01       	movw	r20, r24
    255c:	c3 01       	movw	r24, r6
    255e:	b2 01       	movw	r22, r4
    2560:	0e 94 60 1f 	call	0x3ec0	; 0x3ec0 <__subsf3>
    2564:	9b 01       	movw	r18, r22
    2566:	ac 01       	movw	r20, r24
    2568:	c5 01       	movw	r24, r10
    256a:	b4 01       	movw	r22, r8
    256c:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <__addsf3>
    2570:	4b 01       	movw	r8, r22
    2572:	5c 01       	movw	r10, r24
		halfez = (ax * halfvy - ay * halfvx) + (mx * halfwy - my * halfwx);
    2574:	29 a1       	ldd	r18, Y+33	; 0x21
    2576:	3a a1       	ldd	r19, Y+34	; 0x22
    2578:	4b a1       	ldd	r20, Y+35	; 0x23
    257a:	5c a1       	ldd	r21, Y+36	; 0x24
    257c:	6d a9       	ldd	r22, Y+53	; 0x35
    257e:	7e a9       	ldd	r23, Y+54	; 0x36
    2580:	8f a9       	ldd	r24, Y+55	; 0x37
    2582:	98 ad       	ldd	r25, Y+56	; 0x38
    2584:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    2588:	6b 01       	movw	r12, r22
    258a:	7c 01       	movw	r14, r24
    258c:	2d 8d       	ldd	r18, Y+29	; 0x1d
    258e:	3e 8d       	ldd	r19, Y+30	; 0x1e
    2590:	4f 8d       	ldd	r20, Y+31	; 0x1f
    2592:	58 a1       	ldd	r21, Y+32	; 0x20
    2594:	69 ad       	ldd	r22, Y+57	; 0x39
    2596:	7a ad       	ldd	r23, Y+58	; 0x3a
    2598:	8b ad       	ldd	r24, Y+59	; 0x3b
    259a:	9c ad       	ldd	r25, Y+60	; 0x3c
    259c:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    25a0:	9b 01       	movw	r18, r22
    25a2:	ac 01       	movw	r20, r24
    25a4:	c7 01       	movw	r24, r14
    25a6:	b6 01       	movw	r22, r12
    25a8:	0e 94 60 1f 	call	0x3ec0	; 0x3ec0 <__subsf3>
    25ac:	6b 01       	movw	r12, r22
    25ae:	7c 01       	movw	r14, r24
    25b0:	2d a5       	ldd	r18, Y+45	; 0x2d
    25b2:	3e a5       	ldd	r19, Y+46	; 0x2e
    25b4:	4f a5       	ldd	r20, Y+47	; 0x2f
    25b6:	58 a9       	ldd	r21, Y+48	; 0x30
    25b8:	6d 81       	ldd	r22, Y+5	; 0x05
    25ba:	7e 81       	ldd	r23, Y+6	; 0x06
    25bc:	8f 81       	ldd	r24, Y+7	; 0x07
    25be:	98 85       	ldd	r25, Y+8	; 0x08
    25c0:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    25c4:	2b 01       	movw	r4, r22
    25c6:	3c 01       	movw	r6, r24
    25c8:	29 a5       	ldd	r18, Y+41	; 0x29
    25ca:	3a a5       	ldd	r19, Y+42	; 0x2a
    25cc:	4b a5       	ldd	r20, Y+43	; 0x2b
    25ce:	5c a5       	ldd	r21, Y+44	; 0x2c
    25d0:	69 85       	ldd	r22, Y+9	; 0x09
    25d2:	7a 85       	ldd	r23, Y+10	; 0x0a
    25d4:	8b 85       	ldd	r24, Y+11	; 0x0b
    25d6:	9c 85       	ldd	r25, Y+12	; 0x0c
    25d8:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    25dc:	9b 01       	movw	r18, r22
    25de:	ac 01       	movw	r20, r24
    25e0:	c3 01       	movw	r24, r6
    25e2:	b2 01       	movw	r22, r4
    25e4:	0e 94 60 1f 	call	0x3ec0	; 0x3ec0 <__subsf3>
    25e8:	9b 01       	movw	r18, r22
    25ea:	ac 01       	movw	r20, r24
    25ec:	c7 01       	movw	r24, r14
    25ee:	b6 01       	movw	r22, r12
    25f0:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <__addsf3>
    25f4:	6b 01       	movw	r12, r22
    25f6:	7c 01       	movw	r14, r24

		// Compute and apply integral feedback if enabled
		if(twoKi > 0.0) {
    25f8:	60 91 0d 21 	lds	r22, 0x210D	; 0x80210d <twoKi>
    25fc:	70 91 0e 21 	lds	r23, 0x210E	; 0x80210e <twoKi+0x1>
    2600:	80 91 0f 21 	lds	r24, 0x210F	; 0x80210f <twoKi+0x2>
    2604:	90 91 10 21 	lds	r25, 0x2110	; 0x802110 <twoKi+0x3>
    2608:	20 e0       	ldi	r18, 0x00	; 0
    260a:	30 e0       	ldi	r19, 0x00	; 0
    260c:	a9 01       	movw	r20, r18
    260e:	0e 94 de 21 	call	0x43bc	; 0x43bc <__gesf2>
    2612:	18 16       	cp	r1, r24
    2614:	0c f0       	brlt	.+2      	; 0x2618 <MahonyAHRSupdate+0x98e>
    2616:	ab c0       	rjmp	.+342    	; 0x276e <MahonyAHRSupdate+0xae4>
			integralFBx += twoKi * halfex * (1.0 / sampleFreq);	// integral error scaled by Ki
    2618:	20 91 0d 21 	lds	r18, 0x210D	; 0x80210d <twoKi>
    261c:	30 91 0e 21 	lds	r19, 0x210E	; 0x80210e <twoKi+0x1>
    2620:	40 91 0f 21 	lds	r20, 0x210F	; 0x80210f <twoKi+0x2>
    2624:	50 91 10 21 	lds	r21, 0x2110	; 0x802110 <twoKi+0x3>
    2628:	40 90 fd 20 	lds	r4, 0x20FD	; 0x8020fd <integralFBx>
    262c:	50 90 fe 20 	lds	r5, 0x20FE	; 0x8020fe <integralFBx+0x1>
    2630:	60 90 ff 20 	lds	r6, 0x20FF	; 0x8020ff <integralFBx+0x2>
    2634:	70 90 00 21 	lds	r7, 0x2100	; 0x802100 <integralFBx+0x3>
    2638:	6d 89       	ldd	r22, Y+21	; 0x15
    263a:	7e 89       	ldd	r23, Y+22	; 0x16
    263c:	8f 89       	ldd	r24, Y+23	; 0x17
    263e:	98 8d       	ldd	r25, Y+24	; 0x18
    2640:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    2644:	2a ef       	ldi	r18, 0xFA	; 250
    2646:	39 ec       	ldi	r19, 0xC9	; 201
    2648:	44 e3       	ldi	r20, 0x34	; 52
    264a:	59 e3       	ldi	r21, 0x39	; 57
    264c:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    2650:	a3 01       	movw	r20, r6
    2652:	92 01       	movw	r18, r4
    2654:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <__addsf3>
    2658:	60 93 fd 20 	sts	0x20FD, r22	; 0x8020fd <integralFBx>
    265c:	70 93 fe 20 	sts	0x20FE, r23	; 0x8020fe <integralFBx+0x1>
    2660:	80 93 ff 20 	sts	0x20FF, r24	; 0x8020ff <integralFBx+0x2>
    2664:	90 93 00 21 	sts	0x2100, r25	; 0x802100 <integralFBx+0x3>
			integralFBy += twoKi * halfey * (1.0 / sampleFreq);
    2668:	20 91 0d 21 	lds	r18, 0x210D	; 0x80210d <twoKi>
    266c:	30 91 0e 21 	lds	r19, 0x210E	; 0x80210e <twoKi+0x1>
    2670:	40 91 0f 21 	lds	r20, 0x210F	; 0x80210f <twoKi+0x2>
    2674:	50 91 10 21 	lds	r21, 0x2110	; 0x802110 <twoKi+0x3>
    2678:	40 90 f9 20 	lds	r4, 0x20F9	; 0x8020f9 <integralFBy>
    267c:	50 90 fa 20 	lds	r5, 0x20FA	; 0x8020fa <integralFBy+0x1>
    2680:	60 90 fb 20 	lds	r6, 0x20FB	; 0x8020fb <integralFBy+0x2>
    2684:	70 90 fc 20 	lds	r7, 0x20FC	; 0x8020fc <integralFBy+0x3>
    2688:	c5 01       	movw	r24, r10
    268a:	b4 01       	movw	r22, r8
    268c:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    2690:	2a ef       	ldi	r18, 0xFA	; 250
    2692:	39 ec       	ldi	r19, 0xC9	; 201
    2694:	44 e3       	ldi	r20, 0x34	; 52
    2696:	59 e3       	ldi	r21, 0x39	; 57
    2698:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    269c:	a3 01       	movw	r20, r6
    269e:	92 01       	movw	r18, r4
    26a0:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <__addsf3>
    26a4:	60 93 f9 20 	sts	0x20F9, r22	; 0x8020f9 <integralFBy>
    26a8:	70 93 fa 20 	sts	0x20FA, r23	; 0x8020fa <integralFBy+0x1>
    26ac:	80 93 fb 20 	sts	0x20FB, r24	; 0x8020fb <integralFBy+0x2>
    26b0:	90 93 fc 20 	sts	0x20FC, r25	; 0x8020fc <integralFBy+0x3>
			integralFBz += twoKi * halfez * (1.0 / sampleFreq);
    26b4:	20 91 0d 21 	lds	r18, 0x210D	; 0x80210d <twoKi>
    26b8:	30 91 0e 21 	lds	r19, 0x210E	; 0x80210e <twoKi+0x1>
    26bc:	40 91 0f 21 	lds	r20, 0x210F	; 0x80210f <twoKi+0x2>
    26c0:	50 91 10 21 	lds	r21, 0x2110	; 0x802110 <twoKi+0x3>
    26c4:	40 90 f5 20 	lds	r4, 0x20F5	; 0x8020f5 <integralFBz>
    26c8:	50 90 f6 20 	lds	r5, 0x20F6	; 0x8020f6 <integralFBz+0x1>
    26cc:	60 90 f7 20 	lds	r6, 0x20F7	; 0x8020f7 <integralFBz+0x2>
    26d0:	70 90 f8 20 	lds	r7, 0x20F8	; 0x8020f8 <integralFBz+0x3>
    26d4:	c7 01       	movw	r24, r14
    26d6:	b6 01       	movw	r22, r12
    26d8:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    26dc:	2a ef       	ldi	r18, 0xFA	; 250
    26de:	39 ec       	ldi	r19, 0xC9	; 201
    26e0:	44 e3       	ldi	r20, 0x34	; 52
    26e2:	59 e3       	ldi	r21, 0x39	; 57
    26e4:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    26e8:	a3 01       	movw	r20, r6
    26ea:	92 01       	movw	r18, r4
    26ec:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <__addsf3>
    26f0:	60 93 f5 20 	sts	0x20F5, r22	; 0x8020f5 <integralFBz>
    26f4:	70 93 f6 20 	sts	0x20F6, r23	; 0x8020f6 <integralFBz+0x1>
    26f8:	80 93 f7 20 	sts	0x20F7, r24	; 0x8020f7 <integralFBz+0x2>
    26fc:	90 93 f8 20 	sts	0x20F8, r25	; 0x8020f8 <integralFBz+0x3>
			gx += integralFBx;	// apply integral feedback
    2700:	20 91 fd 20 	lds	r18, 0x20FD	; 0x8020fd <integralFBx>
    2704:	30 91 fe 20 	lds	r19, 0x20FE	; 0x8020fe <integralFBx+0x1>
    2708:	40 91 ff 20 	lds	r20, 0x20FF	; 0x8020ff <integralFBx+0x2>
    270c:	50 91 00 21 	lds	r21, 0x2100	; 0x802100 <integralFBx+0x3>
    2710:	69 89       	ldd	r22, Y+17	; 0x11
    2712:	7a 89       	ldd	r23, Y+18	; 0x12
    2714:	8b 89       	ldd	r24, Y+19	; 0x13
    2716:	9c 89       	ldd	r25, Y+20	; 0x14
    2718:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <__addsf3>
    271c:	69 8b       	std	Y+17, r22	; 0x11
    271e:	7a 8b       	std	Y+18, r23	; 0x12
    2720:	8b 8b       	std	Y+19, r24	; 0x13
    2722:	9c 8b       	std	Y+20, r25	; 0x14
			gy += integralFBy;
    2724:	20 91 f9 20 	lds	r18, 0x20F9	; 0x8020f9 <integralFBy>
    2728:	30 91 fa 20 	lds	r19, 0x20FA	; 0x8020fa <integralFBy+0x1>
    272c:	40 91 fb 20 	lds	r20, 0x20FB	; 0x8020fb <integralFBy+0x2>
    2730:	50 91 fc 20 	lds	r21, 0x20FC	; 0x8020fc <integralFBy+0x3>
    2734:	69 8d       	ldd	r22, Y+25	; 0x19
    2736:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2738:	8b 8d       	ldd	r24, Y+27	; 0x1b
    273a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    273c:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <__addsf3>
    2740:	69 8f       	std	Y+25, r22	; 0x19
    2742:	7a 8f       	std	Y+26, r23	; 0x1a
    2744:	8b 8f       	std	Y+27, r24	; 0x1b
    2746:	9c 8f       	std	Y+28, r25	; 0x1c
			gz += integralFBz;
    2748:	20 91 f5 20 	lds	r18, 0x20F5	; 0x8020f5 <integralFBz>
    274c:	30 91 f6 20 	lds	r19, 0x20F6	; 0x8020f6 <integralFBz+0x1>
    2750:	40 91 f7 20 	lds	r20, 0x20F7	; 0x8020f7 <integralFBz+0x2>
    2754:	50 91 f8 20 	lds	r21, 0x20F8	; 0x8020f8 <integralFBz+0x3>
    2758:	69 81       	ldd	r22, Y+1	; 0x01
    275a:	7a 81       	ldd	r23, Y+2	; 0x02
    275c:	8b 81       	ldd	r24, Y+3	; 0x03
    275e:	9c 81       	ldd	r25, Y+4	; 0x04
    2760:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <__addsf3>
    2764:	69 83       	std	Y+1, r22	; 0x01
    2766:	7a 83       	std	Y+2, r23	; 0x02
    2768:	8b 83       	std	Y+3, r24	; 0x03
    276a:	9c 83       	std	Y+4, r25	; 0x04
    276c:	18 c0       	rjmp	.+48     	; 0x279e <MahonyAHRSupdate+0xb14>
		}
		else {
			integralFBx = 0.0;	// prevent integral windup
    276e:	10 92 fd 20 	sts	0x20FD, r1	; 0x8020fd <integralFBx>
    2772:	10 92 fe 20 	sts	0x20FE, r1	; 0x8020fe <integralFBx+0x1>
    2776:	10 92 ff 20 	sts	0x20FF, r1	; 0x8020ff <integralFBx+0x2>
    277a:	10 92 00 21 	sts	0x2100, r1	; 0x802100 <integralFBx+0x3>
			integralFBy = 0.0;
    277e:	10 92 f9 20 	sts	0x20F9, r1	; 0x8020f9 <integralFBy>
    2782:	10 92 fa 20 	sts	0x20FA, r1	; 0x8020fa <integralFBy+0x1>
    2786:	10 92 fb 20 	sts	0x20FB, r1	; 0x8020fb <integralFBy+0x2>
    278a:	10 92 fc 20 	sts	0x20FC, r1	; 0x8020fc <integralFBy+0x3>
			integralFBz = 0.0;
    278e:	10 92 f5 20 	sts	0x20F5, r1	; 0x8020f5 <integralFBz>
    2792:	10 92 f6 20 	sts	0x20F6, r1	; 0x8020f6 <integralFBz+0x1>
    2796:	10 92 f7 20 	sts	0x20F7, r1	; 0x8020f7 <integralFBz+0x2>
    279a:	10 92 f8 20 	sts	0x20F8, r1	; 0x8020f8 <integralFBz+0x3>
		}

		// Apply proportional feedback
		gx += twoKp * halfex;
    279e:	20 91 18 20 	lds	r18, 0x2018	; 0x802018 <twoKp>
    27a2:	30 91 19 20 	lds	r19, 0x2019	; 0x802019 <twoKp+0x1>
    27a6:	40 91 1a 20 	lds	r20, 0x201A	; 0x80201a <twoKp+0x2>
    27aa:	50 91 1b 20 	lds	r21, 0x201B	; 0x80201b <twoKp+0x3>
    27ae:	6d 89       	ldd	r22, Y+21	; 0x15
    27b0:	7e 89       	ldd	r23, Y+22	; 0x16
    27b2:	8f 89       	ldd	r24, Y+23	; 0x17
    27b4:	98 8d       	ldd	r25, Y+24	; 0x18
    27b6:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    27ba:	9b 01       	movw	r18, r22
    27bc:	ac 01       	movw	r20, r24
    27be:	69 89       	ldd	r22, Y+17	; 0x11
    27c0:	7a 89       	ldd	r23, Y+18	; 0x12
    27c2:	8b 89       	ldd	r24, Y+19	; 0x13
    27c4:	9c 89       	ldd	r25, Y+20	; 0x14
    27c6:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <__addsf3>
    27ca:	69 8b       	std	Y+17, r22	; 0x11
    27cc:	7a 8b       	std	Y+18, r23	; 0x12
    27ce:	8b 8b       	std	Y+19, r24	; 0x13
    27d0:	9c 8b       	std	Y+20, r25	; 0x14
		gy += twoKp * halfey;
    27d2:	20 91 18 20 	lds	r18, 0x2018	; 0x802018 <twoKp>
    27d6:	30 91 19 20 	lds	r19, 0x2019	; 0x802019 <twoKp+0x1>
    27da:	40 91 1a 20 	lds	r20, 0x201A	; 0x80201a <twoKp+0x2>
    27de:	50 91 1b 20 	lds	r21, 0x201B	; 0x80201b <twoKp+0x3>
    27e2:	c5 01       	movw	r24, r10
    27e4:	b4 01       	movw	r22, r8
    27e6:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    27ea:	9b 01       	movw	r18, r22
    27ec:	ac 01       	movw	r20, r24
    27ee:	69 8d       	ldd	r22, Y+25	; 0x19
    27f0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    27f2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    27f4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    27f6:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <__addsf3>
    27fa:	69 8f       	std	Y+25, r22	; 0x19
    27fc:	7a 8f       	std	Y+26, r23	; 0x1a
    27fe:	8b 8f       	std	Y+27, r24	; 0x1b
    2800:	9c 8f       	std	Y+28, r25	; 0x1c
		gz += twoKp * halfez;
    2802:	20 91 18 20 	lds	r18, 0x2018	; 0x802018 <twoKp>
    2806:	30 91 19 20 	lds	r19, 0x2019	; 0x802019 <twoKp+0x1>
    280a:	40 91 1a 20 	lds	r20, 0x201A	; 0x80201a <twoKp+0x2>
    280e:	50 91 1b 20 	lds	r21, 0x201B	; 0x80201b <twoKp+0x3>
    2812:	c7 01       	movw	r24, r14
    2814:	b6 01       	movw	r22, r12
    2816:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    281a:	9b 01       	movw	r18, r22
    281c:	ac 01       	movw	r20, r24
    281e:	69 81       	ldd	r22, Y+1	; 0x01
    2820:	7a 81       	ldd	r23, Y+2	; 0x02
    2822:	8b 81       	ldd	r24, Y+3	; 0x03
    2824:	9c 81       	ldd	r25, Y+4	; 0x04
    2826:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <__addsf3>
    282a:	69 83       	std	Y+1, r22	; 0x01
    282c:	7a 83       	std	Y+2, r23	; 0x02
    282e:	8b 83       	std	Y+3, r24	; 0x03
    2830:	9c 83       	std	Y+4, r25	; 0x04
	}
	
	// Integrate rate of change of quaternion
	gx *= (0.5 * (1.0 / sampleFreq));		// pre-multiply common factors
    2832:	2a ef       	ldi	r18, 0xFA	; 250
    2834:	39 ec       	ldi	r19, 0xC9	; 201
    2836:	44 eb       	ldi	r20, 0xB4	; 180
    2838:	58 e3       	ldi	r21, 0x38	; 56
    283a:	69 89       	ldd	r22, Y+17	; 0x11
    283c:	7a 89       	ldd	r23, Y+18	; 0x12
    283e:	8b 89       	ldd	r24, Y+19	; 0x13
    2840:	9c 89       	ldd	r25, Y+20	; 0x14
    2842:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    2846:	6d 83       	std	Y+5, r22	; 0x05
    2848:	7e 83       	std	Y+6, r23	; 0x06
    284a:	8f 83       	std	Y+7, r24	; 0x07
    284c:	98 87       	std	Y+8, r25	; 0x08
	gy *= (0.5 * (1.0 / sampleFreq));
    284e:	2a ef       	ldi	r18, 0xFA	; 250
    2850:	39 ec       	ldi	r19, 0xC9	; 201
    2852:	44 eb       	ldi	r20, 0xB4	; 180
    2854:	58 e3       	ldi	r21, 0x38	; 56
    2856:	69 8d       	ldd	r22, Y+25	; 0x19
    2858:	7a 8d       	ldd	r23, Y+26	; 0x1a
    285a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    285c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    285e:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    2862:	69 87       	std	Y+9, r22	; 0x09
    2864:	7a 87       	std	Y+10, r23	; 0x0a
    2866:	8b 87       	std	Y+11, r24	; 0x0b
    2868:	9c 87       	std	Y+12, r25	; 0x0c
	gz *= (0.5 * (1.0 / sampleFreq));
    286a:	2a ef       	ldi	r18, 0xFA	; 250
    286c:	39 ec       	ldi	r19, 0xC9	; 201
    286e:	44 eb       	ldi	r20, 0xB4	; 180
    2870:	58 e3       	ldi	r21, 0x38	; 56
    2872:	69 81       	ldd	r22, Y+1	; 0x01
    2874:	7a 81       	ldd	r23, Y+2	; 0x02
    2876:	8b 81       	ldd	r24, Y+3	; 0x03
    2878:	9c 81       	ldd	r25, Y+4	; 0x04
    287a:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    287e:	6d 87       	std	Y+13, r22	; 0x0d
    2880:	7e 87       	std	Y+14, r23	; 0x0e
    2882:	8f 87       	std	Y+15, r24	; 0x0f
    2884:	98 8b       	std	Y+16, r25	; 0x10
	qa = q0;
    2886:	e0 90 14 20 	lds	r14, 0x2014	; 0x802014 <q0>
    288a:	f0 90 15 20 	lds	r15, 0x2015	; 0x802015 <q0+0x1>
    288e:	00 91 16 20 	lds	r16, 0x2016	; 0x802016 <q0+0x2>
    2892:	10 91 17 20 	lds	r17, 0x2017	; 0x802017 <q0+0x3>
    2896:	e9 8a       	std	Y+17, r14	; 0x11
    2898:	fa 8a       	std	Y+18, r15	; 0x12
    289a:	0b 8b       	std	Y+19, r16	; 0x13
    289c:	1c 8b       	std	Y+20, r17	; 0x14
	qb = q1;
    289e:	80 90 09 21 	lds	r8, 0x2109	; 0x802109 <q1>
    28a2:	90 90 0a 21 	lds	r9, 0x210A	; 0x80210a <q1+0x1>
    28a6:	a0 90 0b 21 	lds	r10, 0x210B	; 0x80210b <q1+0x2>
    28aa:	b0 90 0c 21 	lds	r11, 0x210C	; 0x80210c <q1+0x3>
	qc = q2;
    28ae:	e0 90 05 21 	lds	r14, 0x2105	; 0x802105 <q2>
    28b2:	f0 90 06 21 	lds	r15, 0x2106	; 0x802106 <q2+0x1>
    28b6:	00 91 07 21 	lds	r16, 0x2107	; 0x802107 <q2+0x2>
    28ba:	10 91 08 21 	lds	r17, 0x2108	; 0x802108 <q2+0x3>
    28be:	e9 8e       	std	Y+25, r14	; 0x19
    28c0:	fa 8e       	std	Y+26, r15	; 0x1a
    28c2:	0b 8f       	std	Y+27, r16	; 0x1b
    28c4:	1c 8f       	std	Y+28, r17	; 0x1c
	q0 += (-qb * gx - qc * gy - q3 * gz);
    28c6:	40 90 01 21 	lds	r4, 0x2101	; 0x802101 <q3>
    28ca:	50 90 02 21 	lds	r5, 0x2102	; 0x802102 <q3+0x1>
    28ce:	60 90 03 21 	lds	r6, 0x2103	; 0x802103 <q3+0x2>
    28d2:	70 90 04 21 	lds	r7, 0x2104	; 0x802104 <q3+0x3>
    28d6:	c0 90 14 20 	lds	r12, 0x2014	; 0x802014 <q0>
    28da:	d0 90 15 20 	lds	r13, 0x2015	; 0x802015 <q0+0x1>
    28de:	e0 90 16 20 	lds	r14, 0x2016	; 0x802016 <q0+0x2>
    28e2:	f0 90 17 20 	lds	r15, 0x2017	; 0x802017 <q0+0x3>
    28e6:	c5 01       	movw	r24, r10
    28e8:	b4 01       	movw	r22, r8
    28ea:	90 58       	subi	r25, 0x80	; 128
    28ec:	2d 81       	ldd	r18, Y+5	; 0x05
    28ee:	3e 81       	ldd	r19, Y+6	; 0x06
    28f0:	4f 81       	ldd	r20, Y+7	; 0x07
    28f2:	58 85       	ldd	r21, Y+8	; 0x08
    28f4:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    28f8:	69 83       	std	Y+1, r22	; 0x01
    28fa:	7a 83       	std	Y+2, r23	; 0x02
    28fc:	8b 83       	std	Y+3, r24	; 0x03
    28fe:	9c 83       	std	Y+4, r25	; 0x04
    2900:	29 8d       	ldd	r18, Y+25	; 0x19
    2902:	3a 8d       	ldd	r19, Y+26	; 0x1a
    2904:	4b 8d       	ldd	r20, Y+27	; 0x1b
    2906:	5c 8d       	ldd	r21, Y+28	; 0x1c
    2908:	69 85       	ldd	r22, Y+9	; 0x09
    290a:	7a 85       	ldd	r23, Y+10	; 0x0a
    290c:	8b 85       	ldd	r24, Y+11	; 0x0b
    290e:	9c 85       	ldd	r25, Y+12	; 0x0c
    2910:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    2914:	9b 01       	movw	r18, r22
    2916:	ac 01       	movw	r20, r24
    2918:	69 81       	ldd	r22, Y+1	; 0x01
    291a:	7a 81       	ldd	r23, Y+2	; 0x02
    291c:	8b 81       	ldd	r24, Y+3	; 0x03
    291e:	9c 81       	ldd	r25, Y+4	; 0x04
    2920:	0e 94 60 1f 	call	0x3ec0	; 0x3ec0 <__subsf3>
    2924:	69 83       	std	Y+1, r22	; 0x01
    2926:	7a 83       	std	Y+2, r23	; 0x02
    2928:	8b 83       	std	Y+3, r24	; 0x03
    292a:	9c 83       	std	Y+4, r25	; 0x04
    292c:	a3 01       	movw	r20, r6
    292e:	92 01       	movw	r18, r4
    2930:	6d 85       	ldd	r22, Y+13	; 0x0d
    2932:	7e 85       	ldd	r23, Y+14	; 0x0e
    2934:	8f 85       	ldd	r24, Y+15	; 0x0f
    2936:	98 89       	ldd	r25, Y+16	; 0x10
    2938:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    293c:	9b 01       	movw	r18, r22
    293e:	ac 01       	movw	r20, r24
    2940:	69 81       	ldd	r22, Y+1	; 0x01
    2942:	7a 81       	ldd	r23, Y+2	; 0x02
    2944:	8b 81       	ldd	r24, Y+3	; 0x03
    2946:	9c 81       	ldd	r25, Y+4	; 0x04
    2948:	0e 94 60 1f 	call	0x3ec0	; 0x3ec0 <__subsf3>
    294c:	a7 01       	movw	r20, r14
    294e:	96 01       	movw	r18, r12
    2950:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <__addsf3>
    2954:	60 93 14 20 	sts	0x2014, r22	; 0x802014 <q0>
    2958:	70 93 15 20 	sts	0x2015, r23	; 0x802015 <q0+0x1>
    295c:	80 93 16 20 	sts	0x2016, r24	; 0x802016 <q0+0x2>
    2960:	90 93 17 20 	sts	0x2017, r25	; 0x802017 <q0+0x3>
	q1 += (qa * gx + qc * gz - q3 * gy);
    2964:	40 90 01 21 	lds	r4, 0x2101	; 0x802101 <q3>
    2968:	50 90 02 21 	lds	r5, 0x2102	; 0x802102 <q3+0x1>
    296c:	60 90 03 21 	lds	r6, 0x2103	; 0x802103 <q3+0x2>
    2970:	70 90 04 21 	lds	r7, 0x2104	; 0x802104 <q3+0x3>
    2974:	c0 90 09 21 	lds	r12, 0x2109	; 0x802109 <q1>
    2978:	d0 90 0a 21 	lds	r13, 0x210A	; 0x80210a <q1+0x1>
    297c:	e0 90 0b 21 	lds	r14, 0x210B	; 0x80210b <q1+0x2>
    2980:	f0 90 0c 21 	lds	r15, 0x210C	; 0x80210c <q1+0x3>
    2984:	29 89       	ldd	r18, Y+17	; 0x11
    2986:	3a 89       	ldd	r19, Y+18	; 0x12
    2988:	4b 89       	ldd	r20, Y+19	; 0x13
    298a:	5c 89       	ldd	r21, Y+20	; 0x14
    298c:	6d 81       	ldd	r22, Y+5	; 0x05
    298e:	7e 81       	ldd	r23, Y+6	; 0x06
    2990:	8f 81       	ldd	r24, Y+7	; 0x07
    2992:	98 85       	ldd	r25, Y+8	; 0x08
    2994:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    2998:	69 83       	std	Y+1, r22	; 0x01
    299a:	7a 83       	std	Y+2, r23	; 0x02
    299c:	8b 83       	std	Y+3, r24	; 0x03
    299e:	9c 83       	std	Y+4, r25	; 0x04
    29a0:	29 8d       	ldd	r18, Y+25	; 0x19
    29a2:	3a 8d       	ldd	r19, Y+26	; 0x1a
    29a4:	4b 8d       	ldd	r20, Y+27	; 0x1b
    29a6:	5c 8d       	ldd	r21, Y+28	; 0x1c
    29a8:	6d 85       	ldd	r22, Y+13	; 0x0d
    29aa:	7e 85       	ldd	r23, Y+14	; 0x0e
    29ac:	8f 85       	ldd	r24, Y+15	; 0x0f
    29ae:	98 89       	ldd	r25, Y+16	; 0x10
    29b0:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    29b4:	9b 01       	movw	r18, r22
    29b6:	ac 01       	movw	r20, r24
    29b8:	69 81       	ldd	r22, Y+1	; 0x01
    29ba:	7a 81       	ldd	r23, Y+2	; 0x02
    29bc:	8b 81       	ldd	r24, Y+3	; 0x03
    29be:	9c 81       	ldd	r25, Y+4	; 0x04
    29c0:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <__addsf3>
    29c4:	69 83       	std	Y+1, r22	; 0x01
    29c6:	7a 83       	std	Y+2, r23	; 0x02
    29c8:	8b 83       	std	Y+3, r24	; 0x03
    29ca:	9c 83       	std	Y+4, r25	; 0x04
    29cc:	a3 01       	movw	r20, r6
    29ce:	92 01       	movw	r18, r4
    29d0:	69 85       	ldd	r22, Y+9	; 0x09
    29d2:	7a 85       	ldd	r23, Y+10	; 0x0a
    29d4:	8b 85       	ldd	r24, Y+11	; 0x0b
    29d6:	9c 85       	ldd	r25, Y+12	; 0x0c
    29d8:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    29dc:	9b 01       	movw	r18, r22
    29de:	ac 01       	movw	r20, r24
    29e0:	69 81       	ldd	r22, Y+1	; 0x01
    29e2:	7a 81       	ldd	r23, Y+2	; 0x02
    29e4:	8b 81       	ldd	r24, Y+3	; 0x03
    29e6:	9c 81       	ldd	r25, Y+4	; 0x04
    29e8:	0e 94 60 1f 	call	0x3ec0	; 0x3ec0 <__subsf3>
    29ec:	a7 01       	movw	r20, r14
    29ee:	96 01       	movw	r18, r12
    29f0:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <__addsf3>
    29f4:	60 93 09 21 	sts	0x2109, r22	; 0x802109 <q1>
    29f8:	70 93 0a 21 	sts	0x210A, r23	; 0x80210a <q1+0x1>
    29fc:	80 93 0b 21 	sts	0x210B, r24	; 0x80210b <q1+0x2>
    2a00:	90 93 0c 21 	sts	0x210C, r25	; 0x80210c <q1+0x3>
	q2 += (qa * gy - qb * gz + q3 * gx);
    2a04:	40 90 01 21 	lds	r4, 0x2101	; 0x802101 <q3>
    2a08:	50 90 02 21 	lds	r5, 0x2102	; 0x802102 <q3+0x1>
    2a0c:	60 90 03 21 	lds	r6, 0x2103	; 0x802103 <q3+0x2>
    2a10:	70 90 04 21 	lds	r7, 0x2104	; 0x802104 <q3+0x3>
    2a14:	c0 90 05 21 	lds	r12, 0x2105	; 0x802105 <q2>
    2a18:	d0 90 06 21 	lds	r13, 0x2106	; 0x802106 <q2+0x1>
    2a1c:	e0 90 07 21 	lds	r14, 0x2107	; 0x802107 <q2+0x2>
    2a20:	f0 90 08 21 	lds	r15, 0x2108	; 0x802108 <q2+0x3>
    2a24:	29 89       	ldd	r18, Y+17	; 0x11
    2a26:	3a 89       	ldd	r19, Y+18	; 0x12
    2a28:	4b 89       	ldd	r20, Y+19	; 0x13
    2a2a:	5c 89       	ldd	r21, Y+20	; 0x14
    2a2c:	69 85       	ldd	r22, Y+9	; 0x09
    2a2e:	7a 85       	ldd	r23, Y+10	; 0x0a
    2a30:	8b 85       	ldd	r24, Y+11	; 0x0b
    2a32:	9c 85       	ldd	r25, Y+12	; 0x0c
    2a34:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    2a38:	69 83       	std	Y+1, r22	; 0x01
    2a3a:	7a 83       	std	Y+2, r23	; 0x02
    2a3c:	8b 83       	std	Y+3, r24	; 0x03
    2a3e:	9c 83       	std	Y+4, r25	; 0x04
    2a40:	a5 01       	movw	r20, r10
    2a42:	94 01       	movw	r18, r8
    2a44:	6d 85       	ldd	r22, Y+13	; 0x0d
    2a46:	7e 85       	ldd	r23, Y+14	; 0x0e
    2a48:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a4a:	98 89       	ldd	r25, Y+16	; 0x10
    2a4c:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    2a50:	9b 01       	movw	r18, r22
    2a52:	ac 01       	movw	r20, r24
    2a54:	69 81       	ldd	r22, Y+1	; 0x01
    2a56:	7a 81       	ldd	r23, Y+2	; 0x02
    2a58:	8b 81       	ldd	r24, Y+3	; 0x03
    2a5a:	9c 81       	ldd	r25, Y+4	; 0x04
    2a5c:	0e 94 60 1f 	call	0x3ec0	; 0x3ec0 <__subsf3>
    2a60:	69 83       	std	Y+1, r22	; 0x01
    2a62:	7a 83       	std	Y+2, r23	; 0x02
    2a64:	8b 83       	std	Y+3, r24	; 0x03
    2a66:	9c 83       	std	Y+4, r25	; 0x04
    2a68:	a3 01       	movw	r20, r6
    2a6a:	92 01       	movw	r18, r4
    2a6c:	6d 81       	ldd	r22, Y+5	; 0x05
    2a6e:	7e 81       	ldd	r23, Y+6	; 0x06
    2a70:	8f 81       	ldd	r24, Y+7	; 0x07
    2a72:	98 85       	ldd	r25, Y+8	; 0x08
    2a74:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    2a78:	9b 01       	movw	r18, r22
    2a7a:	ac 01       	movw	r20, r24
    2a7c:	69 81       	ldd	r22, Y+1	; 0x01
    2a7e:	7a 81       	ldd	r23, Y+2	; 0x02
    2a80:	8b 81       	ldd	r24, Y+3	; 0x03
    2a82:	9c 81       	ldd	r25, Y+4	; 0x04
    2a84:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <__addsf3>
    2a88:	a7 01       	movw	r20, r14
    2a8a:	96 01       	movw	r18, r12
    2a8c:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <__addsf3>
    2a90:	60 93 05 21 	sts	0x2105, r22	; 0x802105 <q2>
    2a94:	70 93 06 21 	sts	0x2106, r23	; 0x802106 <q2+0x1>
    2a98:	80 93 07 21 	sts	0x2107, r24	; 0x802107 <q2+0x2>
    2a9c:	90 93 08 21 	sts	0x2108, r25	; 0x802108 <q2+0x3>
	q3 += (qa * gz + qb * gy - qc * gx); 
    2aa0:	c0 90 01 21 	lds	r12, 0x2101	; 0x802101 <q3>
    2aa4:	d0 90 02 21 	lds	r13, 0x2102	; 0x802102 <q3+0x1>
    2aa8:	e0 90 03 21 	lds	r14, 0x2103	; 0x802103 <q3+0x2>
    2aac:	f0 90 04 21 	lds	r15, 0x2104	; 0x802104 <q3+0x3>
    2ab0:	29 89       	ldd	r18, Y+17	; 0x11
    2ab2:	3a 89       	ldd	r19, Y+18	; 0x12
    2ab4:	4b 89       	ldd	r20, Y+19	; 0x13
    2ab6:	5c 89       	ldd	r21, Y+20	; 0x14
    2ab8:	6d 85       	ldd	r22, Y+13	; 0x0d
    2aba:	7e 85       	ldd	r23, Y+14	; 0x0e
    2abc:	8f 85       	ldd	r24, Y+15	; 0x0f
    2abe:	98 89       	ldd	r25, Y+16	; 0x10
    2ac0:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    2ac4:	2b 01       	movw	r4, r22
    2ac6:	3c 01       	movw	r6, r24
    2ac8:	a5 01       	movw	r20, r10
    2aca:	94 01       	movw	r18, r8
    2acc:	69 85       	ldd	r22, Y+9	; 0x09
    2ace:	7a 85       	ldd	r23, Y+10	; 0x0a
    2ad0:	8b 85       	ldd	r24, Y+11	; 0x0b
    2ad2:	9c 85       	ldd	r25, Y+12	; 0x0c
    2ad4:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    2ad8:	9b 01       	movw	r18, r22
    2ada:	ac 01       	movw	r20, r24
    2adc:	c3 01       	movw	r24, r6
    2ade:	b2 01       	movw	r22, r4
    2ae0:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <__addsf3>
    2ae4:	4b 01       	movw	r8, r22
    2ae6:	5c 01       	movw	r10, r24
    2ae8:	29 8d       	ldd	r18, Y+25	; 0x19
    2aea:	3a 8d       	ldd	r19, Y+26	; 0x1a
    2aec:	4b 8d       	ldd	r20, Y+27	; 0x1b
    2aee:	5c 8d       	ldd	r21, Y+28	; 0x1c
    2af0:	6d 81       	ldd	r22, Y+5	; 0x05
    2af2:	7e 81       	ldd	r23, Y+6	; 0x06
    2af4:	8f 81       	ldd	r24, Y+7	; 0x07
    2af6:	98 85       	ldd	r25, Y+8	; 0x08
    2af8:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    2afc:	9b 01       	movw	r18, r22
    2afe:	ac 01       	movw	r20, r24
    2b00:	c5 01       	movw	r24, r10
    2b02:	b4 01       	movw	r22, r8
    2b04:	0e 94 60 1f 	call	0x3ec0	; 0x3ec0 <__subsf3>
    2b08:	a7 01       	movw	r20, r14
    2b0a:	96 01       	movw	r18, r12
    2b0c:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <__addsf3>
    2b10:	60 93 01 21 	sts	0x2101, r22	; 0x802101 <q3>
    2b14:	70 93 02 21 	sts	0x2102, r23	; 0x802102 <q3+0x1>
    2b18:	80 93 03 21 	sts	0x2103, r24	; 0x802103 <q3+0x2>
    2b1c:	90 93 04 21 	sts	0x2104, r25	; 0x802104 <q3+0x3>
	
	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
    2b20:	60 91 14 20 	lds	r22, 0x2014	; 0x802014 <q0>
    2b24:	70 91 15 20 	lds	r23, 0x2015	; 0x802015 <q0+0x1>
    2b28:	80 91 16 20 	lds	r24, 0x2016	; 0x802016 <q0+0x2>
    2b2c:	90 91 17 20 	lds	r25, 0x2017	; 0x802017 <q0+0x3>
    2b30:	20 91 14 20 	lds	r18, 0x2014	; 0x802014 <q0>
    2b34:	30 91 15 20 	lds	r19, 0x2015	; 0x802015 <q0+0x1>
    2b38:	40 91 16 20 	lds	r20, 0x2016	; 0x802016 <q0+0x2>
    2b3c:	50 91 17 20 	lds	r21, 0x2017	; 0x802017 <q0+0x3>
    2b40:	80 90 09 21 	lds	r8, 0x2109	; 0x802109 <q1>
    2b44:	90 90 0a 21 	lds	r9, 0x210A	; 0x80210a <q1+0x1>
    2b48:	a0 90 0b 21 	lds	r10, 0x210B	; 0x80210b <q1+0x2>
    2b4c:	b0 90 0c 21 	lds	r11, 0x210C	; 0x80210c <q1+0x3>
    2b50:	40 90 09 21 	lds	r4, 0x2109	; 0x802109 <q1>
    2b54:	50 90 0a 21 	lds	r5, 0x210A	; 0x80210a <q1+0x1>
    2b58:	60 90 0b 21 	lds	r6, 0x210B	; 0x80210b <q1+0x2>
    2b5c:	70 90 0c 21 	lds	r7, 0x210C	; 0x80210c <q1+0x3>
    2b60:	e0 90 05 21 	lds	r14, 0x2105	; 0x802105 <q2>
    2b64:	f0 90 06 21 	lds	r15, 0x2106	; 0x802106 <q2+0x1>
    2b68:	00 91 07 21 	lds	r16, 0x2107	; 0x802107 <q2+0x2>
    2b6c:	10 91 08 21 	lds	r17, 0x2108	; 0x802108 <q2+0x3>
    2b70:	ed 82       	std	Y+5, r14	; 0x05
    2b72:	fe 82       	std	Y+6, r15	; 0x06
    2b74:	0f 83       	std	Y+7, r16	; 0x07
    2b76:	18 87       	std	Y+8, r17	; 0x08
    2b78:	e0 90 05 21 	lds	r14, 0x2105	; 0x802105 <q2>
    2b7c:	f0 90 06 21 	lds	r15, 0x2106	; 0x802106 <q2+0x1>
    2b80:	00 91 07 21 	lds	r16, 0x2107	; 0x802107 <q2+0x2>
    2b84:	10 91 08 21 	lds	r17, 0x2108	; 0x802108 <q2+0x3>
    2b88:	e9 86       	std	Y+9, r14	; 0x09
    2b8a:	fa 86       	std	Y+10, r15	; 0x0a
    2b8c:	0b 87       	std	Y+11, r16	; 0x0b
    2b8e:	1c 87       	std	Y+12, r17	; 0x0c
    2b90:	e0 90 01 21 	lds	r14, 0x2101	; 0x802101 <q3>
    2b94:	f0 90 02 21 	lds	r15, 0x2102	; 0x802102 <q3+0x1>
    2b98:	00 91 03 21 	lds	r16, 0x2103	; 0x802103 <q3+0x2>
    2b9c:	10 91 04 21 	lds	r17, 0x2104	; 0x802104 <q3+0x3>
    2ba0:	e9 82       	std	Y+1, r14	; 0x01
    2ba2:	fa 82       	std	Y+2, r15	; 0x02
    2ba4:	0b 83       	std	Y+3, r16	; 0x03
    2ba6:	1c 83       	std	Y+4, r17	; 0x04
    2ba8:	e0 90 01 21 	lds	r14, 0x2101	; 0x802101 <q3>
    2bac:	f0 90 02 21 	lds	r15, 0x2102	; 0x802102 <q3+0x1>
    2bb0:	00 91 03 21 	lds	r16, 0x2103	; 0x802103 <q3+0x2>
    2bb4:	10 91 04 21 	lds	r17, 0x2104	; 0x802104 <q3+0x3>
    2bb8:	ed 86       	std	Y+13, r14	; 0x0d
    2bba:	fe 86       	std	Y+14, r15	; 0x0e
    2bbc:	0f 87       	std	Y+15, r16	; 0x0f
    2bbe:	18 8b       	std	Y+16, r17	; 0x10
    2bc0:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    2bc4:	6b 01       	movw	r12, r22
    2bc6:	7c 01       	movw	r14, r24
    2bc8:	a3 01       	movw	r20, r6
    2bca:	92 01       	movw	r18, r4
    2bcc:	c5 01       	movw	r24, r10
    2bce:	b4 01       	movw	r22, r8
    2bd0:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    2bd4:	9b 01       	movw	r18, r22
    2bd6:	ac 01       	movw	r20, r24
    2bd8:	c7 01       	movw	r24, r14
    2bda:	b6 01       	movw	r22, r12
    2bdc:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <__addsf3>
    2be0:	4b 01       	movw	r8, r22
    2be2:	5c 01       	movw	r10, r24
    2be4:	29 85       	ldd	r18, Y+9	; 0x09
    2be6:	3a 85       	ldd	r19, Y+10	; 0x0a
    2be8:	4b 85       	ldd	r20, Y+11	; 0x0b
    2bea:	5c 85       	ldd	r21, Y+12	; 0x0c
    2bec:	6d 81       	ldd	r22, Y+5	; 0x05
    2bee:	7e 81       	ldd	r23, Y+6	; 0x06
    2bf0:	8f 81       	ldd	r24, Y+7	; 0x07
    2bf2:	98 85       	ldd	r25, Y+8	; 0x08
    2bf4:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    2bf8:	9b 01       	movw	r18, r22
    2bfa:	ac 01       	movw	r20, r24
    2bfc:	c5 01       	movw	r24, r10
    2bfe:	b4 01       	movw	r22, r8
    2c00:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <__addsf3>
    2c04:	4b 01       	movw	r8, r22
    2c06:	5c 01       	movw	r10, r24
    2c08:	2d 85       	ldd	r18, Y+13	; 0x0d
    2c0a:	3e 85       	ldd	r19, Y+14	; 0x0e
    2c0c:	4f 85       	ldd	r20, Y+15	; 0x0f
    2c0e:	58 89       	ldd	r21, Y+16	; 0x10
    2c10:	69 81       	ldd	r22, Y+1	; 0x01
    2c12:	7a 81       	ldd	r23, Y+2	; 0x02
    2c14:	8b 81       	ldd	r24, Y+3	; 0x03
    2c16:	9c 81       	ldd	r25, Y+4	; 0x04
    2c18:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    2c1c:	9b 01       	movw	r18, r22
    2c1e:	ac 01       	movw	r20, r24
    2c20:	c5 01       	movw	r24, r10
    2c22:	b4 01       	movw	r22, r8
    2c24:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <__addsf3>
    2c28:	0e 94 09 09 	call	0x1212	; 0x1212 <invSqrt>
    2c2c:	6b 01       	movw	r12, r22
    2c2e:	7c 01       	movw	r14, r24
	q0 *= recipNorm;
    2c30:	20 91 14 20 	lds	r18, 0x2014	; 0x802014 <q0>
    2c34:	30 91 15 20 	lds	r19, 0x2015	; 0x802015 <q0+0x1>
    2c38:	40 91 16 20 	lds	r20, 0x2016	; 0x802016 <q0+0x2>
    2c3c:	50 91 17 20 	lds	r21, 0x2017	; 0x802017 <q0+0x3>
    2c40:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    2c44:	60 93 14 20 	sts	0x2014, r22	; 0x802014 <q0>
    2c48:	70 93 15 20 	sts	0x2015, r23	; 0x802015 <q0+0x1>
    2c4c:	80 93 16 20 	sts	0x2016, r24	; 0x802016 <q0+0x2>
    2c50:	90 93 17 20 	sts	0x2017, r25	; 0x802017 <q0+0x3>
	q1 *= recipNorm;
    2c54:	20 91 09 21 	lds	r18, 0x2109	; 0x802109 <q1>
    2c58:	30 91 0a 21 	lds	r19, 0x210A	; 0x80210a <q1+0x1>
    2c5c:	40 91 0b 21 	lds	r20, 0x210B	; 0x80210b <q1+0x2>
    2c60:	50 91 0c 21 	lds	r21, 0x210C	; 0x80210c <q1+0x3>
    2c64:	c7 01       	movw	r24, r14
    2c66:	b6 01       	movw	r22, r12
    2c68:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    2c6c:	60 93 09 21 	sts	0x2109, r22	; 0x802109 <q1>
    2c70:	70 93 0a 21 	sts	0x210A, r23	; 0x80210a <q1+0x1>
    2c74:	80 93 0b 21 	sts	0x210B, r24	; 0x80210b <q1+0x2>
    2c78:	90 93 0c 21 	sts	0x210C, r25	; 0x80210c <q1+0x3>
	q2 *= recipNorm;
    2c7c:	20 91 05 21 	lds	r18, 0x2105	; 0x802105 <q2>
    2c80:	30 91 06 21 	lds	r19, 0x2106	; 0x802106 <q2+0x1>
    2c84:	40 91 07 21 	lds	r20, 0x2107	; 0x802107 <q2+0x2>
    2c88:	50 91 08 21 	lds	r21, 0x2108	; 0x802108 <q2+0x3>
    2c8c:	c7 01       	movw	r24, r14
    2c8e:	b6 01       	movw	r22, r12
    2c90:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    2c94:	60 93 05 21 	sts	0x2105, r22	; 0x802105 <q2>
    2c98:	70 93 06 21 	sts	0x2106, r23	; 0x802106 <q2+0x1>
    2c9c:	80 93 07 21 	sts	0x2107, r24	; 0x802107 <q2+0x2>
    2ca0:	90 93 08 21 	sts	0x2108, r25	; 0x802108 <q2+0x3>
	q3 *= recipNorm;
    2ca4:	20 91 01 21 	lds	r18, 0x2101	; 0x802101 <q3>
    2ca8:	30 91 02 21 	lds	r19, 0x2102	; 0x802102 <q3+0x1>
    2cac:	40 91 03 21 	lds	r20, 0x2103	; 0x802103 <q3+0x2>
    2cb0:	50 91 04 21 	lds	r21, 0x2104	; 0x802104 <q3+0x3>
    2cb4:	c7 01       	movw	r24, r14
    2cb6:	b6 01       	movw	r22, r12
    2cb8:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    2cbc:	60 93 01 21 	sts	0x2101, r22	; 0x802101 <q3>
    2cc0:	70 93 02 21 	sts	0x2102, r23	; 0x802102 <q3+0x1>
    2cc4:	80 93 03 21 	sts	0x2103, r24	; 0x802103 <q3+0x2>
    2cc8:	90 93 04 21 	sts	0x2104, r25	; 0x802104 <q3+0x3>
}
    2ccc:	c8 5a       	subi	r28, 0xA8	; 168
    2cce:	df 4f       	sbci	r29, 0xFF	; 255
    2cd0:	cd bf       	out	0x3d, r28	; 61
    2cd2:	de bf       	out	0x3e, r29	; 62
    2cd4:	df 91       	pop	r29
    2cd6:	cf 91       	pop	r28
    2cd8:	1f 91       	pop	r17
    2cda:	0f 91       	pop	r16
    2cdc:	ff 90       	pop	r15
    2cde:	ef 90       	pop	r14
    2ce0:	df 90       	pop	r13
    2ce2:	cf 90       	pop	r12
    2ce4:	bf 90       	pop	r11
    2ce6:	af 90       	pop	r10
    2ce8:	9f 90       	pop	r9
    2cea:	8f 90       	pop	r8
    2cec:	7f 90       	pop	r7
    2cee:	6f 90       	pop	r6
    2cf0:	5f 90       	pop	r5
    2cf2:	4f 90       	pop	r4
    2cf4:	3f 90       	pop	r3
    2cf6:	2f 90       	pop	r2
    2cf8:	08 95       	ret

00002cfa <__portable_avr_delay_cycles>:
	}
	else
	{
		return false;
	}
}
    2cfa:	04 c0       	rjmp	.+8      	; 0x2d04 <__portable_avr_delay_cycles+0xa>
    2cfc:	61 50       	subi	r22, 0x01	; 1
    2cfe:	71 09       	sbc	r23, r1
    2d00:	81 09       	sbc	r24, r1
    2d02:	91 09       	sbc	r25, r1
    2d04:	61 15       	cp	r22, r1
    2d06:	71 05       	cpc	r23, r1
    2d08:	81 05       	cpc	r24, r1
    2d0a:	91 05       	cpc	r25, r1
    2d0c:	b9 f7       	brne	.-18     	; 0x2cfc <__portable_avr_delay_cycles+0x2>
    2d0e:	08 95       	ret

00002d10 <mpu9250_ODR_init>:
    2d10:	0f 93       	push	r16
    2d12:	1f 93       	push	r17
    2d14:	8b 01       	movw	r16, r22
    2d16:	9c 01       	movw	r18, r24
    2d18:	64 2f       	mov	r22, r20
    2d1a:	70 e0       	ldi	r23, 0x00	; 0
    2d1c:	88 ee       	ldi	r24, 0xE8	; 232
    2d1e:	93 e0       	ldi	r25, 0x03	; 3
    2d20:	0e 94 a6 22 	call	0x454c	; 0x454c <__udivmodhi4>
    2d24:	ec e1       	ldi	r30, 0x1C	; 28
    2d26:	f0 e2       	ldi	r31, 0x20	; 32
    2d28:	88 e6       	ldi	r24, 0x68	; 104
    2d2a:	80 83       	st	Z, r24
    2d2c:	89 e1       	ldi	r24, 0x19	; 25
    2d2e:	81 83       	std	Z+1, r24	; 0x01
    2d30:	81 e0       	ldi	r24, 0x01	; 1
    2d32:	90 e0       	ldi	r25, 0x00	; 0
    2d34:	80 87       	std	Z+8, r24	; 0x08
    2d36:	91 87       	std	Z+9, r25	; 0x09
    2d38:	61 50       	subi	r22, 0x01	; 1
    2d3a:	60 93 23 21 	sts	0x2123, r22	; 0x802123 <mpu9250_twi_data>
    2d3e:	40 e0       	ldi	r20, 0x00	; 0
    2d40:	bf 01       	movw	r22, r30
    2d42:	c8 01       	movw	r24, r16
    2d44:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <twi_master_transfer>
    2d48:	1f 91       	pop	r17
    2d4a:	0f 91       	pop	r16
    2d4c:	08 95       	ret

00002d4e <mpu9250_gyro_init>:
    2d4e:	9f 92       	push	r9
    2d50:	af 92       	push	r10
    2d52:	bf 92       	push	r11
    2d54:	cf 92       	push	r12
    2d56:	df 92       	push	r13
    2d58:	ef 92       	push	r14
    2d5a:	ff 92       	push	r15
    2d5c:	0f 93       	push	r16
    2d5e:	1f 93       	push	r17
    2d60:	cf 93       	push	r28
    2d62:	df 93       	push	r29
    2d64:	6b 01       	movw	r12, r22
    2d66:	7c 01       	movw	r14, r24
    2d68:	cc e1       	ldi	r28, 0x1C	; 28
    2d6a:	d0 e2       	ldi	r29, 0x20	; 32
    2d6c:	0f 2e       	mov	r0, r31
    2d6e:	f8 e6       	ldi	r31, 0x68	; 104
    2d70:	9f 2e       	mov	r9, r31
    2d72:	f0 2d       	mov	r31, r0
    2d74:	98 82       	st	Y, r9
    2d76:	8a e1       	ldi	r24, 0x1A	; 26
    2d78:	89 83       	std	Y+1, r24	; 0x01
    2d7a:	aa 24       	eor	r10, r10
    2d7c:	a3 94       	inc	r10
    2d7e:	b1 2c       	mov	r11, r1
    2d80:	a8 86       	std	Y+8, r10	; 0x08
    2d82:	b9 86       	std	Y+9, r11	; 0x09
    2d84:	03 e2       	ldi	r16, 0x23	; 35
    2d86:	11 e2       	ldi	r17, 0x21	; 33
    2d88:	82 e0       	ldi	r24, 0x02	; 2
    2d8a:	f8 01       	movw	r30, r16
    2d8c:	80 83       	st	Z, r24
    2d8e:	40 e0       	ldi	r20, 0x00	; 0
    2d90:	be 01       	movw	r22, r28
    2d92:	c6 01       	movw	r24, r12
    2d94:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <twi_master_transfer>
    2d98:	98 82       	st	Y, r9
    2d9a:	8b e1       	ldi	r24, 0x1B	; 27
    2d9c:	89 83       	std	Y+1, r24	; 0x01
    2d9e:	a8 86       	std	Y+8, r10	; 0x08
    2da0:	b9 86       	std	Y+9, r11	; 0x09
    2da2:	88 e1       	ldi	r24, 0x18	; 24
    2da4:	f8 01       	movw	r30, r16
    2da6:	80 83       	st	Z, r24
    2da8:	40 e0       	ldi	r20, 0x00	; 0
    2daa:	be 01       	movw	r22, r28
    2dac:	c6 01       	movw	r24, r12
    2dae:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <twi_master_transfer>
    2db2:	df 91       	pop	r29
    2db4:	cf 91       	pop	r28
    2db6:	1f 91       	pop	r17
    2db8:	0f 91       	pop	r16
    2dba:	ff 90       	pop	r15
    2dbc:	ef 90       	pop	r14
    2dbe:	df 90       	pop	r13
    2dc0:	cf 90       	pop	r12
    2dc2:	bf 90       	pop	r11
    2dc4:	af 90       	pop	r10
    2dc6:	9f 90       	pop	r9
    2dc8:	08 95       	ret

00002dca <mpu9250_acc_init>:
    2dca:	9f 92       	push	r9
    2dcc:	af 92       	push	r10
    2dce:	bf 92       	push	r11
    2dd0:	cf 92       	push	r12
    2dd2:	df 92       	push	r13
    2dd4:	ef 92       	push	r14
    2dd6:	ff 92       	push	r15
    2dd8:	0f 93       	push	r16
    2dda:	1f 93       	push	r17
    2ddc:	cf 93       	push	r28
    2dde:	df 93       	push	r29
    2de0:	6b 01       	movw	r12, r22
    2de2:	7c 01       	movw	r14, r24
    2de4:	cc e1       	ldi	r28, 0x1C	; 28
    2de6:	d0 e2       	ldi	r29, 0x20	; 32
    2de8:	0f 2e       	mov	r0, r31
    2dea:	f8 e6       	ldi	r31, 0x68	; 104
    2dec:	9f 2e       	mov	r9, r31
    2dee:	f0 2d       	mov	r31, r0
    2df0:	98 82       	st	Y, r9
    2df2:	8c e1       	ldi	r24, 0x1C	; 28
    2df4:	89 83       	std	Y+1, r24	; 0x01
    2df6:	aa 24       	eor	r10, r10
    2df8:	a3 94       	inc	r10
    2dfa:	b1 2c       	mov	r11, r1
    2dfc:	a8 86       	std	Y+8, r10	; 0x08
    2dfe:	b9 86       	std	Y+9, r11	; 0x09
    2e00:	03 e2       	ldi	r16, 0x23	; 35
    2e02:	11 e2       	ldi	r17, 0x21	; 33
    2e04:	88 e1       	ldi	r24, 0x18	; 24
    2e06:	f8 01       	movw	r30, r16
    2e08:	80 83       	st	Z, r24
    2e0a:	40 e0       	ldi	r20, 0x00	; 0
    2e0c:	be 01       	movw	r22, r28
    2e0e:	c6 01       	movw	r24, r12
    2e10:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <twi_master_transfer>
    2e14:	98 82       	st	Y, r9
    2e16:	8d e1       	ldi	r24, 0x1D	; 29
    2e18:	89 83       	std	Y+1, r24	; 0x01
    2e1a:	a8 86       	std	Y+8, r10	; 0x08
    2e1c:	b9 86       	std	Y+9, r11	; 0x09
    2e1e:	82 e0       	ldi	r24, 0x02	; 2
    2e20:	f8 01       	movw	r30, r16
    2e22:	80 83       	st	Z, r24
    2e24:	40 e0       	ldi	r20, 0x00	; 0
    2e26:	be 01       	movw	r22, r28
    2e28:	c6 01       	movw	r24, r12
    2e2a:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <twi_master_transfer>
    2e2e:	df 91       	pop	r29
    2e30:	cf 91       	pop	r28
    2e32:	1f 91       	pop	r17
    2e34:	0f 91       	pop	r16
    2e36:	ff 90       	pop	r15
    2e38:	ef 90       	pop	r14
    2e3a:	df 90       	pop	r13
    2e3c:	cf 90       	pop	r12
    2e3e:	bf 90       	pop	r11
    2e40:	af 90       	pop	r10
    2e42:	9f 90       	pop	r9
    2e44:	08 95       	ret

00002e46 <mpu9250_mag_cal>:
    2e46:	2f 92       	push	r2
    2e48:	3f 92       	push	r3
    2e4a:	4f 92       	push	r4
    2e4c:	5f 92       	push	r5
    2e4e:	6f 92       	push	r6
    2e50:	7f 92       	push	r7
    2e52:	8f 92       	push	r8
    2e54:	9f 92       	push	r9
    2e56:	af 92       	push	r10
    2e58:	bf 92       	push	r11
    2e5a:	cf 92       	push	r12
    2e5c:	df 92       	push	r13
    2e5e:	ef 92       	push	r14
    2e60:	ff 92       	push	r15
    2e62:	0f 93       	push	r16
    2e64:	1f 93       	push	r17
    2e66:	cf 93       	push	r28
    2e68:	df 93       	push	r29
    2e6a:	6b 01       	movw	r12, r22
    2e6c:	7c 01       	movw	r14, r24
    2e6e:	cc e1       	ldi	r28, 0x1C	; 28
    2e70:	d0 e2       	ldi	r29, 0x20	; 32
    2e72:	0f 2e       	mov	r0, r31
    2e74:	f8 e6       	ldi	r31, 0x68	; 104
    2e76:	9f 2e       	mov	r9, r31
    2e78:	f0 2d       	mov	r31, r0
    2e7a:	98 82       	st	Y, r9
    2e7c:	0f 2e       	mov	r0, r31
    2e7e:	f5 e2       	ldi	r31, 0x25	; 37
    2e80:	6f 2e       	mov	r6, r31
    2e82:	f0 2d       	mov	r31, r0
    2e84:	69 82       	std	Y+1, r6	; 0x01
    2e86:	aa 24       	eor	r10, r10
    2e88:	a3 94       	inc	r10
    2e8a:	b1 2c       	mov	r11, r1
    2e8c:	a8 86       	std	Y+8, r10	; 0x08
    2e8e:	b9 86       	std	Y+9, r11	; 0x09
    2e90:	03 e2       	ldi	r16, 0x23	; 35
    2e92:	11 e2       	ldi	r17, 0x21	; 33
    2e94:	0f 2e       	mov	r0, r31
    2e96:	fc e0       	ldi	r31, 0x0C	; 12
    2e98:	4f 2e       	mov	r4, r31
    2e9a:	f0 2d       	mov	r31, r0
    2e9c:	f8 01       	movw	r30, r16
    2e9e:	40 82       	st	Z, r4
    2ea0:	40 e0       	ldi	r20, 0x00	; 0
    2ea2:	be 01       	movw	r22, r28
    2ea4:	c6 01       	movw	r24, r12
    2ea6:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <twi_master_transfer>
    2eaa:	98 82       	st	Y, r9
    2eac:	0f 2e       	mov	r0, r31
    2eae:	f6 e2       	ldi	r31, 0x26	; 38
    2eb0:	7f 2e       	mov	r7, r31
    2eb2:	f0 2d       	mov	r31, r0
    2eb4:	79 82       	std	Y+1, r7	; 0x01
    2eb6:	a8 86       	std	Y+8, r10	; 0x08
    2eb8:	b9 86       	std	Y+9, r11	; 0x09
    2eba:	0f 2e       	mov	r0, r31
    2ebc:	fa e0       	ldi	r31, 0x0A	; 10
    2ebe:	5f 2e       	mov	r5, r31
    2ec0:	f0 2d       	mov	r31, r0
    2ec2:	f8 01       	movw	r30, r16
    2ec4:	50 82       	st	Z, r5
    2ec6:	40 e0       	ldi	r20, 0x00	; 0
    2ec8:	be 01       	movw	r22, r28
    2eca:	c6 01       	movw	r24, r12
    2ecc:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <twi_master_transfer>
    2ed0:	98 82       	st	Y, r9
    2ed2:	0f 2e       	mov	r0, r31
    2ed4:	f3 e6       	ldi	r31, 0x63	; 99
    2ed6:	3f 2e       	mov	r3, r31
    2ed8:	f0 2d       	mov	r31, r0
    2eda:	39 82       	std	Y+1, r3	; 0x01
    2edc:	a8 86       	std	Y+8, r10	; 0x08
    2ede:	b9 86       	std	Y+9, r11	; 0x09
    2ee0:	8f e1       	ldi	r24, 0x1F	; 31
    2ee2:	f8 01       	movw	r30, r16
    2ee4:	80 83       	st	Z, r24
    2ee6:	40 e0       	ldi	r20, 0x00	; 0
    2ee8:	be 01       	movw	r22, r28
    2eea:	c6 01       	movw	r24, r12
    2eec:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <twi_master_transfer>
    2ef0:	98 82       	st	Y, r9
    2ef2:	0f 2e       	mov	r0, r31
    2ef4:	f7 e2       	ldi	r31, 0x27	; 39
    2ef6:	8f 2e       	mov	r8, r31
    2ef8:	f0 2d       	mov	r31, r0
    2efa:	89 82       	std	Y+1, r8	; 0x01
    2efc:	a8 86       	std	Y+8, r10	; 0x08
    2efe:	b9 86       	std	Y+9, r11	; 0x09
    2f00:	81 e8       	ldi	r24, 0x81	; 129
    2f02:	f8 01       	movw	r30, r16
    2f04:	80 83       	st	Z, r24
    2f06:	40 e0       	ldi	r20, 0x00	; 0
    2f08:	be 01       	movw	r22, r28
    2f0a:	c6 01       	movw	r24, r12
    2f0c:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <twi_master_transfer>
    2f10:	6b ea       	ldi	r22, 0xAB	; 171
    2f12:	70 ea       	ldi	r23, 0xA0	; 160
    2f14:	81 e0       	ldi	r24, 0x01	; 1
    2f16:	90 e0       	ldi	r25, 0x00	; 0
    2f18:	f0 de       	rcall	.-544    	; 0x2cfa <__portable_avr_delay_cycles>
    2f1a:	98 82       	st	Y, r9
    2f1c:	69 82       	std	Y+1, r6	; 0x01
    2f1e:	a8 86       	std	Y+8, r10	; 0x08
    2f20:	b9 86       	std	Y+9, r11	; 0x09
    2f22:	8c e8       	ldi	r24, 0x8C	; 140
    2f24:	f8 01       	movw	r30, r16
    2f26:	80 83       	st	Z, r24
    2f28:	40 e0       	ldi	r20, 0x00	; 0
    2f2a:	be 01       	movw	r22, r28
    2f2c:	c6 01       	movw	r24, r12
    2f2e:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <twi_master_transfer>
    2f32:	98 82       	st	Y, r9
    2f34:	79 82       	std	Y+1, r7	; 0x01
    2f36:	a8 86       	std	Y+8, r10	; 0x08
    2f38:	b9 86       	std	Y+9, r11	; 0x09
    2f3a:	68 94       	set
    2f3c:	22 24       	eor	r2, r2
    2f3e:	24 f8       	bld	r2, 4
    2f40:	f8 01       	movw	r30, r16
    2f42:	20 82       	st	Z, r2
    2f44:	40 e0       	ldi	r20, 0x00	; 0
    2f46:	be 01       	movw	r22, r28
    2f48:	c6 01       	movw	r24, r12
    2f4a:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <twi_master_transfer>
    2f4e:	98 82       	st	Y, r9
    2f50:	89 82       	std	Y+1, r8	; 0x01
    2f52:	a8 86       	std	Y+8, r10	; 0x08
    2f54:	b9 86       	std	Y+9, r11	; 0x09
    2f56:	83 e8       	ldi	r24, 0x83	; 131
    2f58:	f8 01       	movw	r30, r16
    2f5a:	80 83       	st	Z, r24
    2f5c:	40 e0       	ldi	r20, 0x00	; 0
    2f5e:	be 01       	movw	r22, r28
    2f60:	c6 01       	movw	r24, r12
    2f62:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <twi_master_transfer>
    2f66:	6b ea       	ldi	r22, 0xAB	; 171
    2f68:	70 ea       	ldi	r23, 0xA0	; 160
    2f6a:	81 e0       	ldi	r24, 0x01	; 1
    2f6c:	90 e0       	ldi	r25, 0x00	; 0
    2f6e:	c5 de       	rcall	.-630    	; 0x2cfa <__portable_avr_delay_cycles>
    2f70:	98 82       	st	Y, r9
    2f72:	89 e4       	ldi	r24, 0x49	; 73
    2f74:	89 83       	std	Y+1, r24	; 0x01
    2f76:	84 e0       	ldi	r24, 0x04	; 4
    2f78:	90 e0       	ldi	r25, 0x00	; 0
    2f7a:	88 87       	std	Y+8, r24	; 0x08
    2f7c:	99 87       	std	Y+9, r25	; 0x09
    2f7e:	41 e0       	ldi	r20, 0x01	; 1
    2f80:	be 01       	movw	r22, r28
    2f82:	c6 01       	movw	r24, r12
    2f84:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <twi_master_transfer>
    2f88:	f8 01       	movw	r30, r16
    2f8a:	60 81       	ld	r22, Z
    2f8c:	70 e0       	ldi	r23, 0x00	; 0
    2f8e:	80 e0       	ldi	r24, 0x00	; 0
    2f90:	90 e0       	ldi	r25, 0x00	; 0
    2f92:	0e 94 db 20 	call	0x41b6	; 0x41b6 <__floatunsisf>
    2f96:	20 e0       	ldi	r18, 0x00	; 0
    2f98:	30 e0       	ldi	r19, 0x00	; 0
    2f9a:	40 e0       	ldi	r20, 0x00	; 0
    2f9c:	53 e4       	ldi	r21, 0x43	; 67
    2f9e:	90 d7       	rcall	.+3872   	; 0x3ec0 <__subsf3>
    2fa0:	20 e0       	ldi	r18, 0x00	; 0
    2fa2:	30 e0       	ldi	r19, 0x00	; 0
    2fa4:	40 e8       	ldi	r20, 0x80	; 128
    2fa6:	5b e3       	ldi	r21, 0x3B	; 59
    2fa8:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    2fac:	20 e0       	ldi	r18, 0x00	; 0
    2fae:	30 e0       	ldi	r19, 0x00	; 0
    2fb0:	40 e8       	ldi	r20, 0x80	; 128
    2fb2:	5f e3       	ldi	r21, 0x3F	; 63
    2fb4:	86 d7       	rcall	.+3852   	; 0x3ec2 <__addsf3>
    2fb6:	60 93 19 21 	sts	0x2119, r22	; 0x802119 <ASAX>
    2fba:	70 93 1a 21 	sts	0x211A, r23	; 0x80211a <ASAX+0x1>
    2fbe:	80 93 1b 21 	sts	0x211B, r24	; 0x80211b <ASAX+0x2>
    2fc2:	90 93 1c 21 	sts	0x211C, r25	; 0x80211c <ASAX+0x3>
    2fc6:	f8 01       	movw	r30, r16
    2fc8:	61 81       	ldd	r22, Z+1	; 0x01
    2fca:	70 e0       	ldi	r23, 0x00	; 0
    2fcc:	80 e0       	ldi	r24, 0x00	; 0
    2fce:	90 e0       	ldi	r25, 0x00	; 0
    2fd0:	0e 94 db 20 	call	0x41b6	; 0x41b6 <__floatunsisf>
    2fd4:	20 e0       	ldi	r18, 0x00	; 0
    2fd6:	30 e0       	ldi	r19, 0x00	; 0
    2fd8:	40 e0       	ldi	r20, 0x00	; 0
    2fda:	53 e4       	ldi	r21, 0x43	; 67
    2fdc:	71 d7       	rcall	.+3810   	; 0x3ec0 <__subsf3>
    2fde:	20 e0       	ldi	r18, 0x00	; 0
    2fe0:	30 e0       	ldi	r19, 0x00	; 0
    2fe2:	40 e8       	ldi	r20, 0x80	; 128
    2fe4:	5b e3       	ldi	r21, 0x3B	; 59
    2fe6:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    2fea:	20 e0       	ldi	r18, 0x00	; 0
    2fec:	30 e0       	ldi	r19, 0x00	; 0
    2fee:	40 e8       	ldi	r20, 0x80	; 128
    2ff0:	5f e3       	ldi	r21, 0x3F	; 63
    2ff2:	67 d7       	rcall	.+3790   	; 0x3ec2 <__addsf3>
    2ff4:	60 93 15 21 	sts	0x2115, r22	; 0x802115 <ASAY>
    2ff8:	70 93 16 21 	sts	0x2116, r23	; 0x802116 <ASAY+0x1>
    2ffc:	80 93 17 21 	sts	0x2117, r24	; 0x802117 <ASAY+0x2>
    3000:	90 93 18 21 	sts	0x2118, r25	; 0x802118 <ASAY+0x3>
    3004:	f8 01       	movw	r30, r16
    3006:	62 81       	ldd	r22, Z+2	; 0x02
    3008:	70 e0       	ldi	r23, 0x00	; 0
    300a:	80 e0       	ldi	r24, 0x00	; 0
    300c:	90 e0       	ldi	r25, 0x00	; 0
    300e:	0e 94 db 20 	call	0x41b6	; 0x41b6 <__floatunsisf>
    3012:	20 e0       	ldi	r18, 0x00	; 0
    3014:	30 e0       	ldi	r19, 0x00	; 0
    3016:	40 e0       	ldi	r20, 0x00	; 0
    3018:	53 e4       	ldi	r21, 0x43	; 67
    301a:	52 d7       	rcall	.+3748   	; 0x3ec0 <__subsf3>
    301c:	20 e0       	ldi	r18, 0x00	; 0
    301e:	30 e0       	ldi	r19, 0x00	; 0
    3020:	40 e8       	ldi	r20, 0x80	; 128
    3022:	5b e3       	ldi	r21, 0x3B	; 59
    3024:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsf3>
    3028:	20 e0       	ldi	r18, 0x00	; 0
    302a:	30 e0       	ldi	r19, 0x00	; 0
    302c:	40 e8       	ldi	r20, 0x80	; 128
    302e:	5f e3       	ldi	r21, 0x3F	; 63
    3030:	48 d7       	rcall	.+3728   	; 0x3ec2 <__addsf3>
    3032:	60 93 11 21 	sts	0x2111, r22	; 0x802111 <ASAZ>
    3036:	70 93 12 21 	sts	0x2112, r23	; 0x802112 <ASAZ+0x1>
    303a:	80 93 13 21 	sts	0x2113, r24	; 0x802113 <ASAZ+0x2>
    303e:	90 93 14 21 	sts	0x2114, r25	; 0x802114 <ASAZ+0x3>
    3042:	98 82       	st	Y, r9
    3044:	69 82       	std	Y+1, r6	; 0x01
    3046:	a8 86       	std	Y+8, r10	; 0x08
    3048:	b9 86       	std	Y+9, r11	; 0x09
    304a:	f8 01       	movw	r30, r16
    304c:	40 82       	st	Z, r4
    304e:	40 e0       	ldi	r20, 0x00	; 0
    3050:	be 01       	movw	r22, r28
    3052:	c6 01       	movw	r24, r12
    3054:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <twi_master_transfer>
    3058:	98 82       	st	Y, r9
    305a:	79 82       	std	Y+1, r7	; 0x01
    305c:	a8 86       	std	Y+8, r10	; 0x08
    305e:	b9 86       	std	Y+9, r11	; 0x09
    3060:	f8 01       	movw	r30, r16
    3062:	50 82       	st	Z, r5
    3064:	40 e0       	ldi	r20, 0x00	; 0
    3066:	be 01       	movw	r22, r28
    3068:	c6 01       	movw	r24, r12
    306a:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <twi_master_transfer>
    306e:	98 82       	st	Y, r9
    3070:	39 82       	std	Y+1, r3	; 0x01
    3072:	a8 86       	std	Y+8, r10	; 0x08
    3074:	b9 86       	std	Y+9, r11	; 0x09
    3076:	f8 01       	movw	r30, r16
    3078:	20 82       	st	Z, r2
    307a:	40 e0       	ldi	r20, 0x00	; 0
    307c:	be 01       	movw	r22, r28
    307e:	c6 01       	movw	r24, r12
    3080:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <twi_master_transfer>
    3084:	98 82       	st	Y, r9
    3086:	89 82       	std	Y+1, r8	; 0x01
    3088:	a8 86       	std	Y+8, r10	; 0x08
    308a:	b9 86       	std	Y+9, r11	; 0x09
    308c:	81 e8       	ldi	r24, 0x81	; 129
    308e:	f8 01       	movw	r30, r16
    3090:	80 83       	st	Z, r24
    3092:	40 e0       	ldi	r20, 0x00	; 0
    3094:	be 01       	movw	r22, r28
    3096:	c6 01       	movw	r24, r12
    3098:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <twi_master_transfer>
    309c:	6b ea       	ldi	r22, 0xAB	; 171
    309e:	70 ea       	ldi	r23, 0xA0	; 160
    30a0:	81 e0       	ldi	r24, 0x01	; 1
    30a2:	90 e0       	ldi	r25, 0x00	; 0
    30a4:	2a de       	rcall	.-940    	; 0x2cfa <__portable_avr_delay_cycles>
    30a6:	df 91       	pop	r29
    30a8:	cf 91       	pop	r28
    30aa:	1f 91       	pop	r17
    30ac:	0f 91       	pop	r16
    30ae:	ff 90       	pop	r15
    30b0:	ef 90       	pop	r14
    30b2:	df 90       	pop	r13
    30b4:	cf 90       	pop	r12
    30b6:	bf 90       	pop	r11
    30b8:	af 90       	pop	r10
    30ba:	9f 90       	pop	r9
    30bc:	8f 90       	pop	r8
    30be:	7f 90       	pop	r7
    30c0:	6f 90       	pop	r6
    30c2:	5f 90       	pop	r5
    30c4:	4f 90       	pop	r4
    30c6:	3f 90       	pop	r3
    30c8:	2f 90       	pop	r2
    30ca:	08 95       	ret

000030cc <mpu9250_mag_init>:
    30cc:	4f 92       	push	r4
    30ce:	5f 92       	push	r5
    30d0:	6f 92       	push	r6
    30d2:	7f 92       	push	r7
    30d4:	8f 92       	push	r8
    30d6:	9f 92       	push	r9
    30d8:	af 92       	push	r10
    30da:	bf 92       	push	r11
    30dc:	cf 92       	push	r12
    30de:	df 92       	push	r13
    30e0:	ef 92       	push	r14
    30e2:	ff 92       	push	r15
    30e4:	0f 93       	push	r16
    30e6:	1f 93       	push	r17
    30e8:	cf 93       	push	r28
    30ea:	df 93       	push	r29
    30ec:	6b 01       	movw	r12, r22
    30ee:	7c 01       	movw	r14, r24
    30f0:	cc e1       	ldi	r28, 0x1C	; 28
    30f2:	d0 e2       	ldi	r29, 0x20	; 32
    30f4:	0f 2e       	mov	r0, r31
    30f6:	f8 e6       	ldi	r31, 0x68	; 104
    30f8:	9f 2e       	mov	r9, r31
    30fa:	f0 2d       	mov	r31, r0
    30fc:	98 82       	st	Y, r9
    30fe:	84 e2       	ldi	r24, 0x24	; 36
    3100:	89 83       	std	Y+1, r24	; 0x01
    3102:	aa 24       	eor	r10, r10
    3104:	a3 94       	inc	r10
    3106:	b1 2c       	mov	r11, r1
    3108:	a8 86       	std	Y+8, r10	; 0x08
    310a:	b9 86       	std	Y+9, r11	; 0x09
    310c:	03 e2       	ldi	r16, 0x23	; 35
    310e:	11 e2       	ldi	r17, 0x21	; 33
    3110:	8d ec       	ldi	r24, 0xCD	; 205
    3112:	f8 01       	movw	r30, r16
    3114:	80 83       	st	Z, r24
    3116:	40 e0       	ldi	r20, 0x00	; 0
    3118:	be 01       	movw	r22, r28
    311a:	c6 01       	movw	r24, r12
    311c:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <twi_master_transfer>
    3120:	98 82       	st	Y, r9
    3122:	87 e6       	ldi	r24, 0x67	; 103
    3124:	89 83       	std	Y+1, r24	; 0x01
    3126:	a8 86       	std	Y+8, r10	; 0x08
    3128:	b9 86       	std	Y+9, r11	; 0x09
    312a:	0f 2e       	mov	r0, r31
    312c:	f1 e8       	ldi	r31, 0x81	; 129
    312e:	6f 2e       	mov	r6, r31
    3130:	f0 2d       	mov	r31, r0
    3132:	f8 01       	movw	r30, r16
    3134:	60 82       	st	Z, r6
    3136:	40 e0       	ldi	r20, 0x00	; 0
    3138:	be 01       	movw	r22, r28
    313a:	c6 01       	movw	r24, r12
    313c:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <twi_master_transfer>
    3140:	98 82       	st	Y, r9
    3142:	8a e6       	ldi	r24, 0x6A	; 106
    3144:	89 83       	std	Y+1, r24	; 0x01
    3146:	a8 86       	std	Y+8, r10	; 0x08
    3148:	b9 86       	std	Y+9, r11	; 0x09
    314a:	80 e2       	ldi	r24, 0x20	; 32
    314c:	f8 01       	movw	r30, r16
    314e:	80 83       	st	Z, r24
    3150:	40 e0       	ldi	r20, 0x00	; 0
    3152:	be 01       	movw	r22, r28
    3154:	c6 01       	movw	r24, r12
    3156:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <twi_master_transfer>
    315a:	98 82       	st	Y, r9
    315c:	0f 2e       	mov	r0, r31
    315e:	f5 e2       	ldi	r31, 0x25	; 37
    3160:	5f 2e       	mov	r5, r31
    3162:	f0 2d       	mov	r31, r0
    3164:	59 82       	std	Y+1, r5	; 0x01
    3166:	a8 86       	std	Y+8, r10	; 0x08
    3168:	b9 86       	std	Y+9, r11	; 0x09
    316a:	8c e0       	ldi	r24, 0x0C	; 12
    316c:	f8 01       	movw	r30, r16
    316e:	80 83       	st	Z, r24
    3170:	40 e0       	ldi	r20, 0x00	; 0
    3172:	be 01       	movw	r22, r28
    3174:	c6 01       	movw	r24, r12
    3176:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <twi_master_transfer>
    317a:	98 82       	st	Y, r9
    317c:	0f 2e       	mov	r0, r31
    317e:	f6 e2       	ldi	r31, 0x26	; 38
    3180:	7f 2e       	mov	r7, r31
    3182:	f0 2d       	mov	r31, r0
    3184:	79 82       	std	Y+1, r7	; 0x01
    3186:	a8 86       	std	Y+8, r10	; 0x08
    3188:	b9 86       	std	Y+9, r11	; 0x09
    318a:	8b e0       	ldi	r24, 0x0B	; 11
    318c:	f8 01       	movw	r30, r16
    318e:	80 83       	st	Z, r24
    3190:	40 e0       	ldi	r20, 0x00	; 0
    3192:	be 01       	movw	r22, r28
    3194:	c6 01       	movw	r24, r12
    3196:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <twi_master_transfer>
    319a:	98 82       	st	Y, r9
    319c:	0f 2e       	mov	r0, r31
    319e:	f3 e6       	ldi	r31, 0x63	; 99
    31a0:	4f 2e       	mov	r4, r31
    31a2:	f0 2d       	mov	r31, r0
    31a4:	49 82       	std	Y+1, r4	; 0x01
    31a6:	a8 86       	std	Y+8, r10	; 0x08
    31a8:	b9 86       	std	Y+9, r11	; 0x09
    31aa:	81 e0       	ldi	r24, 0x01	; 1
    31ac:	f8 01       	movw	r30, r16
    31ae:	80 83       	st	Z, r24
    31b0:	40 e0       	ldi	r20, 0x00	; 0
    31b2:	be 01       	movw	r22, r28
    31b4:	c6 01       	movw	r24, r12
    31b6:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <twi_master_transfer>
    31ba:	98 82       	st	Y, r9
    31bc:	0f 2e       	mov	r0, r31
    31be:	f7 e2       	ldi	r31, 0x27	; 39
    31c0:	8f 2e       	mov	r8, r31
    31c2:	f0 2d       	mov	r31, r0
    31c4:	89 82       	std	Y+1, r8	; 0x01
    31c6:	a8 86       	std	Y+8, r10	; 0x08
    31c8:	b9 86       	std	Y+9, r11	; 0x09
    31ca:	f8 01       	movw	r30, r16
    31cc:	60 82       	st	Z, r6
    31ce:	40 e0       	ldi	r20, 0x00	; 0
    31d0:	be 01       	movw	r22, r28
    31d2:	c6 01       	movw	r24, r12
    31d4:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <twi_master_transfer>
    31d8:	66 e5       	ldi	r22, 0x56	; 86
    31da:	70 ed       	ldi	r23, 0xD0	; 208
    31dc:	80 e0       	ldi	r24, 0x00	; 0
    31de:	90 e0       	ldi	r25, 0x00	; 0
    31e0:	8c dd       	rcall	.-1256   	; 0x2cfa <__portable_avr_delay_cycles>
    31e2:	c7 01       	movw	r24, r14
    31e4:	b6 01       	movw	r22, r12
    31e6:	2f de       	rcall	.-930    	; 0x2e46 <mpu9250_mag_cal>
    31e8:	98 82       	st	Y, r9
    31ea:	79 82       	std	Y+1, r7	; 0x01
    31ec:	a8 86       	std	Y+8, r10	; 0x08
    31ee:	b9 86       	std	Y+9, r11	; 0x09
    31f0:	8a e0       	ldi	r24, 0x0A	; 10
    31f2:	f8 01       	movw	r30, r16
    31f4:	80 83       	st	Z, r24
    31f6:	40 e0       	ldi	r20, 0x00	; 0
    31f8:	be 01       	movw	r22, r28
    31fa:	c6 01       	movw	r24, r12
    31fc:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <twi_master_transfer>
    3200:	98 82       	st	Y, r9
    3202:	49 82       	std	Y+1, r4	; 0x01
    3204:	a8 86       	std	Y+8, r10	; 0x08
    3206:	b9 86       	std	Y+9, r11	; 0x09
    3208:	86 e1       	ldi	r24, 0x16	; 22
    320a:	f8 01       	movw	r30, r16
    320c:	80 83       	st	Z, r24
    320e:	40 e0       	ldi	r20, 0x00	; 0
    3210:	be 01       	movw	r22, r28
    3212:	c6 01       	movw	r24, r12
    3214:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <twi_master_transfer>
    3218:	98 82       	st	Y, r9
    321a:	89 82       	std	Y+1, r8	; 0x01
    321c:	a8 86       	std	Y+8, r10	; 0x08
    321e:	b9 86       	std	Y+9, r11	; 0x09
    3220:	f8 01       	movw	r30, r16
    3222:	60 82       	st	Z, r6
    3224:	40 e0       	ldi	r20, 0x00	; 0
    3226:	be 01       	movw	r22, r28
    3228:	c6 01       	movw	r24, r12
    322a:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <twi_master_transfer>
    322e:	66 e5       	ldi	r22, 0x56	; 86
    3230:	70 ed       	ldi	r23, 0xD0	; 208
    3232:	80 e0       	ldi	r24, 0x00	; 0
    3234:	90 e0       	ldi	r25, 0x00	; 0
    3236:	61 dd       	rcall	.-1342   	; 0x2cfa <__portable_avr_delay_cycles>
    3238:	98 82       	st	Y, r9
    323a:	59 82       	std	Y+1, r5	; 0x01
    323c:	a8 86       	std	Y+8, r10	; 0x08
    323e:	b9 86       	std	Y+9, r11	; 0x09
    3240:	8c e8       	ldi	r24, 0x8C	; 140
    3242:	f8 01       	movw	r30, r16
    3244:	80 83       	st	Z, r24
    3246:	40 e0       	ldi	r20, 0x00	; 0
    3248:	be 01       	movw	r22, r28
    324a:	c6 01       	movw	r24, r12
    324c:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <twi_master_transfer>
    3250:	98 82       	st	Y, r9
    3252:	79 82       	std	Y+1, r7	; 0x01
    3254:	a8 86       	std	Y+8, r10	; 0x08
    3256:	b9 86       	std	Y+9, r11	; 0x09
    3258:	83 e0       	ldi	r24, 0x03	; 3
    325a:	f8 01       	movw	r30, r16
    325c:	80 83       	st	Z, r24
    325e:	40 e0       	ldi	r20, 0x00	; 0
    3260:	be 01       	movw	r22, r28
    3262:	c6 01       	movw	r24, r12
    3264:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <twi_master_transfer>
    3268:	98 82       	st	Y, r9
    326a:	89 82       	std	Y+1, r8	; 0x01
    326c:	a8 86       	std	Y+8, r10	; 0x08
    326e:	b9 86       	std	Y+9, r11	; 0x09
    3270:	87 e8       	ldi	r24, 0x87	; 135
    3272:	f8 01       	movw	r30, r16
    3274:	80 83       	st	Z, r24
    3276:	40 e0       	ldi	r20, 0x00	; 0
    3278:	be 01       	movw	r22, r28
    327a:	c6 01       	movw	r24, r12
    327c:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <twi_master_transfer>
    3280:	df 91       	pop	r29
    3282:	cf 91       	pop	r28
    3284:	1f 91       	pop	r17
    3286:	0f 91       	pop	r16
    3288:	ff 90       	pop	r15
    328a:	ef 90       	pop	r14
    328c:	df 90       	pop	r13
    328e:	cf 90       	pop	r12
    3290:	bf 90       	pop	r11
    3292:	af 90       	pop	r10
    3294:	9f 90       	pop	r9
    3296:	8f 90       	pop	r8
    3298:	7f 90       	pop	r7
    329a:	6f 90       	pop	r6
    329c:	5f 90       	pop	r5
    329e:	4f 90       	pop	r4
    32a0:	08 95       	ret

000032a2 <mpu9250_int_init>:
    32a2:	9f 92       	push	r9
    32a4:	af 92       	push	r10
    32a6:	bf 92       	push	r11
    32a8:	cf 92       	push	r12
    32aa:	df 92       	push	r13
    32ac:	ef 92       	push	r14
    32ae:	ff 92       	push	r15
    32b0:	0f 93       	push	r16
    32b2:	1f 93       	push	r17
    32b4:	cf 93       	push	r28
    32b6:	df 93       	push	r29
    32b8:	6b 01       	movw	r12, r22
    32ba:	7c 01       	movw	r14, r24
    32bc:	cc e1       	ldi	r28, 0x1C	; 28
    32be:	d0 e2       	ldi	r29, 0x20	; 32
    32c0:	0f 2e       	mov	r0, r31
    32c2:	f8 e6       	ldi	r31, 0x68	; 104
    32c4:	9f 2e       	mov	r9, r31
    32c6:	f0 2d       	mov	r31, r0
    32c8:	98 82       	st	Y, r9
    32ca:	87 e3       	ldi	r24, 0x37	; 55
    32cc:	89 83       	std	Y+1, r24	; 0x01
    32ce:	aa 24       	eor	r10, r10
    32d0:	a3 94       	inc	r10
    32d2:	b1 2c       	mov	r11, r1
    32d4:	a8 86       	std	Y+8, r10	; 0x08
    32d6:	b9 86       	std	Y+9, r11	; 0x09
    32d8:	03 e2       	ldi	r16, 0x23	; 35
    32da:	11 e2       	ldi	r17, 0x21	; 33
    32dc:	80 e1       	ldi	r24, 0x10	; 16
    32de:	f8 01       	movw	r30, r16
    32e0:	80 83       	st	Z, r24
    32e2:	40 e0       	ldi	r20, 0x00	; 0
    32e4:	be 01       	movw	r22, r28
    32e6:	c6 01       	movw	r24, r12
    32e8:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <twi_master_transfer>
    32ec:	98 82       	st	Y, r9
    32ee:	88 e3       	ldi	r24, 0x38	; 56
    32f0:	89 83       	std	Y+1, r24	; 0x01
    32f2:	a8 86       	std	Y+8, r10	; 0x08
    32f4:	b9 86       	std	Y+9, r11	; 0x09
    32f6:	81 e0       	ldi	r24, 0x01	; 1
    32f8:	f8 01       	movw	r30, r16
    32fa:	80 83       	st	Z, r24
    32fc:	40 e0       	ldi	r20, 0x00	; 0
    32fe:	be 01       	movw	r22, r28
    3300:	c6 01       	movw	r24, r12
    3302:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <twi_master_transfer>
    3306:	df 91       	pop	r29
    3308:	cf 91       	pop	r28
    330a:	1f 91       	pop	r17
    330c:	0f 91       	pop	r16
    330e:	ff 90       	pop	r15
    3310:	ef 90       	pop	r14
    3312:	df 90       	pop	r13
    3314:	cf 90       	pop	r12
    3316:	bf 90       	pop	r11
    3318:	af 90       	pop	r10
    331a:	9f 90       	pop	r9
    331c:	08 95       	ret

0000331e <init_mpu9250>:
    331e:	7f 92       	push	r7
    3320:	8f 92       	push	r8
    3322:	9f 92       	push	r9
    3324:	af 92       	push	r10
    3326:	bf 92       	push	r11
    3328:	cf 92       	push	r12
    332a:	df 92       	push	r13
    332c:	ef 92       	push	r14
    332e:	ff 92       	push	r15
    3330:	0f 93       	push	r16
    3332:	1f 93       	push	r17
    3334:	cf 93       	push	r28
    3336:	df 93       	push	r29
    3338:	6b 01       	movw	r12, r22
    333a:	7c 01       	movw	r14, r24
    333c:	74 2e       	mov	r7, r20
    333e:	cc e1       	ldi	r28, 0x1C	; 28
    3340:	d0 e2       	ldi	r29, 0x20	; 32
    3342:	0f 2e       	mov	r0, r31
    3344:	f8 e6       	ldi	r31, 0x68	; 104
    3346:	9f 2e       	mov	r9, r31
    3348:	f0 2d       	mov	r31, r0
    334a:	98 82       	st	Y, r9
    334c:	0f 2e       	mov	r0, r31
    334e:	fb e6       	ldi	r31, 0x6B	; 107
    3350:	8f 2e       	mov	r8, r31
    3352:	f0 2d       	mov	r31, r0
    3354:	89 82       	std	Y+1, r8	; 0x01
    3356:	aa 24       	eor	r10, r10
    3358:	a3 94       	inc	r10
    335a:	b1 2c       	mov	r11, r1
    335c:	a8 86       	std	Y+8, r10	; 0x08
    335e:	b9 86       	std	Y+9, r11	; 0x09
    3360:	03 e2       	ldi	r16, 0x23	; 35
    3362:	11 e2       	ldi	r17, 0x21	; 33
    3364:	80 e8       	ldi	r24, 0x80	; 128
    3366:	f8 01       	movw	r30, r16
    3368:	80 83       	st	Z, r24
    336a:	40 e0       	ldi	r20, 0x00	; 0
    336c:	be 01       	movw	r22, r28
    336e:	c6 01       	movw	r24, r12
    3370:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <twi_master_transfer>
    3374:	66 e5       	ldi	r22, 0x56	; 86
    3376:	73 e2       	ldi	r23, 0x23	; 35
    3378:	88 e0       	ldi	r24, 0x08	; 8
    337a:	90 e0       	ldi	r25, 0x00	; 0
    337c:	be dc       	rcall	.-1668   	; 0x2cfa <__portable_avr_delay_cycles>
    337e:	98 82       	st	Y, r9
    3380:	89 82       	std	Y+1, r8	; 0x01
    3382:	a8 86       	std	Y+8, r10	; 0x08
    3384:	b9 86       	std	Y+9, r11	; 0x09
    3386:	88 24       	eor	r8, r8
    3388:	83 94       	inc	r8
    338a:	f8 01       	movw	r30, r16
    338c:	80 82       	st	Z, r8
    338e:	40 e0       	ldi	r20, 0x00	; 0
    3390:	be 01       	movw	r22, r28
    3392:	c6 01       	movw	r24, r12
    3394:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <twi_master_transfer>
    3398:	98 82       	st	Y, r9
    339a:	8c e6       	ldi	r24, 0x6C	; 108
    339c:	89 83       	std	Y+1, r24	; 0x01
    339e:	a8 86       	std	Y+8, r10	; 0x08
    33a0:	b9 86       	std	Y+9, r11	; 0x09
    33a2:	f8 01       	movw	r30, r16
    33a4:	10 82       	st	Z, r1
    33a6:	40 e0       	ldi	r20, 0x00	; 0
    33a8:	be 01       	movw	r22, r28
    33aa:	c6 01       	movw	r24, r12
    33ac:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <twi_master_transfer>
    33b0:	c7 01       	movw	r24, r14
    33b2:	b6 01       	movw	r22, r12
    33b4:	cc dc       	rcall	.-1640   	; 0x2d4e <mpu9250_gyro_init>
    33b6:	c7 01       	movw	r24, r14
    33b8:	b6 01       	movw	r22, r12
    33ba:	07 dd       	rcall	.-1522   	; 0x2dca <mpu9250_acc_init>
    33bc:	47 2d       	mov	r20, r7
    33be:	c7 01       	movw	r24, r14
    33c0:	b6 01       	movw	r22, r12
    33c2:	a6 dc       	rcall	.-1716   	; 0x2d10 <mpu9250_ODR_init>
    33c4:	c7 01       	movw	r24, r14
    33c6:	b6 01       	movw	r22, r12
    33c8:	6c df       	rcall	.-296    	; 0x32a2 <mpu9250_int_init>
    33ca:	c7 01       	movw	r24, r14
    33cc:	b6 01       	movw	r22, r12
    33ce:	7e de       	rcall	.-772    	; 0x30cc <mpu9250_mag_init>
    33d0:	e0 e6       	ldi	r30, 0x60	; 96
    33d2:	f6 e0       	ldi	r31, 0x06	; 6
    33d4:	81 e1       	ldi	r24, 0x11	; 17
    33d6:	80 8b       	std	Z+16, r24	; 0x10
    33d8:	82 86       	std	Z+10, r8	; 0x0a
    33da:	83 e0       	ldi	r24, 0x03	; 3
    33dc:	81 87       	std	Z+9, r24	; 0x09
    33de:	df 91       	pop	r29
    33e0:	cf 91       	pop	r28
    33e2:	1f 91       	pop	r17
    33e4:	0f 91       	pop	r16
    33e6:	ff 90       	pop	r15
    33e8:	ef 90       	pop	r14
    33ea:	df 90       	pop	r13
    33ec:	cf 90       	pop	r12
    33ee:	bf 90       	pop	r11
    33f0:	af 90       	pop	r10
    33f2:	9f 90       	pop	r9
    33f4:	8f 90       	pop	r8
    33f6:	7f 90       	pop	r7
    33f8:	08 95       	ret

000033fa <read_mpu9250>:
    33fa:	4f 92       	push	r4
    33fc:	5f 92       	push	r5
    33fe:	6f 92       	push	r6
    3400:	7f 92       	push	r7
    3402:	8f 92       	push	r8
    3404:	9f 92       	push	r9
    3406:	af 92       	push	r10
    3408:	bf 92       	push	r11
    340a:	cf 92       	push	r12
    340c:	df 92       	push	r13
    340e:	ef 92       	push	r14
    3410:	ff 92       	push	r15
    3412:	0f 93       	push	r16
    3414:	1f 93       	push	r17
    3416:	cf 93       	push	r28
    3418:	df 93       	push	r29
    341a:	cd b7       	in	r28, 0x3d	; 61
    341c:	de b7       	in	r29, 0x3e	; 62
    341e:	68 97       	sbiw	r28, 0x18	; 24
    3420:	cd bf       	out	0x3d, r28	; 61
    3422:	de bf       	out	0x3e, r29	; 62
    3424:	8c 01       	movw	r16, r24
    3426:	db 01       	movw	r26, r22
    3428:	ca 01       	movw	r24, r20
    342a:	ec e1       	ldi	r30, 0x1C	; 28
    342c:	f0 e2       	ldi	r31, 0x20	; 32
    342e:	28 e6       	ldi	r18, 0x68	; 104
    3430:	20 83       	st	Z, r18
    3432:	2a e3       	ldi	r18, 0x3A	; 58
    3434:	21 83       	std	Z+1, r18	; 0x01
    3436:	26 e1       	ldi	r18, 0x16	; 22
    3438:	30 e0       	ldi	r19, 0x00	; 0
    343a:	20 87       	std	Z+8, r18	; 0x08
    343c:	31 87       	std	Z+9, r19	; 0x09
    343e:	41 e0       	ldi	r20, 0x01	; 1
    3440:	bf 01       	movw	r22, r30
    3442:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <twi_master_transfer>
    3446:	c0 90 27 20 	lds	r12, 0x2027	; 0x802027 <ACC_SENSITIVITY>
    344a:	d0 90 28 20 	lds	r13, 0x2028	; 0x802028 <ACC_SENSITIVITY+0x1>
    344e:	e0 90 29 20 	lds	r14, 0x2029	; 0x802029 <ACC_SENSITIVITY+0x2>
    3452:	f0 90 2a 20 	lds	r15, 0x202A	; 0x80202a <ACC_SENSITIVITY+0x3>
    3456:	60 91 24 21 	lds	r22, 0x2124	; 0x802124 <mpu9250_twi_data+0x1>
    345a:	70 e0       	ldi	r23, 0x00	; 0
    345c:	76 2f       	mov	r23, r22
    345e:	66 27       	eor	r22, r22
    3460:	80 91 25 21 	lds	r24, 0x2125	; 0x802125 <mpu9250_twi_data+0x2>
    3464:	68 0f       	add	r22, r24
    3466:	71 1d       	adc	r23, r1
    3468:	07 2e       	mov	r0, r23
    346a:	00 0c       	add	r0, r0
    346c:	88 0b       	sbc	r24, r24
    346e:	99 0b       	sbc	r25, r25
    3470:	a4 d6       	rcall	.+3400   	; 0x41ba <__floatsisf>
    3472:	a7 01       	movw	r20, r14
    3474:	96 01       	movw	r18, r12
    3476:	06 d6       	rcall	.+3084   	; 0x4084 <__divsf3>
    3478:	6d d6       	rcall	.+3290   	; 0x4154 <__fixsfsi>
    347a:	69 83       	std	Y+1, r22	; 0x01
    347c:	7a 83       	std	Y+2, r23	; 0x02
    347e:	8b 83       	std	Y+3, r24	; 0x03
    3480:	9c 83       	std	Y+4, r25	; 0x04
    3482:	c0 90 27 20 	lds	r12, 0x2027	; 0x802027 <ACC_SENSITIVITY>
    3486:	d0 90 28 20 	lds	r13, 0x2028	; 0x802028 <ACC_SENSITIVITY+0x1>
    348a:	e0 90 29 20 	lds	r14, 0x2029	; 0x802029 <ACC_SENSITIVITY+0x2>
    348e:	f0 90 2a 20 	lds	r15, 0x202A	; 0x80202a <ACC_SENSITIVITY+0x3>
    3492:	60 91 26 21 	lds	r22, 0x2126	; 0x802126 <mpu9250_twi_data+0x3>
    3496:	70 e0       	ldi	r23, 0x00	; 0
    3498:	76 2f       	mov	r23, r22
    349a:	66 27       	eor	r22, r22
    349c:	80 91 27 21 	lds	r24, 0x2127	; 0x802127 <mpu9250_twi_data+0x4>
    34a0:	68 0f       	add	r22, r24
    34a2:	71 1d       	adc	r23, r1
    34a4:	07 2e       	mov	r0, r23
    34a6:	00 0c       	add	r0, r0
    34a8:	88 0b       	sbc	r24, r24
    34aa:	99 0b       	sbc	r25, r25
    34ac:	86 d6       	rcall	.+3340   	; 0x41ba <__floatsisf>
    34ae:	a7 01       	movw	r20, r14
    34b0:	96 01       	movw	r18, r12
    34b2:	e8 d5       	rcall	.+3024   	; 0x4084 <__divsf3>
    34b4:	4f d6       	rcall	.+3230   	; 0x4154 <__fixsfsi>
    34b6:	6d 83       	std	Y+5, r22	; 0x05
    34b8:	7e 83       	std	Y+6, r23	; 0x06
    34ba:	8f 83       	std	Y+7, r24	; 0x07
    34bc:	98 87       	std	Y+8, r25	; 0x08
    34be:	c0 90 27 20 	lds	r12, 0x2027	; 0x802027 <ACC_SENSITIVITY>
    34c2:	d0 90 28 20 	lds	r13, 0x2028	; 0x802028 <ACC_SENSITIVITY+0x1>
    34c6:	e0 90 29 20 	lds	r14, 0x2029	; 0x802029 <ACC_SENSITIVITY+0x2>
    34ca:	f0 90 2a 20 	lds	r15, 0x202A	; 0x80202a <ACC_SENSITIVITY+0x3>
    34ce:	60 91 28 21 	lds	r22, 0x2128	; 0x802128 <mpu9250_twi_data+0x5>
    34d2:	70 e0       	ldi	r23, 0x00	; 0
    34d4:	76 2f       	mov	r23, r22
    34d6:	66 27       	eor	r22, r22
    34d8:	80 91 29 21 	lds	r24, 0x2129	; 0x802129 <mpu9250_twi_data+0x6>
    34dc:	68 0f       	add	r22, r24
    34de:	71 1d       	adc	r23, r1
    34e0:	07 2e       	mov	r0, r23
    34e2:	00 0c       	add	r0, r0
    34e4:	88 0b       	sbc	r24, r24
    34e6:	99 0b       	sbc	r25, r25
    34e8:	68 d6       	rcall	.+3280   	; 0x41ba <__floatsisf>
    34ea:	a7 01       	movw	r20, r14
    34ec:	96 01       	movw	r18, r12
    34ee:	ca d5       	rcall	.+2964   	; 0x4084 <__divsf3>
    34f0:	31 d6       	rcall	.+3170   	; 0x4154 <__fixsfsi>
    34f2:	69 87       	std	Y+9, r22	; 0x09
    34f4:	7a 87       	std	Y+10, r23	; 0x0a
    34f6:	8b 87       	std	Y+11, r24	; 0x0b
    34f8:	9c 87       	std	Y+12, r25	; 0x0c
    34fa:	c0 90 2b 20 	lds	r12, 0x202B	; 0x80202b <GYRO_SENSITIVITY>
    34fe:	d0 90 2c 20 	lds	r13, 0x202C	; 0x80202c <GYRO_SENSITIVITY+0x1>
    3502:	e0 90 2d 20 	lds	r14, 0x202D	; 0x80202d <GYRO_SENSITIVITY+0x2>
    3506:	f0 90 2e 20 	lds	r15, 0x202E	; 0x80202e <GYRO_SENSITIVITY+0x3>
    350a:	60 91 2c 21 	lds	r22, 0x212C	; 0x80212c <mpu9250_twi_data+0x9>
    350e:	70 e0       	ldi	r23, 0x00	; 0
    3510:	76 2f       	mov	r23, r22
    3512:	66 27       	eor	r22, r22
    3514:	80 91 2d 21 	lds	r24, 0x212D	; 0x80212d <mpu9250_twi_data+0xa>
    3518:	68 0f       	add	r22, r24
    351a:	71 1d       	adc	r23, r1
    351c:	07 2e       	mov	r0, r23
    351e:	00 0c       	add	r0, r0
    3520:	88 0b       	sbc	r24, r24
    3522:	99 0b       	sbc	r25, r25
    3524:	4a d6       	rcall	.+3220   	; 0x41ba <__floatsisf>
    3526:	a7 01       	movw	r20, r14
    3528:	96 01       	movw	r18, r12
    352a:	ac d5       	rcall	.+2904   	; 0x4084 <__divsf3>
    352c:	13 d6       	rcall	.+3110   	; 0x4154 <__fixsfsi>
    352e:	6d 87       	std	Y+13, r22	; 0x0d
    3530:	7e 87       	std	Y+14, r23	; 0x0e
    3532:	8f 87       	std	Y+15, r24	; 0x0f
    3534:	98 8b       	std	Y+16, r25	; 0x10
    3536:	c0 90 2b 20 	lds	r12, 0x202B	; 0x80202b <GYRO_SENSITIVITY>
    353a:	d0 90 2c 20 	lds	r13, 0x202C	; 0x80202c <GYRO_SENSITIVITY+0x1>
    353e:	e0 90 2d 20 	lds	r14, 0x202D	; 0x80202d <GYRO_SENSITIVITY+0x2>
    3542:	f0 90 2e 20 	lds	r15, 0x202E	; 0x80202e <GYRO_SENSITIVITY+0x3>
    3546:	60 91 2e 21 	lds	r22, 0x212E	; 0x80212e <mpu9250_twi_data+0xb>
    354a:	70 e0       	ldi	r23, 0x00	; 0
    354c:	76 2f       	mov	r23, r22
    354e:	66 27       	eor	r22, r22
    3550:	80 91 2f 21 	lds	r24, 0x212F	; 0x80212f <mpu9250_twi_data+0xc>
    3554:	68 0f       	add	r22, r24
    3556:	71 1d       	adc	r23, r1
    3558:	07 2e       	mov	r0, r23
    355a:	00 0c       	add	r0, r0
    355c:	88 0b       	sbc	r24, r24
    355e:	99 0b       	sbc	r25, r25
    3560:	2c d6       	rcall	.+3160   	; 0x41ba <__floatsisf>
    3562:	a7 01       	movw	r20, r14
    3564:	96 01       	movw	r18, r12
    3566:	8e d5       	rcall	.+2844   	; 0x4084 <__divsf3>
    3568:	f5 d5       	rcall	.+3050   	; 0x4154 <__fixsfsi>
    356a:	69 8b       	std	Y+17, r22	; 0x11
    356c:	7a 8b       	std	Y+18, r23	; 0x12
    356e:	8b 8b       	std	Y+19, r24	; 0x13
    3570:	9c 8b       	std	Y+20, r25	; 0x14
    3572:	c0 90 2b 20 	lds	r12, 0x202B	; 0x80202b <GYRO_SENSITIVITY>
    3576:	d0 90 2c 20 	lds	r13, 0x202C	; 0x80202c <GYRO_SENSITIVITY+0x1>
    357a:	e0 90 2d 20 	lds	r14, 0x202D	; 0x80202d <GYRO_SENSITIVITY+0x2>
    357e:	f0 90 2e 20 	lds	r15, 0x202E	; 0x80202e <GYRO_SENSITIVITY+0x3>
    3582:	60 91 30 21 	lds	r22, 0x2130	; 0x802130 <mpu9250_twi_data+0xd>
    3586:	70 e0       	ldi	r23, 0x00	; 0
    3588:	76 2f       	mov	r23, r22
    358a:	66 27       	eor	r22, r22
    358c:	80 91 31 21 	lds	r24, 0x2131	; 0x802131 <mpu9250_twi_data+0xe>
    3590:	68 0f       	add	r22, r24
    3592:	71 1d       	adc	r23, r1
    3594:	07 2e       	mov	r0, r23
    3596:	00 0c       	add	r0, r0
    3598:	88 0b       	sbc	r24, r24
    359a:	99 0b       	sbc	r25, r25
    359c:	0e d6       	rcall	.+3100   	; 0x41ba <__floatsisf>
    359e:	a7 01       	movw	r20, r14
    35a0:	96 01       	movw	r18, r12
    35a2:	70 d5       	rcall	.+2784   	; 0x4084 <__divsf3>
    35a4:	d7 d5       	rcall	.+2990   	; 0x4154 <__fixsfsi>
    35a6:	6d 8b       	std	Y+21, r22	; 0x15
    35a8:	7e 8b       	std	Y+22, r23	; 0x16
    35aa:	8f 8b       	std	Y+23, r24	; 0x17
    35ac:	98 8f       	std	Y+24, r25	; 0x18
    35ae:	c0 90 19 21 	lds	r12, 0x2119	; 0x802119 <ASAX>
    35b2:	d0 90 1a 21 	lds	r13, 0x211A	; 0x80211a <ASAX+0x1>
    35b6:	e0 90 1b 21 	lds	r14, 0x211B	; 0x80211b <ASAX+0x2>
    35ba:	f0 90 1c 21 	lds	r15, 0x211C	; 0x80211c <ASAX+0x3>
    35be:	60 91 33 21 	lds	r22, 0x2133	; 0x802133 <mpu9250_twi_data+0x10>
    35c2:	70 e0       	ldi	r23, 0x00	; 0
    35c4:	76 2f       	mov	r23, r22
    35c6:	66 27       	eor	r22, r22
    35c8:	80 91 32 21 	lds	r24, 0x2132	; 0x802132 <mpu9250_twi_data+0xf>
    35cc:	68 0f       	add	r22, r24
    35ce:	71 1d       	adc	r23, r1
    35d0:	07 2e       	mov	r0, r23
    35d2:	00 0c       	add	r0, r0
    35d4:	88 0b       	sbc	r24, r24
    35d6:	99 0b       	sbc	r25, r25
    35d8:	f0 d5       	rcall	.+3040   	; 0x41ba <__floatsisf>
    35da:	a7 01       	movw	r20, r14
    35dc:	96 01       	movw	r18, r12
    35de:	f9 d6       	rcall	.+3570   	; 0x43d2 <__mulsf3>
    35e0:	20 e0       	ldi	r18, 0x00	; 0
    35e2:	30 e0       	ldi	r19, 0x00	; 0
    35e4:	40 ec       	ldi	r20, 0xC0	; 192
    35e6:	50 e4       	ldi	r21, 0x40	; 64
    35e8:	f4 d6       	rcall	.+3560   	; 0x43d2 <__mulsf3>
    35ea:	b4 d5       	rcall	.+2920   	; 0x4154 <__fixsfsi>
    35ec:	2b 01       	movw	r4, r22
    35ee:	3c 01       	movw	r6, r24
    35f0:	c0 90 15 21 	lds	r12, 0x2115	; 0x802115 <ASAY>
    35f4:	d0 90 16 21 	lds	r13, 0x2116	; 0x802116 <ASAY+0x1>
    35f8:	e0 90 17 21 	lds	r14, 0x2117	; 0x802117 <ASAY+0x2>
    35fc:	f0 90 18 21 	lds	r15, 0x2118	; 0x802118 <ASAY+0x3>
    3600:	60 91 35 21 	lds	r22, 0x2135	; 0x802135 <mpu9250_twi_data+0x12>
    3604:	70 e0       	ldi	r23, 0x00	; 0
    3606:	76 2f       	mov	r23, r22
    3608:	66 27       	eor	r22, r22
    360a:	80 91 34 21 	lds	r24, 0x2134	; 0x802134 <mpu9250_twi_data+0x11>
    360e:	68 0f       	add	r22, r24
    3610:	71 1d       	adc	r23, r1
    3612:	07 2e       	mov	r0, r23
    3614:	00 0c       	add	r0, r0
    3616:	88 0b       	sbc	r24, r24
    3618:	99 0b       	sbc	r25, r25
    361a:	cf d5       	rcall	.+2974   	; 0x41ba <__floatsisf>
    361c:	a7 01       	movw	r20, r14
    361e:	96 01       	movw	r18, r12
    3620:	d8 d6       	rcall	.+3504   	; 0x43d2 <__mulsf3>
    3622:	20 e0       	ldi	r18, 0x00	; 0
    3624:	30 e0       	ldi	r19, 0x00	; 0
    3626:	40 ec       	ldi	r20, 0xC0	; 192
    3628:	50 e4       	ldi	r21, 0x40	; 64
    362a:	d3 d6       	rcall	.+3494   	; 0x43d2 <__mulsf3>
    362c:	93 d5       	rcall	.+2854   	; 0x4154 <__fixsfsi>
    362e:	4b 01       	movw	r8, r22
    3630:	5c 01       	movw	r10, r24
    3632:	c0 90 11 21 	lds	r12, 0x2111	; 0x802111 <ASAZ>
    3636:	d0 90 12 21 	lds	r13, 0x2112	; 0x802112 <ASAZ+0x1>
    363a:	e0 90 13 21 	lds	r14, 0x2113	; 0x802113 <ASAZ+0x2>
    363e:	f0 90 14 21 	lds	r15, 0x2114	; 0x802114 <ASAZ+0x3>
    3642:	60 91 37 21 	lds	r22, 0x2137	; 0x802137 <mpu9250_twi_data+0x14>
    3646:	70 e0       	ldi	r23, 0x00	; 0
    3648:	76 2f       	mov	r23, r22
    364a:	66 27       	eor	r22, r22
    364c:	80 91 36 21 	lds	r24, 0x2136	; 0x802136 <mpu9250_twi_data+0x13>
    3650:	68 0f       	add	r22, r24
    3652:	71 1d       	adc	r23, r1
    3654:	07 2e       	mov	r0, r23
    3656:	00 0c       	add	r0, r0
    3658:	88 0b       	sbc	r24, r24
    365a:	99 0b       	sbc	r25, r25
    365c:	ae d5       	rcall	.+2908   	; 0x41ba <__floatsisf>
    365e:	a7 01       	movw	r20, r14
    3660:	96 01       	movw	r18, r12
    3662:	b7 d6       	rcall	.+3438   	; 0x43d2 <__mulsf3>
    3664:	20 e0       	ldi	r18, 0x00	; 0
    3666:	30 e0       	ldi	r19, 0x00	; 0
    3668:	40 ec       	ldi	r20, 0xC0	; 192
    366a:	50 e4       	ldi	r21, 0x40	; 64
    366c:	b2 d6       	rcall	.+3428   	; 0x43d2 <__mulsf3>
    366e:	72 d5       	rcall	.+2788   	; 0x4154 <__fixsfsi>
    3670:	6b 01       	movw	r12, r22
    3672:	7c 01       	movw	r14, r24
    3674:	60 91 2a 21 	lds	r22, 0x212A	; 0x80212a <mpu9250_twi_data+0x7>
    3678:	70 e0       	ldi	r23, 0x00	; 0
    367a:	76 2f       	mov	r23, r22
    367c:	66 27       	eor	r22, r22
    367e:	80 91 2b 21 	lds	r24, 0x212B	; 0x80212b <mpu9250_twi_data+0x8>
    3682:	68 0f       	add	r22, r24
    3684:	71 1d       	adc	r23, r1
    3686:	07 2e       	mov	r0, r23
    3688:	00 0c       	add	r0, r0
    368a:	88 0b       	sbc	r24, r24
    368c:	99 0b       	sbc	r25, r25
    368e:	95 d5       	rcall	.+2858   	; 0x41ba <__floatsisf>
    3690:	23 e4       	ldi	r18, 0x43	; 67
    3692:	3d ea       	ldi	r19, 0xAD	; 173
    3694:	45 e5       	ldi	r20, 0x55	; 85
    3696:	50 e4       	ldi	r21, 0x40	; 64
    3698:	f5 d4       	rcall	.+2538   	; 0x4084 <__divsf3>
    369a:	5c d5       	rcall	.+2744   	; 0x4154 <__fixsfsi>
    369c:	6c 5c       	subi	r22, 0xCC	; 204
    369e:	77 4f       	sbci	r23, 0xF7	; 247
    36a0:	e3 e2       	ldi	r30, 0x23	; 35
    36a2:	f1 e2       	ldi	r31, 0x21	; 33
    36a4:	80 81       	ld	r24, Z
    36a6:	f8 01       	movw	r30, r16
    36a8:	80 83       	st	Z, r24
    36aa:	89 81       	ldd	r24, Y+1	; 0x01
    36ac:	9a 81       	ldd	r25, Y+2	; 0x02
    36ae:	81 83       	std	Z+1, r24	; 0x01
    36b0:	92 83       	std	Z+2, r25	; 0x02
    36b2:	8d 81       	ldd	r24, Y+5	; 0x05
    36b4:	9e 81       	ldd	r25, Y+6	; 0x06
    36b6:	83 83       	std	Z+3, r24	; 0x03
    36b8:	94 83       	std	Z+4, r25	; 0x04
    36ba:	89 85       	ldd	r24, Y+9	; 0x09
    36bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    36be:	85 83       	std	Z+5, r24	; 0x05
    36c0:	96 83       	std	Z+6, r25	; 0x06
    36c2:	67 83       	std	Z+7, r22	; 0x07
    36c4:	70 87       	std	Z+8, r23	; 0x08
    36c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    36c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    36ca:	81 87       	std	Z+9, r24	; 0x09
    36cc:	92 87       	std	Z+10, r25	; 0x0a
    36ce:	89 89       	ldd	r24, Y+17	; 0x11
    36d0:	9a 89       	ldd	r25, Y+18	; 0x12
    36d2:	83 87       	std	Z+11, r24	; 0x0b
    36d4:	94 87       	std	Z+12, r25	; 0x0c
    36d6:	8d 89       	ldd	r24, Y+21	; 0x15
    36d8:	9e 89       	ldd	r25, Y+22	; 0x16
    36da:	85 87       	std	Z+13, r24	; 0x0d
    36dc:	96 87       	std	Z+14, r25	; 0x0e
    36de:	47 86       	std	Z+15, r4	; 0x0f
    36e0:	50 8a       	std	Z+16, r5	; 0x10
    36e2:	81 8a       	std	Z+17, r8	; 0x11
    36e4:	92 8a       	std	Z+18, r9	; 0x12
    36e6:	c3 8a       	std	Z+19, r12	; 0x13
    36e8:	d4 8a       	std	Z+20, r13	; 0x14
    36ea:	c8 01       	movw	r24, r16
    36ec:	68 96       	adiw	r28, 0x18	; 24
    36ee:	cd bf       	out	0x3d, r28	; 61
    36f0:	de bf       	out	0x3e, r29	; 62
    36f2:	df 91       	pop	r29
    36f4:	cf 91       	pop	r28
    36f6:	1f 91       	pop	r17
    36f8:	0f 91       	pop	r16
    36fa:	ff 90       	pop	r15
    36fc:	ef 90       	pop	r14
    36fe:	df 90       	pop	r13
    3700:	cf 90       	pop	r12
    3702:	bf 90       	pop	r11
    3704:	af 90       	pop	r10
    3706:	9f 90       	pop	r9
    3708:	8f 90       	pop	r8
    370a:	7f 90       	pop	r7
    370c:	6f 90       	pop	r6
    370e:	5f 90       	pop	r5
    3710:	4f 90       	pop	r4
    3712:	08 95       	ret

00003714 <__vector_64>:

ISR(MPU9250_INT_vect)
{
    3714:	1f 92       	push	r1
    3716:	0f 92       	push	r0
    3718:	0f b6       	in	r0, 0x3f	; 63
    371a:	0f 92       	push	r0
    371c:	11 24       	eor	r1, r1
    371e:	8f 93       	push	r24
    3720:	9f 93       	push	r25
    3722:	af 93       	push	r26
    3724:	bf 93       	push	r27
	//printf("jkeavrf\n");
	data_rdy_flag = 1;
    3726:	81 e0       	ldi	r24, 0x01	; 1
    3728:	80 93 22 21 	sts	0x2122, r24	; 0x802122 <data_rdy_flag>
	timerflag = 1;
    372c:	80 93 21 21 	sts	0x2121, r24	; 0x802121 <timerflag>
	time++;
    3730:	80 91 1d 21 	lds	r24, 0x211D	; 0x80211d <time>
    3734:	90 91 1e 21 	lds	r25, 0x211E	; 0x80211e <time+0x1>
    3738:	a0 91 1f 21 	lds	r26, 0x211F	; 0x80211f <time+0x2>
    373c:	b0 91 20 21 	lds	r27, 0x2120	; 0x802120 <time+0x3>
    3740:	01 96       	adiw	r24, 0x01	; 1
    3742:	a1 1d       	adc	r26, r1
    3744:	b1 1d       	adc	r27, r1
    3746:	80 93 1d 21 	sts	0x211D, r24	; 0x80211d <time>
    374a:	90 93 1e 21 	sts	0x211E, r25	; 0x80211e <time+0x1>
    374e:	a0 93 1f 21 	sts	0x211F, r26	; 0x80211f <time+0x2>
    3752:	b0 93 20 21 	sts	0x2120, r27	; 0x802120 <time+0x3>
}
    3756:	bf 91       	pop	r27
    3758:	af 91       	pop	r26
    375a:	9f 91       	pop	r25
    375c:	8f 91       	pop	r24
    375e:	0f 90       	pop	r0
    3760:	0f be       	out	0x3f, r0	; 63
    3762:	0f 90       	pop	r0
    3764:	1f 90       	pop	r1
    3766:	18 95       	reti

00003768 <usart_serial_getchar>:
 * \param usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if usart, uint8_t *data)
{
    3768:	cf 93       	push	r28
    376a:	df 93       	push	r29
    376c:	eb 01       	movw	r28, r22
	*data = usart_getchar(usart);
    376e:	0e 94 c8 02 	call	0x590	; 0x590 <usart_getchar>
    3772:	88 83       	st	Y, r24
}
    3774:	df 91       	pop	r29
    3776:	cf 91       	pop	r28
    3778:	08 95       	ret

0000377a <usart_serial_putchar>:
 *
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(usart_if usart, uint8_t c)
{
	return usart_putchar(usart, c);
    377a:	0c 94 c0 02 	jmp	0x580	; 0x580 <usart_putchar>
}
    377e:	08 95       	ret

00003780 <uart_sd_init>:

#include <asf.h>
#include "uart.h"

void uart_sd_init()
{
    3780:	cf 93       	push	r28
    3782:	df 93       	push	r29
    3784:	cd b7       	in	r28, 0x3d	; 61
    3786:	de b7       	in	r29, 0x3e	; 62
    3788:	27 97       	sbiw	r28, 0x07	; 7
    378a:	cd bf       	out	0x3d, r28	; 61
    378c:	de bf       	out	0x3e, r29	; 62
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    378e:	60 e1       	ldi	r22, 0x10	; 16
    3790:	84 e0       	ldi	r24, 0x04	; 4
    3792:	3a d1       	rcall	.+628    	; 0x3a08 <sysclk_enable_module>
		.charlength =	UART_TERMINAL_SERIAL_CHAR_LEN,
		.paritytype =	UART_TERMINAL_SERIAL_PARITY,
		.stopbits	=	UART_TERMINAL_SERIAL_STOP_BIT
	};
	
	UART_TERMINAL_PORT.DIR |= UART_TERMINAL_TX_PIN;	// set the USART transmit pin to output
    3794:	e0 e6       	ldi	r30, 0x60	; 96
    3796:	f6 e0       	ldi	r31, 0x06	; 6
    3798:	80 81       	ld	r24, Z
    379a:	88 60       	ori	r24, 0x08	; 8
    379c:	80 83       	st	Z, r24
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
    379e:	80 ea       	ldi	r24, 0xA0	; 160
    37a0:	99 e0       	ldi	r25, 0x09	; 9
    37a2:	80 93 3e 22 	sts	0x223E, r24	; 0x80223e <stdio_base>
    37a6:	90 93 3f 22 	sts	0x223F, r25	; 0x80223f <stdio_base+0x1>
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    37aa:	8d eb       	ldi	r24, 0xBD	; 189
    37ac:	9b e1       	ldi	r25, 0x1B	; 27
    37ae:	80 93 3c 22 	sts	0x223C, r24	; 0x80223c <ptr_put>
    37b2:	90 93 3d 22 	sts	0x223D, r25	; 0x80223d <ptr_put+0x1>
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    37b6:	84 eb       	ldi	r24, 0xB4	; 180
    37b8:	9b e1       	ldi	r25, 0x1B	; 27
    37ba:	80 93 23 22 	sts	0x2223, r24	; 0x802223 <ptr_get>
    37be:	90 93 24 22 	sts	0x2224, r25	; 0x802224 <ptr_get+0x1>
static inline bool usart_serial_init(usart_if usart, const
		usart_serial_options_t *options)
{
	// USART options.
	usart_rs232_options_t usart_rs232_options;
	usart_rs232_options.charlength   = options->charlength;
    37c2:	ef e2       	ldi	r30, 0x2F	; 47
    37c4:	f0 e2       	ldi	r31, 0x20	; 32
    37c6:	84 81       	ldd	r24, Z+4	; 0x04
    37c8:	8d 83       	std	Y+5, r24	; 0x05
	usart_rs232_options.paritytype   = options->paritytype;
    37ca:	85 81       	ldd	r24, Z+5	; 0x05
    37cc:	8e 83       	std	Y+6, r24	; 0x06
	usart_rs232_options.stopbits     = options->stopbits;
    37ce:	86 81       	ldd	r24, Z+6	; 0x06
    37d0:	8f 83       	std	Y+7, r24	; 0x07
	usart_rs232_options.baudrate     = options->baudrate;
    37d2:	80 81       	ld	r24, Z
    37d4:	91 81       	ldd	r25, Z+1	; 0x01
    37d6:	a2 81       	ldd	r26, Z+2	; 0x02
    37d8:	b3 81       	ldd	r27, Z+3	; 0x03
    37da:	89 83       	std	Y+1, r24	; 0x01
    37dc:	9a 83       	std	Y+2, r25	; 0x02
    37de:	ab 83       	std	Y+3, r26	; 0x03
    37e0:	bc 83       	std	Y+4, r27	; 0x04
		sysclk_enable_module(SYSCLK_PORT_C,PR_USART1_bm);
	}
#endif
#ifdef USARTD0
	if((uint16_t)usart == (uint16_t)&USARTD0) {
		sysclk_enable_module(SYSCLK_PORT_D,PR_USART0_bm);
    37e2:	60 e1       	ldi	r22, 0x10	; 16
    37e4:	84 e0       	ldi	r24, 0x04	; 4
    37e6:	10 d1       	rcall	.+544    	; 0x3a08 <sysclk_enable_module>
#ifdef USARTF1
	if((uint16_t)usart == (uint16_t)&USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F,PR_USART1_bm);
	}
#endif
	if (usart_init_rs232(usart, &usart_rs232_options)) {
    37e8:	be 01       	movw	r22, r28
    37ea:	6f 5f       	subi	r22, 0xFF	; 255
    37ec:	7f 4f       	sbci	r23, 0xFF	; 255
    37ee:	80 ea       	ldi	r24, 0xA0	; 160
    37f0:	99 e0       	ldi	r25, 0x09	; 9
    37f2:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <usart_init_rs232>
# endif

# if defined(__GNUC__)
#  if (XMEGA || MEGA_RF)
	// For AVR GCC libc print redirection uses fdevopen.
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
    37f6:	61 e5       	ldi	r22, 0x51	; 81
    37f8:	71 e0       	ldi	r23, 0x01	; 1
    37fa:	8e eb       	ldi	r24, 0xBE	; 190
    37fc:	9c e1       	ldi	r25, 0x1C	; 28
    37fe:	dc d6       	rcall	.+3512   	; 0x45b8 <fdevopen>
	
	stdio_serial_init(UART_TERMINAL_SERIAL, &usart_config); // function maps the serial output to printf,
	
    3800:	27 96       	adiw	r28, 0x07	; 7
    3802:	cd bf       	out	0x3d, r28	; 61
    3804:	de bf       	out	0x3e, r29	; 62
    3806:	df 91       	pop	r29
    3808:	cf 91       	pop	r28
    380a:	08 95       	ret

0000380c <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
    380c:	1f 92       	push	r1
    380e:	0f 92       	push	r0
    3810:	0f b6       	in	r0, 0x3f	; 63
    3812:	0f 92       	push	r0
    3814:	11 24       	eor	r1, r1
    3816:	2f 93       	push	r18
    3818:	3f 93       	push	r19
    381a:	4f 93       	push	r20
    381c:	5f 93       	push	r21
    381e:	6f 93       	push	r22
    3820:	7f 93       	push	r23
    3822:	8f 93       	push	r24
    3824:	9f 93       	push	r25
    3826:	af 93       	push	r26
    3828:	bf 93       	push	r27
    382a:	ef 93       	push	r30
    382c:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
    382e:	40 91 24 02 	lds	r20, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
    3832:	50 91 25 02 	lds	r21, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x700225>
    3836:	e0 91 25 22 	lds	r30, 0x2225	; 0x802225 <adca_callback>
    383a:	f0 91 26 22 	lds	r31, 0x2226	; 0x802226 <adca_callback+0x1>
    383e:	61 e0       	ldi	r22, 0x01	; 1
    3840:	80 e0       	ldi	r24, 0x00	; 0
    3842:	92 e0       	ldi	r25, 0x02	; 2
    3844:	09 95       	icall
}
    3846:	ff 91       	pop	r31
    3848:	ef 91       	pop	r30
    384a:	bf 91       	pop	r27
    384c:	af 91       	pop	r26
    384e:	9f 91       	pop	r25
    3850:	8f 91       	pop	r24
    3852:	7f 91       	pop	r23
    3854:	6f 91       	pop	r22
    3856:	5f 91       	pop	r21
    3858:	4f 91       	pop	r20
    385a:	3f 91       	pop	r19
    385c:	2f 91       	pop	r18
    385e:	0f 90       	pop	r0
    3860:	0f be       	out	0x3f, r0	; 63
    3862:	0f 90       	pop	r0
    3864:	1f 90       	pop	r1
    3866:	18 95       	reti

00003868 <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
    3868:	1f 92       	push	r1
    386a:	0f 92       	push	r0
    386c:	0f b6       	in	r0, 0x3f	; 63
    386e:	0f 92       	push	r0
    3870:	11 24       	eor	r1, r1
    3872:	2f 93       	push	r18
    3874:	3f 93       	push	r19
    3876:	4f 93       	push	r20
    3878:	5f 93       	push	r21
    387a:	6f 93       	push	r22
    387c:	7f 93       	push	r23
    387e:	8f 93       	push	r24
    3880:	9f 93       	push	r25
    3882:	af 93       	push	r26
    3884:	bf 93       	push	r27
    3886:	ef 93       	push	r30
    3888:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
    388a:	40 91 2c 02 	lds	r20, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
    388e:	50 91 2d 02 	lds	r21, 0x022D	; 0x80022d <__TEXT_REGION_LENGTH__+0x70022d>
    3892:	e0 91 25 22 	lds	r30, 0x2225	; 0x802225 <adca_callback>
    3896:	f0 91 26 22 	lds	r31, 0x2226	; 0x802226 <adca_callback+0x1>
    389a:	62 e0       	ldi	r22, 0x02	; 2
    389c:	80 e0       	ldi	r24, 0x00	; 0
    389e:	92 e0       	ldi	r25, 0x02	; 2
    38a0:	09 95       	icall
}
    38a2:	ff 91       	pop	r31
    38a4:	ef 91       	pop	r30
    38a6:	bf 91       	pop	r27
    38a8:	af 91       	pop	r26
    38aa:	9f 91       	pop	r25
    38ac:	8f 91       	pop	r24
    38ae:	7f 91       	pop	r23
    38b0:	6f 91       	pop	r22
    38b2:	5f 91       	pop	r21
    38b4:	4f 91       	pop	r20
    38b6:	3f 91       	pop	r19
    38b8:	2f 91       	pop	r18
    38ba:	0f 90       	pop	r0
    38bc:	0f be       	out	0x3f, r0	; 63
    38be:	0f 90       	pop	r0
    38c0:	1f 90       	pop	r1
    38c2:	18 95       	reti

000038c4 <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
    38c4:	1f 92       	push	r1
    38c6:	0f 92       	push	r0
    38c8:	0f b6       	in	r0, 0x3f	; 63
    38ca:	0f 92       	push	r0
    38cc:	11 24       	eor	r1, r1
    38ce:	2f 93       	push	r18
    38d0:	3f 93       	push	r19
    38d2:	4f 93       	push	r20
    38d4:	5f 93       	push	r21
    38d6:	6f 93       	push	r22
    38d8:	7f 93       	push	r23
    38da:	8f 93       	push	r24
    38dc:	9f 93       	push	r25
    38de:	af 93       	push	r26
    38e0:	bf 93       	push	r27
    38e2:	ef 93       	push	r30
    38e4:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
    38e6:	40 91 34 02 	lds	r20, 0x0234	; 0x800234 <__TEXT_REGION_LENGTH__+0x700234>
    38ea:	50 91 35 02 	lds	r21, 0x0235	; 0x800235 <__TEXT_REGION_LENGTH__+0x700235>
    38ee:	e0 91 25 22 	lds	r30, 0x2225	; 0x802225 <adca_callback>
    38f2:	f0 91 26 22 	lds	r31, 0x2226	; 0x802226 <adca_callback+0x1>
    38f6:	64 e0       	ldi	r22, 0x04	; 4
    38f8:	80 e0       	ldi	r24, 0x00	; 0
    38fa:	92 e0       	ldi	r25, 0x02	; 2
    38fc:	09 95       	icall
}
    38fe:	ff 91       	pop	r31
    3900:	ef 91       	pop	r30
    3902:	bf 91       	pop	r27
    3904:	af 91       	pop	r26
    3906:	9f 91       	pop	r25
    3908:	8f 91       	pop	r24
    390a:	7f 91       	pop	r23
    390c:	6f 91       	pop	r22
    390e:	5f 91       	pop	r21
    3910:	4f 91       	pop	r20
    3912:	3f 91       	pop	r19
    3914:	2f 91       	pop	r18
    3916:	0f 90       	pop	r0
    3918:	0f be       	out	0x3f, r0	; 63
    391a:	0f 90       	pop	r0
    391c:	1f 90       	pop	r1
    391e:	18 95       	reti

00003920 <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
    3920:	1f 92       	push	r1
    3922:	0f 92       	push	r0
    3924:	0f b6       	in	r0, 0x3f	; 63
    3926:	0f 92       	push	r0
    3928:	11 24       	eor	r1, r1
    392a:	2f 93       	push	r18
    392c:	3f 93       	push	r19
    392e:	4f 93       	push	r20
    3930:	5f 93       	push	r21
    3932:	6f 93       	push	r22
    3934:	7f 93       	push	r23
    3936:	8f 93       	push	r24
    3938:	9f 93       	push	r25
    393a:	af 93       	push	r26
    393c:	bf 93       	push	r27
    393e:	ef 93       	push	r30
    3940:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
    3942:	40 91 3c 02 	lds	r20, 0x023C	; 0x80023c <__TEXT_REGION_LENGTH__+0x70023c>
    3946:	50 91 3d 02 	lds	r21, 0x023D	; 0x80023d <__TEXT_REGION_LENGTH__+0x70023d>
    394a:	e0 91 25 22 	lds	r30, 0x2225	; 0x802225 <adca_callback>
    394e:	f0 91 26 22 	lds	r31, 0x2226	; 0x802226 <adca_callback+0x1>
    3952:	68 e0       	ldi	r22, 0x08	; 8
    3954:	80 e0       	ldi	r24, 0x00	; 0
    3956:	92 e0       	ldi	r25, 0x02	; 2
    3958:	09 95       	icall
}
    395a:	ff 91       	pop	r31
    395c:	ef 91       	pop	r30
    395e:	bf 91       	pop	r27
    3960:	af 91       	pop	r26
    3962:	9f 91       	pop	r25
    3964:	8f 91       	pop	r24
    3966:	7f 91       	pop	r23
    3968:	6f 91       	pop	r22
    396a:	5f 91       	pop	r21
    396c:	4f 91       	pop	r20
    396e:	3f 91       	pop	r19
    3970:	2f 91       	pop	r18
    3972:	0f 90       	pop	r0
    3974:	0f be       	out	0x3f, r0	; 63
    3976:	0f 90       	pop	r0
    3978:	1f 90       	pop	r1
    397a:	18 95       	reti

0000397c <_write>:
#elif (defined(__GNUC__) && (XMEGA || MEGA))

int _write (char c, int *f);

int _write (char c, int *f)
{
    397c:	68 2f       	mov	r22, r24
	if (ptr_put(stdio_base, c) < 0) {
    397e:	80 91 3e 22 	lds	r24, 0x223E	; 0x80223e <stdio_base>
    3982:	90 91 3f 22 	lds	r25, 0x223F	; 0x80223f <stdio_base+0x1>
    3986:	e0 91 3c 22 	lds	r30, 0x223C	; 0x80223c <ptr_put>
    398a:	f0 91 3d 22 	lds	r31, 0x223D	; 0x80223d <ptr_put+0x1>
    398e:	09 95       	icall
    3990:	99 23       	and	r25, r25
    3992:	1c f0       	brlt	.+6      	; 0x399a <_write+0x1e>
		return -1;
	}
	return 1;
    3994:	81 e0       	ldi	r24, 0x01	; 1
    3996:	90 e0       	ldi	r25, 0x00	; 0
    3998:	08 95       	ret
int _write (char c, int *f);

int _write (char c, int *f)
{
	if (ptr_put(stdio_base, c) < 0) {
		return -1;
    399a:	8f ef       	ldi	r24, 0xFF	; 255
    399c:	9f ef       	ldi	r25, 0xFF	; 255
	}
	return 1;
}
    399e:	08 95       	ret

000039a0 <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
    39a0:	cf 93       	push	r28
    39a2:	df 93       	push	r29
    39a4:	00 d0       	rcall	.+0      	; 0x39a6 <sysclk_init+0x6>
    39a6:	cd b7       	in	r28, 0x3d	; 61
    39a8:	de b7       	in	r29, 0x3e	; 62
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
    39aa:	8f ef       	ldi	r24, 0xFF	; 255
    39ac:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
    39b0:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
    39b4:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
    39b8:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
    39bc:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
    39c0:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
    39c4:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    39c8:	8f b7       	in	r24, 0x3f	; 63
    39ca:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
    39cc:	f8 94       	cli
	return flags;
    39ce:	9a 81       	ldd	r25, Y+2	; 0x02
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    39d0:	e0 e5       	ldi	r30, 0x50	; 80
    39d2:	f0 e0       	ldi	r31, 0x00	; 0
    39d4:	80 81       	ld	r24, Z
    39d6:	82 60       	ori	r24, 0x02	; 2
    39d8:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    39da:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    39dc:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    39de:	81 ff       	sbrs	r24, 1
    39e0:	fd cf       	rjmp	.-6      	; 0x39dc <sysclk_init+0x3c>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
    39e2:	61 e0       	ldi	r22, 0x01	; 1
    39e4:	80 e4       	ldi	r24, 0x40	; 64
    39e6:	90 e0       	ldi	r25, 0x00	; 0
    39e8:	2f d0       	rcall	.+94     	; 0x3a48 <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    39ea:	8f b7       	in	r24, 0x3f	; 63
    39ec:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    39ee:	f8 94       	cli
	return flags;
    39f0:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
    39f2:	e0 e5       	ldi	r30, 0x50	; 80
    39f4:	f0 e0       	ldi	r31, 0x00	; 0
    39f6:	80 81       	ld	r24, Z
    39f8:	8e 7f       	andi	r24, 0xFE	; 254
    39fa:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    39fc:	9f bf       	out	0x3f, r25	; 63
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}
    39fe:	0f 90       	pop	r0
    3a00:	0f 90       	pop	r0
    3a02:	df 91       	pop	r29
    3a04:	cf 91       	pop	r28
    3a06:	08 95       	ret

00003a08 <sysclk_enable_module>:

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
    3a08:	cf 93       	push	r28
    3a0a:	df 93       	push	r29
    3a0c:	1f 92       	push	r1
    3a0e:	cd b7       	in	r28, 0x3d	; 61
    3a10:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3a12:	9f b7       	in	r25, 0x3f	; 63
    3a14:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    3a16:	f8 94       	cli
	return flags;
    3a18:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
    3a1a:	e8 2f       	mov	r30, r24
    3a1c:	f0 e0       	ldi	r31, 0x00	; 0
    3a1e:	e0 59       	subi	r30, 0x90	; 144
    3a20:	ff 4f       	sbci	r31, 0xFF	; 255
    3a22:	60 95       	com	r22
    3a24:	80 81       	ld	r24, Z
    3a26:	68 23       	and	r22, r24
    3a28:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3a2a:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
    3a2c:	0f 90       	pop	r0
    3a2e:	df 91       	pop	r29
    3a30:	cf 91       	pop	r28
    3a32:	08 95       	ret

00003a34 <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    3a34:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
    3a38:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    3a3a:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    3a3c:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	lpm r24, Z                ; Perform an LPM to read out byte
    3a40:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    3a42:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    3a46:	08 95       	ret

00003a48 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    3a48:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    3a4a:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    3a4c:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    3a4e:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    3a50:	60 83       	st	Z, r22
	ret                             // Return to caller
    3a52:	08 95       	ret

00003a54 <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
    3a54:	08 95       	ret

00003a56 <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
    3a56:	04 c0       	rjmp	.+8      	; 0x3a60 <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
    3a58:	61 50       	subi	r22, 0x01	; 1
    3a5a:	71 09       	sbc	r23, r1
    3a5c:	81 09       	sbc	r24, r1
    3a5e:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
    3a60:	61 15       	cp	r22, r1
    3a62:	71 05       	cpc	r23, r1
    3a64:	81 05       	cpc	r24, r1
    3a66:	91 05       	cpc	r25, r1
    3a68:	b9 f7       	brne	.-18     	; 0x3a58 <__portable_avr_delay_cycles+0x2>
    3a6a:	08 95       	ret

00003a6c <sysclk_enable_peripheral_clock>:
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    3a6c:	00 97       	sbiw	r24, 0x00	; 0
    3a6e:	09 f4       	brne	.+2      	; 0x3a72 <sysclk_enable_peripheral_clock+0x6>
    3a70:	bd c0       	rjmp	.+378    	; 0x3bec <sysclk_enable_peripheral_clock+0x180>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    3a72:	80 3c       	cpi	r24, 0xC0	; 192
    3a74:	91 05       	cpc	r25, r1
    3a76:	21 f4       	brne	.+8      	; 0x3a80 <sysclk_enable_peripheral_clock+0x14>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    3a78:	60 e1       	ldi	r22, 0x10	; 16
    3a7a:	80 e0       	ldi	r24, 0x00	; 0
    3a7c:	c5 cf       	rjmp	.-118    	; 0x3a08 <sysclk_enable_module>
    3a7e:	08 95       	ret
	else if (module == &EBI) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
    3a80:	81 15       	cp	r24, r1
    3a82:	24 e0       	ldi	r18, 0x04	; 4
    3a84:	92 07       	cpc	r25, r18
    3a86:	21 f4       	brne	.+8      	; 0x3a90 <sysclk_enable_peripheral_clock+0x24>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    3a88:	64 e0       	ldi	r22, 0x04	; 4
    3a8a:	80 e0       	ldi	r24, 0x00	; 0
    3a8c:	bd cf       	rjmp	.-134    	; 0x3a08 <sysclk_enable_module>
    3a8e:	08 95       	ret
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    3a90:	80 38       	cpi	r24, 0x80	; 128
    3a92:	21 e0       	ldi	r18, 0x01	; 1
    3a94:	92 07       	cpc	r25, r18
    3a96:	21 f4       	brne	.+8      	; 0x3aa0 <sysclk_enable_peripheral_clock+0x34>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    3a98:	62 e0       	ldi	r22, 0x02	; 2
    3a9a:	80 e0       	ldi	r24, 0x00	; 0
    3a9c:	b5 cf       	rjmp	.-150    	; 0x3a08 <sysclk_enable_module>
    3a9e:	08 95       	ret
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    3aa0:	81 15       	cp	r24, r1
    3aa2:	21 e0       	ldi	r18, 0x01	; 1
    3aa4:	92 07       	cpc	r25, r18
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    3aa6:	21 f4       	brne	.+8      	; 0x3ab0 <sysclk_enable_peripheral_clock+0x44>
    3aa8:	61 e0       	ldi	r22, 0x01	; 1
    3aaa:	80 e0       	ldi	r24, 0x00	; 0
    3aac:	ad cf       	rjmp	.-166    	; 0x3a08 <sysclk_enable_module>
    3aae:	08 95       	ret
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    3ab0:	80 38       	cpi	r24, 0x80	; 128
    3ab2:	23 e0       	ldi	r18, 0x03	; 3
    3ab4:	92 07       	cpc	r25, r18
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    3ab6:	21 f4       	brne	.+8      	; 0x3ac0 <sysclk_enable_peripheral_clock+0x54>
    3ab8:	61 e0       	ldi	r22, 0x01	; 1
    3aba:	81 e0       	ldi	r24, 0x01	; 1
    3abc:	a5 cf       	rjmp	.-182    	; 0x3a08 <sysclk_enable_module>
    3abe:	08 95       	ret
	else if (module == &ACB) {
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    3ac0:	81 15       	cp	r24, r1
    3ac2:	22 e0       	ldi	r18, 0x02	; 2
    3ac4:	92 07       	cpc	r25, r18
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    3ac6:	21 f4       	brne	.+8      	; 0x3ad0 <sysclk_enable_peripheral_clock+0x64>
    3ac8:	62 e0       	ldi	r22, 0x02	; 2
    3aca:	81 e0       	ldi	r24, 0x01	; 1
    3acc:	9d cf       	rjmp	.-198    	; 0x3a08 <sysclk_enable_module>
    3ace:	08 95       	ret
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    3ad0:	80 32       	cpi	r24, 0x20	; 32
    3ad2:	23 e0       	ldi	r18, 0x03	; 3
    3ad4:	92 07       	cpc	r25, r18
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    3ad6:	21 f4       	brne	.+8      	; 0x3ae0 <sysclk_enable_peripheral_clock+0x74>
    3ad8:	64 e0       	ldi	r22, 0x04	; 4
    3ada:	82 e0       	ldi	r24, 0x02	; 2
    3adc:	95 cf       	rjmp	.-214    	; 0x3a08 <sysclk_enable_module>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    3ade:	08 95       	ret
    3ae0:	81 15       	cp	r24, r1
    3ae2:	28 e0       	ldi	r18, 0x08	; 8
    3ae4:	92 07       	cpc	r25, r18
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    3ae6:	21 f4       	brne	.+8      	; 0x3af0 <sysclk_enable_peripheral_clock+0x84>
    3ae8:	61 e0       	ldi	r22, 0x01	; 1
    3aea:	83 e0       	ldi	r24, 0x03	; 3
    3aec:	8d cf       	rjmp	.-230    	; 0x3a08 <sysclk_enable_module>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    3aee:	08 95       	ret
    3af0:	81 15       	cp	r24, r1
    3af2:	29 e0       	ldi	r18, 0x09	; 9
    3af4:	92 07       	cpc	r25, r18
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    3af6:	21 f4       	brne	.+8      	; 0x3b00 <sysclk_enable_peripheral_clock+0x94>
    3af8:	61 e0       	ldi	r22, 0x01	; 1
    3afa:	84 e0       	ldi	r24, 0x04	; 4
    3afc:	85 cf       	rjmp	.-246    	; 0x3a08 <sysclk_enable_module>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    3afe:	08 95       	ret
    3b00:	81 15       	cp	r24, r1
    3b02:	2a e0       	ldi	r18, 0x0A	; 10
    3b04:	92 07       	cpc	r25, r18
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    3b06:	21 f4       	brne	.+8      	; 0x3b10 <sysclk_enable_peripheral_clock+0xa4>
    3b08:	61 e0       	ldi	r22, 0x01	; 1
    3b0a:	85 e0       	ldi	r24, 0x05	; 5
    3b0c:	7d cf       	rjmp	.-262    	; 0x3a08 <sysclk_enable_module>
	else if (module == &TCF0) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    3b0e:	08 95       	ret
    3b10:	80 34       	cpi	r24, 0x40	; 64
    3b12:	28 e0       	ldi	r18, 0x08	; 8
    3b14:	92 07       	cpc	r25, r18
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    3b16:	21 f4       	brne	.+8      	; 0x3b20 <sysclk_enable_peripheral_clock+0xb4>
    3b18:	62 e0       	ldi	r22, 0x02	; 2
    3b1a:	83 e0       	ldi	r24, 0x03	; 3
    3b1c:	75 cf       	rjmp	.-278    	; 0x3a08 <sysclk_enable_module>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    3b1e:	08 95       	ret
    3b20:	80 34       	cpi	r24, 0x40	; 64
    3b22:	29 e0       	ldi	r18, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    3b24:	92 07       	cpc	r25, r18
    3b26:	21 f4       	brne	.+8      	; 0x3b30 <sysclk_enable_peripheral_clock+0xc4>
    3b28:	62 e0       	ldi	r22, 0x02	; 2
    3b2a:	84 e0       	ldi	r24, 0x04	; 4
    3b2c:	6d cf       	rjmp	.-294    	; 0x3a08 <sysclk_enable_module>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    3b2e:	08 95       	ret
    3b30:	80 39       	cpi	r24, 0x90	; 144
    3b32:	28 e0       	ldi	r18, 0x08	; 8
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    3b34:	92 07       	cpc	r25, r18
    3b36:	21 f4       	brne	.+8      	; 0x3b40 <sysclk_enable_peripheral_clock+0xd4>
    3b38:	64 e0       	ldi	r22, 0x04	; 4
    3b3a:	83 e0       	ldi	r24, 0x03	; 3
    3b3c:	65 cf       	rjmp	.-310    	; 0x3a08 <sysclk_enable_module>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    3b3e:	08 95       	ret
    3b40:	80 39       	cpi	r24, 0x90	; 144
    3b42:	29 e0       	ldi	r18, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    3b44:	92 07       	cpc	r25, r18
    3b46:	21 f4       	brne	.+8      	; 0x3b50 <sysclk_enable_peripheral_clock+0xe4>
    3b48:	64 e0       	ldi	r22, 0x04	; 4
    3b4a:	84 e0       	ldi	r24, 0x04	; 4
    3b4c:	5d cf       	rjmp	.-326    	; 0x3a08 <sysclk_enable_module>
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    3b4e:	08 95       	ret
    3b50:	80 39       	cpi	r24, 0x90	; 144
    3b52:	2a e0       	ldi	r18, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    3b54:	92 07       	cpc	r25, r18
    3b56:	21 f4       	brne	.+8      	; 0x3b60 <sysclk_enable_peripheral_clock+0xf4>
    3b58:	64 e0       	ldi	r22, 0x04	; 4
    3b5a:	85 e0       	ldi	r24, 0x05	; 5
	else if (module == &HIRESF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    3b5c:	55 cf       	rjmp	.-342    	; 0x3a08 <sysclk_enable_module>
    3b5e:	08 95       	ret
    3b60:	80 3c       	cpi	r24, 0xC0	; 192
    3b62:	28 e0       	ldi	r18, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    3b64:	92 07       	cpc	r25, r18
    3b66:	21 f4       	brne	.+8      	; 0x3b70 <sysclk_enable_peripheral_clock+0x104>
    3b68:	68 e0       	ldi	r22, 0x08	; 8
    3b6a:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    3b6c:	4d cf       	rjmp	.-358    	; 0x3a08 <sysclk_enable_module>
    3b6e:	08 95       	ret
    3b70:	80 3c       	cpi	r24, 0xC0	; 192
    3b72:	29 e0       	ldi	r18, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    3b74:	92 07       	cpc	r25, r18
    3b76:	21 f4       	brne	.+8      	; 0x3b80 <sysclk_enable_peripheral_clock+0x114>
    3b78:	68 e0       	ldi	r22, 0x08	; 8
    3b7a:	84 e0       	ldi	r24, 0x04	; 4
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    3b7c:	45 cf       	rjmp	.-374    	; 0x3a08 <sysclk_enable_module>
    3b7e:	08 95       	ret
    3b80:	80 3a       	cpi	r24, 0xA0	; 160
    3b82:	28 e0       	ldi	r18, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    3b84:	92 07       	cpc	r25, r18
    3b86:	21 f4       	brne	.+8      	; 0x3b90 <sysclk_enable_peripheral_clock+0x124>
    3b88:	60 e1       	ldi	r22, 0x10	; 16
    3b8a:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    3b8c:	3d cf       	rjmp	.-390    	; 0x3a08 <sysclk_enable_module>
    3b8e:	08 95       	ret
    3b90:	80 3a       	cpi	r24, 0xA0	; 160
    3b92:	29 e0       	ldi	r18, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    3b94:	92 07       	cpc	r25, r18
    3b96:	21 f4       	brne	.+8      	; 0x3ba0 <sysclk_enable_peripheral_clock+0x134>
    3b98:	60 e1       	ldi	r22, 0x10	; 16
    3b9a:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    3b9c:	35 cf       	rjmp	.-406    	; 0x3a08 <sysclk_enable_module>
    3b9e:	08 95       	ret
    3ba0:	80 3a       	cpi	r24, 0xA0	; 160
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    3ba2:	2a e0       	ldi	r18, 0x0A	; 10
    3ba4:	92 07       	cpc	r25, r18
    3ba6:	21 f4       	brne	.+8      	; 0x3bb0 <sysclk_enable_peripheral_clock+0x144>
    3ba8:	60 e1       	ldi	r22, 0x10	; 16
    3baa:	85 e0       	ldi	r24, 0x05	; 5
	else if (module == &USARTF0) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    3bac:	2d cf       	rjmp	.-422    	; 0x3a08 <sysclk_enable_module>
    3bae:	08 95       	ret
    3bb0:	80 3b       	cpi	r24, 0xB0	; 176
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    3bb2:	28 e0       	ldi	r18, 0x08	; 8
    3bb4:	92 07       	cpc	r25, r18
    3bb6:	21 f4       	brne	.+8      	; 0x3bc0 <sysclk_enable_peripheral_clock+0x154>
    3bb8:	60 e2       	ldi	r22, 0x20	; 32
    3bba:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    3bbc:	25 cf       	rjmp	.-438    	; 0x3a08 <sysclk_enable_module>
    3bbe:	08 95       	ret
    3bc0:	80 3b       	cpi	r24, 0xB0	; 176
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    3bc2:	29 e0       	ldi	r18, 0x09	; 9
    3bc4:	92 07       	cpc	r25, r18
    3bc6:	21 f4       	brne	.+8      	; 0x3bd0 <sysclk_enable_peripheral_clock+0x164>
    3bc8:	60 e2       	ldi	r22, 0x20	; 32
    3bca:	84 e0       	ldi	r24, 0x04	; 4
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    3bcc:	1d cf       	rjmp	.-454    	; 0x3a08 <sysclk_enable_module>
    3bce:	08 95       	ret
    3bd0:	80 38       	cpi	r24, 0x80	; 128
    3bd2:	24 e0       	ldi	r18, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    3bd4:	92 07       	cpc	r25, r18
    3bd6:	21 f4       	brne	.+8      	; 0x3be0 <sysclk_enable_peripheral_clock+0x174>
    3bd8:	60 e4       	ldi	r22, 0x40	; 64
    3bda:	83 e0       	ldi	r24, 0x03	; 3
    3bdc:	15 cf       	rjmp	.-470    	; 0x3a08 <sysclk_enable_module>
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    3bde:	08 95       	ret
    3be0:	80 3a       	cpi	r24, 0xA0	; 160
    3be2:	94 40       	sbci	r25, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    3be4:	19 f4       	brne	.+6      	; 0x3bec <sysclk_enable_peripheral_clock+0x180>
    3be6:	60 e4       	ldi	r22, 0x40	; 64
    3be8:	85 e0       	ldi	r24, 0x05	; 5
    3bea:	0e cf       	rjmp	.-484    	; 0x3a08 <sysclk_enable_module>
    3bec:	08 95       	ret

00003bee <main>:
#include "Drivers/uart.h"
#include "Drivers/adc.h"
#include "Drivers/imu.h"
#include "Drivers/mpu9250.h"
int main (void)
{
    3bee:	cf 93       	push	r28
    3bf0:	df 93       	push	r29
    3bf2:	cd b7       	in	r28, 0x3d	; 61
    3bf4:	de b7       	in	r29, 0x3e	; 62
    3bf6:	c3 54       	subi	r28, 0x43	; 67
    3bf8:	d1 09       	sbc	r29, r1
    3bfa:	cd bf       	out	0x3d, r28	; 61
    3bfc:	de bf       	out	0x3e, r29	; 62
	// ************** INITS ************** //
	board_init();
    3bfe:	2a df       	rcall	.-428    	; 0x3a54 <board_init>
	adc_init();
    3c00:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <adc_init>
	delay_ms(10);
    3c04:	66 e5       	ldi	r22, 0x56	; 86
    3c06:	70 ed       	ldi	r23, 0xD0	; 208
    3c08:	80 e0       	ldi	r24, 0x00	; 0
    3c0a:	90 e0       	ldi	r25, 0x00	; 0
	sysclk_init();
    3c0c:	24 df       	rcall	.-440    	; 0x3a56 <__portable_avr_delay_cycles>
    3c0e:	c8 de       	rcall	.-624    	; 0x39a0 <sysclk_init>
	uart_sd_init();
    3c10:	b7 dd       	rcall	.-1170   	; 0x3780 <uart_sd_init>
    3c12:	6b ea       	ldi	r22, 0xAB	; 171
	delay_ms(20);
    3c14:	70 ea       	ldi	r23, 0xA0	; 160
    3c16:	81 e0       	ldi	r24, 0x01	; 1
    3c18:	90 e0       	ldi	r25, 0x00	; 0
    3c1a:	1d df       	rcall	.-454    	; 0x3a56 <__portable_avr_delay_cycles>
    3c1c:	00 e4       	ldi	r16, 0x40	; 64
	
	PORTC.DIR = 0b11111111; // Define direction of LED pins
    3c1e:	16 e0       	ldi	r17, 0x06	; 6
    3c20:	ff 24       	eor	r15, r15
    3c22:	fa 94       	dec	r15
    3c24:	d8 01       	movw	r26, r16
    3c26:	fc 92       	st	X, r15
    3c28:	14 96       	adiw	r26, 0x04	; 4
	PORTC.OUT = 0b11111111; // Turn LED Off
    3c2a:	fc 92       	st	X, r15
	delay_ms(200);
    3c2c:	6b ea       	ldi	r22, 0xAB	; 171
    3c2e:	76 e4       	ldi	r23, 0x46	; 70
    3c30:	80 e1       	ldi	r24, 0x10	; 16
    3c32:	90 e0       	ldi	r25, 0x00	; 0
    3c34:	10 df       	rcall	.-480    	; 0x3a56 <__portable_avr_delay_cycles>
    3c36:	f8 01       	movw	r30, r16
	PORTC.OUT = 0b00000000; // Turn LED On
    3c38:	14 82       	std	Z+4, r1	; 0x04
	delay_ms(200);
    3c3a:	6b ea       	ldi	r22, 0xAB	; 171
    3c3c:	76 e4       	ldi	r23, 0x46	; 70
    3c3e:	80 e1       	ldi	r24, 0x10	; 16
    3c40:	90 e0       	ldi	r25, 0x00	; 0
    3c42:	09 df       	rcall	.-494    	; 0x3a56 <__portable_avr_delay_cycles>
    3c44:	0f 2e       	mov	r0, r31
	
	
	
	//IMU initialization
	twi_options_t m_options = {
    3c46:	f9 e0       	ldi	r31, 0x09	; 9
    3c48:	ef 2e       	mov	r14, r31
    3c4a:	f0 2d       	mov	r31, r0
    3c4c:	9e 01       	movw	r18, r28
    3c4e:	2f 5f       	subi	r18, 0xFF	; 255
    3c50:	3f 4f       	sbci	r19, 0xFF	; 255
    3c52:	69 01       	movw	r12, r18
    3c54:	d9 01       	movw	r26, r18
    3c56:	ee 2d       	mov	r30, r14
    3c58:	1d 92       	st	X+, r1
    3c5a:	ea 95       	dec	r30
    3c5c:	e9 f7       	brne	.-6      	; 0x3c58 <main+0x6a>
    3c5e:	80 e8       	ldi	r24, 0x80	; 128
    3c60:	9a e1       	ldi	r25, 0x1A	; 26
    3c62:	a6 e0       	ldi	r26, 0x06	; 6
    3c64:	b0 e0       	ldi	r27, 0x00	; 0
    3c66:	89 83       	std	Y+1, r24	; 0x01
    3c68:	9a 83       	std	Y+2, r25	; 0x02
    3c6a:	ab 83       	std	Y+3, r26	; 0x03
    3c6c:	bc 83       	std	Y+4, r27	; 0x04
    3c6e:	83 e2       	ldi	r24, 0x23	; 35
    3c70:	90 e0       	ldi	r25, 0x00	; 0
    3c72:	a0 e0       	ldi	r26, 0x00	; 0
    3c74:	b0 e0       	ldi	r27, 0x00	; 0
    3c76:	8d 83       	std	Y+5, r24	; 0x05
    3c78:	9e 83       	std	Y+6, r25	; 0x06
    3c7a:	af 83       	std	Y+7, r26	; 0x07
		.speed = 400000,
		.speed_reg = TWI_BAUD(32000000, 400000),
	};
	sysclk_enable_peripheral_clock(&TWIE);
    3c7c:	b8 87       	std	Y+8, r27	; 0x08
    3c7e:	80 ea       	ldi	r24, 0xA0	; 160
    3c80:	94 e0       	ldi	r25, 0x04	; 4
    3c82:	f4 de       	rcall	.-536    	; 0x3a6c <sysclk_enable_peripheral_clock>
	sysclk_enable_peripheral_clock(&ADCA);
    3c84:	80 e0       	ldi	r24, 0x00	; 0
    3c86:	92 e0       	ldi	r25, 0x02	; 2
    3c88:	f1 de       	rcall	.-542    	; 0x3a6c <sysclk_enable_peripheral_clock>
    3c8a:	5e 01       	movw	r10, r28
	
	twi_master_options_t opt = {
    3c8c:	fa e0       	ldi	r31, 0x0A	; 10
    3c8e:	af 0e       	add	r10, r31
    3c90:	b1 1c       	adc	r11, r1
    3c92:	d5 01       	movw	r26, r10
    3c94:	1d 92       	st	X+, r1
    3c96:	ea 94       	dec	r14
    3c98:	e9 f7       	brne	.-6      	; 0x3c94 <main+0xa6>
    3c9a:	80 e5       	ldi	r24, 0x50	; 80
    3c9c:	93 ec       	ldi	r25, 0xC3	; 195
    3c9e:	a0 e0       	ldi	r26, 0x00	; 0
    3ca0:	b0 e0       	ldi	r27, 0x00	; 0
    3ca2:	8a 87       	std	Y+10, r24	; 0x0a
    3ca4:	9b 87       	std	Y+11, r25	; 0x0b
    3ca6:	ac 87       	std	Y+12, r26	; 0x0c
    3ca8:	bd 87       	std	Y+13, r27	; 0x0d
    3caa:	80 e5       	ldi	r24, 0x50	; 80
    3cac:	8a 8b       	std	Y+18, r24	; 0x12
    3cae:	8b e3       	ldi	r24, 0x3B	; 59
typedef TWI_t *twi_master_t;
typedef twi_options_t twi_master_options_t;

static inline int twi_master_setup(twi_master_t twi, twi_master_options_t *opt)
{
	opt->speed_reg = TWI_BAUD(sysclk_get_cpu_hz(),opt->speed);
    3cb0:	91 e0       	ldi	r25, 0x01	; 1
    3cb2:	a0 e0       	ldi	r26, 0x00	; 0
    3cb4:	b0 e0       	ldi	r27, 0x00	; 0
    3cb6:	8e 87       	std	Y+14, r24	; 0x0e
    3cb8:	9f 87       	std	Y+15, r25	; 0x0f
    3cba:	a8 8b       	std	Y+16, r26	; 0x10
    3cbc:	b9 8b       	std	Y+17, r27	; 0x11

	sysclk_enable_peripheral_clock(twi);
    3cbe:	80 ea       	ldi	r24, 0xA0	; 160
    3cc0:	94 e0       	ldi	r25, 0x04	; 4
    3cc2:	d4 de       	rcall	.-600    	; 0x3a6c <sysclk_enable_peripheral_clock>
    3cc4:	b5 01       	movw	r22, r10

	return twi_master_init(twi,opt);
    3cc6:	80 ea       	ldi	r24, 0xA0	; 160
    3cc8:	94 e0       	ldi	r25, 0x04	; 4
    3cca:	0e 94 47 02 	call	0x48e	; 0x48e <twi_master_init>
    3cce:	b6 01       	movw	r22, r12
		.speed = 50000,
		.chip  = 0x50
	};

	twi_master_setup(&TWIE, &opt);
	twi_master_init(&TWIE, &m_options);
    3cd0:	80 ea       	ldi	r24, 0xA0	; 160
    3cd2:	94 e0       	ldi	r25, 0x04	; 4
    3cd4:	0e 94 47 02 	call	0x48e	; 0x48e <twi_master_init>
    3cd8:	e0 ea       	ldi	r30, 0xA0	; 160
 *
 * \param twi       Base address of the TWI instance.
 */
static inline void twi_master_enable(TWI_t *twi)
{
  twi->MASTER.CTRLA |= TWI_MASTER_ENABLE_bm;
    3cda:	f4 e0       	ldi	r31, 0x04	; 4
    3cdc:	81 81       	ldd	r24, Z+1	; 0x01
    3cde:	88 60       	ori	r24, 0x08	; 8
    3ce0:	81 83       	std	Z+1, r24	; 0x01
    3ce2:	60 ea       	ldi	r22, 0xA0	; 160
	mpu9250_t imu_e =
	{
		.twi = &TWIE,
	};
	
	init_imu(imu_e);
    3ce4:	74 e0       	ldi	r23, 0x04	; 4
    3ce6:	80 e0       	ldi	r24, 0x00	; 0
    3ce8:	90 e0       	ldi	r25, 0x00	; 0
    3cea:	0e 94 19 05 	call	0xa32	; 0xa32 <init_imu>
	// ************** MAIN LOOP ************** //
	imu_data_t imu_data;
	int16_t voltage;
	uint32_t packetNumber = 0;
	
	PORTC.DIR = 0b11111111;
    3cee:	f8 01       	movw	r30, r16
    3cf0:	f0 82       	st	Z, r15

	printf("Packet #, ADC,  Pitch,   Roll,    Yaw, AccX, AccY, AccZ,GyroX,GyroY,GyroZ, MagX, MagY, MagZ, Temp\n");
    3cf2:	86 e3       	ldi	r24, 0x36	; 54
    3cf4:	90 e2       	ldi	r25, 0x20	; 32
    3cf6:	bd d4       	rcall	.+2426   	; 0x4672 <puts>
    3cf8:	c1 2c       	mov	r12, r1
	
	
	// ************** MAIN LOOP ************** //
	imu_data_t imu_data;
	int16_t voltage;
	uint32_t packetNumber = 0;
    3cfa:	d1 2c       	mov	r13, r1
    3cfc:	76 01       	movw	r14, r12
    3cfe:	0f 2e       	mov	r0, r31
		
		voltage = adc_read(); // Reading ADC
		imu_data = imu_update(imu_e); // Reading IMU
		PORTC.OUT = 0b00000000; // Turn LED On
		
		printf("%8lu,%4d,%3d.%03d,%3d.%03d,%3d.%03d,%5d,%5d,%5d,%5d,%5d,%5d,%5d,%5d,%5d,%5d\n", 
    3d00:	f8 e9       	ldi	r31, 0x98	; 152
    3d02:	2f 2e       	mov	r2, r31
    3d04:	f0 e2       	ldi	r31, 0x20	; 32
    3d06:	3f 2e       	mov	r3, r31
    3d08:	f0 2d       	mov	r31, r0
    3d0a:	0e 94 0b 05 	call	0xa16	; 0xa16 <adc_read>

	printf("Packet #, ADC,  Pitch,   Roll,    Yaw, AccX, AccY, AccZ,GyroX,GyroY,GyroZ, MagX, MagY, MagZ, Temp\n");

	while(1){
		
		voltage = adc_read(); // Reading ADC
    3d0e:	08 2f       	mov	r16, r24
    3d10:	19 2f       	mov	r17, r25
    3d12:	40 ea       	ldi	r20, 0xA0	; 160
		imu_data = imu_update(imu_e); // Reading IMU
    3d14:	54 e0       	ldi	r21, 0x04	; 4
    3d16:	60 e0       	ldi	r22, 0x00	; 0
    3d18:	70 e0       	ldi	r23, 0x00	; 0
    3d1a:	ce 01       	movw	r24, r28
    3d1c:	43 96       	adiw	r24, 0x13	; 19
    3d1e:	0e 94 1d 05 	call	0xa3a	; 0xa3a <imu_update>
    3d22:	8b 89       	ldd	r24, Y+19	; 0x13
    3d24:	9c 89       	ldd	r25, Y+20	; 0x14
    3d26:	ad 89       	ldd	r26, Y+21	; 0x15
    3d28:	be 89       	ldd	r27, Y+22	; 0x16
    3d2a:	24 96       	adiw	r28, 0x04	; 4
    3d2c:	8c af       	std	Y+60, r24	; 0x3c
    3d2e:	9d af       	std	Y+61, r25	; 0x3d
    3d30:	ae af       	std	Y+62, r26	; 0x3e
    3d32:	bf af       	std	Y+63, r27	; 0x3f
    3d34:	24 97       	sbiw	r28, 0x04	; 4
    3d36:	8f 88       	ldd	r8, Y+23	; 0x17
    3d38:	98 8c       	ldd	r9, Y+24	; 0x18
    3d3a:	a9 8c       	ldd	r10, Y+25	; 0x19
    3d3c:	ba 8c       	ldd	r11, Y+26	; 0x1a
    3d3e:	4b 8c       	ldd	r4, Y+27	; 0x1b
    3d40:	5c 8c       	ldd	r5, Y+28	; 0x1c
    3d42:	6d 8c       	ldd	r6, Y+29	; 0x1d
    3d44:	7e 8c       	ldd	r7, Y+30	; 0x1e
		PORTC.OUT = 0b00000000; // Turn LED On
    3d46:	10 92 44 06 	sts	0x0644, r1	; 0x800644 <__TEXT_REGION_LENGTH__+0x700644>
		
		printf("%8lu,%4d,%3d.%03d,%3d.%03d,%3d.%03d,%5d,%5d,%5d,%5d,%5d,%5d,%5d,%5d,%5d,%5d\n", 
						packetNumber, voltage, 
						(int16_t)imu_data.pitch, (int16_t)abs(((imu_data.pitch-(int16_t)imu_data.pitch)*1000)), 
						(int16_t)imu_data.roll, (int16_t)abs(((imu_data.roll-(int16_t)imu_data.roll)*1000)), 
						(int16_t)imu_data.yaw, (int16_t)abs(((imu_data.yaw-(int16_t)imu_data.yaw)*1000)),
    3d4a:	c3 01       	movw	r24, r6
    3d4c:	b2 01       	movw	r22, r4
    3d4e:	02 d2       	rcall	.+1028   	; 0x4154 <__fixsfsi>
    3d50:	6c ab       	std	Y+52, r22	; 0x34
    3d52:	7d ab       	std	Y+53, r23	; 0x35
    3d54:	8e ab       	std	Y+54, r24	; 0x36
    3d56:	9f ab       	std	Y+55, r25	; 0x37
		PORTC.OUT = 0b00000000; // Turn LED On
		
		printf("%8lu,%4d,%3d.%03d,%3d.%03d,%3d.%03d,%5d,%5d,%5d,%5d,%5d,%5d,%5d,%5d,%5d,%5d\n", 
						packetNumber, voltage, 
						(int16_t)imu_data.pitch, (int16_t)abs(((imu_data.pitch-(int16_t)imu_data.pitch)*1000)), 
						(int16_t)imu_data.roll, (int16_t)abs(((imu_data.roll-(int16_t)imu_data.roll)*1000)), 
    3d58:	c5 01       	movw	r24, r10
    3d5a:	b4 01       	movw	r22, r8
    3d5c:	fb d1       	rcall	.+1014   	; 0x4154 <__fixsfsi>
    3d5e:	68 af       	std	Y+56, r22	; 0x38
    3d60:	79 af       	std	Y+57, r23	; 0x39
    3d62:	8a af       	std	Y+58, r24	; 0x3a
    3d64:	9b af       	std	Y+59, r25	; 0x3b
		imu_data = imu_update(imu_e); // Reading IMU
		PORTC.OUT = 0b00000000; // Turn LED On
		
		printf("%8lu,%4d,%3d.%03d,%3d.%03d,%3d.%03d,%5d,%5d,%5d,%5d,%5d,%5d,%5d,%5d,%5d,%5d\n", 
						packetNumber, voltage, 
						(int16_t)imu_data.pitch, (int16_t)abs(((imu_data.pitch-(int16_t)imu_data.pitch)*1000)), 
    3d66:	24 96       	adiw	r28, 0x04	; 4
    3d68:	6c ad       	ldd	r22, Y+60	; 0x3c
    3d6a:	7d ad       	ldd	r23, Y+61	; 0x3d
    3d6c:	8e ad       	ldd	r24, Y+62	; 0x3e
    3d6e:	9f ad       	ldd	r25, Y+63	; 0x3f
    3d70:	24 97       	sbiw	r28, 0x04	; 4
    3d72:	f0 d1       	rcall	.+992    	; 0x4154 <__fixsfsi>
    3d74:	6c af       	std	Y+60, r22	; 0x3c
    3d76:	7d af       	std	Y+61, r23	; 0x3d
    3d78:	8e af       	std	Y+62, r24	; 0x3e
    3d7a:	9f af       	std	Y+63, r25	; 0x3f
    3d7c:	8f a1       	ldd	r24, Y+39	; 0x27
		
		voltage = adc_read(); // Reading ADC
		imu_data = imu_update(imu_e); // Reading IMU
		PORTC.OUT = 0b00000000; // Turn LED On
		
		printf("%8lu,%4d,%3d.%03d,%3d.%03d,%3d.%03d,%5d,%5d,%5d,%5d,%5d,%5d,%5d,%5d,%5d,%5d\n", 
    3d7e:	8f 93       	push	r24
    3d80:	8e a1       	ldd	r24, Y+38	; 0x26
    3d82:	8f 93       	push	r24
    3d84:	8b a9       	ldd	r24, Y+51	; 0x33
    3d86:	8f 93       	push	r24
    3d88:	8a a9       	ldd	r24, Y+50	; 0x32
    3d8a:	8f 93       	push	r24
    3d8c:	89 a9       	ldd	r24, Y+49	; 0x31
    3d8e:	8f 93       	push	r24
    3d90:	88 a9       	ldd	r24, Y+48	; 0x30
    3d92:	8f 93       	push	r24
    3d94:	8f a5       	ldd	r24, Y+47	; 0x2f
    3d96:	8f 93       	push	r24
    3d98:	8e a5       	ldd	r24, Y+46	; 0x2e
    3d9a:	8f 93       	push	r24
    3d9c:	8d a5       	ldd	r24, Y+45	; 0x2d
    3d9e:	8f 93       	push	r24
    3da0:	8c a5       	ldd	r24, Y+44	; 0x2c
    3da2:	8f 93       	push	r24
    3da4:	8b a5       	ldd	r24, Y+43	; 0x2b
    3da6:	8f 93       	push	r24
    3da8:	8a a5       	ldd	r24, Y+42	; 0x2a
    3daa:	8f 93       	push	r24
    3dac:	89 a5       	ldd	r24, Y+41	; 0x29
    3dae:	8f 93       	push	r24
    3db0:	88 a5       	ldd	r24, Y+40	; 0x28
    3db2:	8f 93       	push	r24
    3db4:	8d a1       	ldd	r24, Y+37	; 0x25
    3db6:	8f 93       	push	r24
    3db8:	8c a1       	ldd	r24, Y+36	; 0x24
    3dba:	8f 93       	push	r24
    3dbc:	8b a1       	ldd	r24, Y+35	; 0x23
    3dbe:	8f 93       	push	r24
    3dc0:	8a a1       	ldd	r24, Y+34	; 0x22
    3dc2:	8f 93       	push	r24
    3dc4:	89 a1       	ldd	r24, Y+33	; 0x21
    3dc6:	8f 93       	push	r24
    3dc8:	88 a1       	ldd	r24, Y+32	; 0x20
    3dca:	8f 93       	push	r24
    3dcc:	ac a9       	ldd	r26, Y+52	; 0x34
    3dce:	bd a9       	ldd	r27, Y+53	; 0x35
    3dd0:	bd 01       	movw	r22, r26
    3dd2:	bb 0f       	add	r27, r27
    3dd4:	88 0b       	sbc	r24, r24
    3dd6:	99 0b       	sbc	r25, r25
    3dd8:	f0 d1       	rcall	.+992    	; 0x41ba <__floatsisf>
    3dda:	9b 01       	movw	r18, r22
    3ddc:	ac 01       	movw	r20, r24
    3dde:	c3 01       	movw	r24, r6
    3de0:	b2 01       	movw	r22, r4
    3de2:	6e d0       	rcall	.+220    	; 0x3ec0 <__subsf3>
    3de4:	20 e0       	ldi	r18, 0x00	; 0
    3de6:	30 e0       	ldi	r19, 0x00	; 0
    3de8:	4a e7       	ldi	r20, 0x7A	; 122
    3dea:	54 e4       	ldi	r21, 0x44	; 68
    3dec:	f2 d2       	rcall	.+1508   	; 0x43d2 <__mulsf3>
    3dee:	b2 d1       	rcall	.+868    	; 0x4154 <__fixsfsi>
    3df0:	9b 01       	movw	r18, r22
    3df2:	77 23       	and	r23, r23
    3df4:	24 f4       	brge	.+8      	; 0x3dfe <main+0x210>
    3df6:	22 27       	eor	r18, r18
    3df8:	33 27       	eor	r19, r19
    3dfa:	26 1b       	sub	r18, r22
    3dfc:	37 0b       	sbc	r19, r23
    3dfe:	3f 93       	push	r19
    3e00:	2f 93       	push	r18
    3e02:	bd a9       	ldd	r27, Y+53	; 0x35
    3e04:	bf 93       	push	r27
    3e06:	ec a9       	ldd	r30, Y+52	; 0x34
    3e08:	ef 93       	push	r30
    3e0a:	28 ad       	ldd	r18, Y+56	; 0x38
    3e0c:	39 ad       	ldd	r19, Y+57	; 0x39
    3e0e:	b9 01       	movw	r22, r18
    3e10:	33 0f       	add	r19, r19
    3e12:	88 0b       	sbc	r24, r24
    3e14:	99 0b       	sbc	r25, r25
    3e16:	d1 d1       	rcall	.+930    	; 0x41ba <__floatsisf>
    3e18:	9b 01       	movw	r18, r22
    3e1a:	ac 01       	movw	r20, r24
    3e1c:	c5 01       	movw	r24, r10
    3e1e:	b4 01       	movw	r22, r8
    3e20:	4f d0       	rcall	.+158    	; 0x3ec0 <__subsf3>
    3e22:	20 e0       	ldi	r18, 0x00	; 0
    3e24:	30 e0       	ldi	r19, 0x00	; 0
    3e26:	4a e7       	ldi	r20, 0x7A	; 122
    3e28:	54 e4       	ldi	r21, 0x44	; 68
    3e2a:	d3 d2       	rcall	.+1446   	; 0x43d2 <__mulsf3>
    3e2c:	93 d1       	rcall	.+806    	; 0x4154 <__fixsfsi>
    3e2e:	9b 01       	movw	r18, r22
    3e30:	77 23       	and	r23, r23
    3e32:	24 f4       	brge	.+8      	; 0x3e3c <main+0x24e>
    3e34:	22 27       	eor	r18, r18
    3e36:	33 27       	eor	r19, r19
    3e38:	26 1b       	sub	r18, r22
    3e3a:	37 0b       	sbc	r19, r23
    3e3c:	3f 93       	push	r19
    3e3e:	2f 93       	push	r18
    3e40:	39 ad       	ldd	r19, Y+57	; 0x39
    3e42:	3f 93       	push	r19
    3e44:	88 ad       	ldd	r24, Y+56	; 0x38
    3e46:	8f 93       	push	r24
    3e48:	ac ad       	ldd	r26, Y+60	; 0x3c
    3e4a:	bd ad       	ldd	r27, Y+61	; 0x3d
    3e4c:	bd 01       	movw	r22, r26
    3e4e:	bb 0f       	add	r27, r27
    3e50:	88 0b       	sbc	r24, r24
    3e52:	99 0b       	sbc	r25, r25
    3e54:	b2 d1       	rcall	.+868    	; 0x41ba <__floatsisf>
    3e56:	9b 01       	movw	r18, r22
    3e58:	ac 01       	movw	r20, r24
    3e5a:	24 96       	adiw	r28, 0x04	; 4
    3e5c:	6c ad       	ldd	r22, Y+60	; 0x3c
    3e5e:	7d ad       	ldd	r23, Y+61	; 0x3d
    3e60:	8e ad       	ldd	r24, Y+62	; 0x3e
    3e62:	9f ad       	ldd	r25, Y+63	; 0x3f
    3e64:	24 97       	sbiw	r28, 0x04	; 4
    3e66:	2c d0       	rcall	.+88     	; 0x3ec0 <__subsf3>
    3e68:	20 e0       	ldi	r18, 0x00	; 0
    3e6a:	30 e0       	ldi	r19, 0x00	; 0
    3e6c:	4a e7       	ldi	r20, 0x7A	; 122
    3e6e:	54 e4       	ldi	r21, 0x44	; 68
    3e70:	b0 d2       	rcall	.+1376   	; 0x43d2 <__mulsf3>
    3e72:	70 d1       	rcall	.+736    	; 0x4154 <__fixsfsi>
    3e74:	9b 01       	movw	r18, r22
    3e76:	77 23       	and	r23, r23
    3e78:	24 f4       	brge	.+8      	; 0x3e82 <main+0x294>
    3e7a:	22 27       	eor	r18, r18
    3e7c:	33 27       	eor	r19, r19
    3e7e:	26 1b       	sub	r18, r22
    3e80:	37 0b       	sbc	r19, r23
    3e82:	3f 93       	push	r19
    3e84:	2f 93       	push	r18
    3e86:	bd ad       	ldd	r27, Y+61	; 0x3d
    3e88:	bf 93       	push	r27
    3e8a:	ec ad       	ldd	r30, Y+60	; 0x3c
    3e8c:	ef 93       	push	r30
    3e8e:	1f 93       	push	r17
    3e90:	0f 93       	push	r16
    3e92:	ff 92       	push	r15
    3e94:	ef 92       	push	r14
    3e96:	df 92       	push	r13
    3e98:	cf 92       	push	r12
    3e9a:	3f 92       	push	r3
    3e9c:	2f 92       	push	r2
    3e9e:	d6 d3       	rcall	.+1964   	; 0x464c <printf>
    3ea0:	ff ef       	ldi	r31, 0xFF	; 255
						imu_data.data.acc_x, imu_data.data.acc_y, imu_data.data.acc_z,
						imu_data.data.gyro_x, imu_data.data.gyro_y, imu_data.data.gyro_z,
						imu_data.data.mag_x, imu_data.data.mag_y, imu_data.data.mag_z,
						imu_data.data.imu_temperature);
						
		PORTC.OUT = 0b11111111; // Turn LED Off
    3ea2:	f0 93 44 06 	sts	0x0644, r31	; 0x800644 <__TEXT_REGION_LENGTH__+0x700644>
    3ea6:	2f ef       	ldi	r18, 0xFF	; 255
		
		packetNumber = packetNumber + 1;
    3ea8:	c2 1a       	sub	r12, r18
    3eaa:	d2 0a       	sbc	r13, r18
    3eac:	e2 0a       	sbc	r14, r18
    3eae:	f2 0a       	sbc	r15, r18
    3eb0:	cd bf       	out	0x3d, r28	; 61
		delay_ms(10);
    3eb2:	de bf       	out	0x3e, r29	; 62
    3eb4:	66 e5       	ldi	r22, 0x56	; 86
    3eb6:	70 ed       	ldi	r23, 0xD0	; 208
    3eb8:	80 e0       	ldi	r24, 0x00	; 0
    3eba:	90 e0       	ldi	r25, 0x00	; 0
    3ebc:	cc dd       	rcall	.-1128   	; 0x3a56 <__portable_avr_delay_cycles>
    3ebe:	25 cf       	rjmp	.-438    	; 0x3d0a <main+0x11c>

00003ec0 <__subsf3>:
    3ec0:	50 58       	subi	r21, 0x80	; 128

00003ec2 <__addsf3>:
    3ec2:	bb 27       	eor	r27, r27
    3ec4:	aa 27       	eor	r26, r26
    3ec6:	0e d0       	rcall	.+28     	; 0x3ee4 <__addsf3x>
    3ec8:	3f c2       	rjmp	.+1150   	; 0x4348 <__fp_round>
    3eca:	30 d2       	rcall	.+1120   	; 0x432c <__fp_pscA>
    3ecc:	30 f0       	brcs	.+12     	; 0x3eda <__addsf3+0x18>
    3ece:	35 d2       	rcall	.+1130   	; 0x433a <__fp_pscB>
    3ed0:	20 f0       	brcs	.+8      	; 0x3eda <__addsf3+0x18>
    3ed2:	31 f4       	brne	.+12     	; 0x3ee0 <__addsf3+0x1e>
    3ed4:	9f 3f       	cpi	r25, 0xFF	; 255
    3ed6:	11 f4       	brne	.+4      	; 0x3edc <__addsf3+0x1a>
    3ed8:	1e f4       	brtc	.+6      	; 0x3ee0 <__addsf3+0x1e>
    3eda:	ef c1       	rjmp	.+990    	; 0x42ba <__fp_nan>
    3edc:	0e f4       	brtc	.+2      	; 0x3ee0 <__addsf3+0x1e>
    3ede:	e0 95       	com	r30
    3ee0:	e7 fb       	bst	r30, 7
    3ee2:	e5 c1       	rjmp	.+970    	; 0x42ae <__fp_inf>

00003ee4 <__addsf3x>:
    3ee4:	e9 2f       	mov	r30, r25
    3ee6:	41 d2       	rcall	.+1154   	; 0x436a <__fp_split3>
    3ee8:	80 f3       	brcs	.-32     	; 0x3eca <__addsf3+0x8>
    3eea:	ba 17       	cp	r27, r26
    3eec:	62 07       	cpc	r22, r18
    3eee:	73 07       	cpc	r23, r19
    3ef0:	84 07       	cpc	r24, r20
    3ef2:	95 07       	cpc	r25, r21
    3ef4:	18 f0       	brcs	.+6      	; 0x3efc <__addsf3x+0x18>
    3ef6:	71 f4       	brne	.+28     	; 0x3f14 <__addsf3x+0x30>
    3ef8:	9e f5       	brtc	.+102    	; 0x3f60 <__addsf3x+0x7c>
    3efa:	59 c2       	rjmp	.+1202   	; 0x43ae <__fp_zero>
    3efc:	0e f4       	brtc	.+2      	; 0x3f00 <__addsf3x+0x1c>
    3efe:	e0 95       	com	r30
    3f00:	0b 2e       	mov	r0, r27
    3f02:	ba 2f       	mov	r27, r26
    3f04:	a0 2d       	mov	r26, r0
    3f06:	0b 01       	movw	r0, r22
    3f08:	b9 01       	movw	r22, r18
    3f0a:	90 01       	movw	r18, r0
    3f0c:	0c 01       	movw	r0, r24
    3f0e:	ca 01       	movw	r24, r20
    3f10:	a0 01       	movw	r20, r0
    3f12:	11 24       	eor	r1, r1
    3f14:	ff 27       	eor	r31, r31
    3f16:	59 1b       	sub	r21, r25
    3f18:	99 f0       	breq	.+38     	; 0x3f40 <__addsf3x+0x5c>
    3f1a:	59 3f       	cpi	r21, 0xF9	; 249
    3f1c:	50 f4       	brcc	.+20     	; 0x3f32 <__addsf3x+0x4e>
    3f1e:	50 3e       	cpi	r21, 0xE0	; 224
    3f20:	68 f1       	brcs	.+90     	; 0x3f7c <__addsf3x+0x98>
    3f22:	1a 16       	cp	r1, r26
    3f24:	f0 40       	sbci	r31, 0x00	; 0
    3f26:	a2 2f       	mov	r26, r18
    3f28:	23 2f       	mov	r18, r19
    3f2a:	34 2f       	mov	r19, r20
    3f2c:	44 27       	eor	r20, r20
    3f2e:	58 5f       	subi	r21, 0xF8	; 248
    3f30:	f3 cf       	rjmp	.-26     	; 0x3f18 <__addsf3x+0x34>
    3f32:	46 95       	lsr	r20
    3f34:	37 95       	ror	r19
    3f36:	27 95       	ror	r18
    3f38:	a7 95       	ror	r26
    3f3a:	f0 40       	sbci	r31, 0x00	; 0
    3f3c:	53 95       	inc	r21
    3f3e:	c9 f7       	brne	.-14     	; 0x3f32 <__addsf3x+0x4e>
    3f40:	7e f4       	brtc	.+30     	; 0x3f60 <__addsf3x+0x7c>
    3f42:	1f 16       	cp	r1, r31
    3f44:	ba 0b       	sbc	r27, r26
    3f46:	62 0b       	sbc	r22, r18
    3f48:	73 0b       	sbc	r23, r19
    3f4a:	84 0b       	sbc	r24, r20
    3f4c:	ba f0       	brmi	.+46     	; 0x3f7c <__addsf3x+0x98>
    3f4e:	91 50       	subi	r25, 0x01	; 1
    3f50:	a1 f0       	breq	.+40     	; 0x3f7a <__addsf3x+0x96>
    3f52:	ff 0f       	add	r31, r31
    3f54:	bb 1f       	adc	r27, r27
    3f56:	66 1f       	adc	r22, r22
    3f58:	77 1f       	adc	r23, r23
    3f5a:	88 1f       	adc	r24, r24
    3f5c:	c2 f7       	brpl	.-16     	; 0x3f4e <__addsf3x+0x6a>
    3f5e:	0e c0       	rjmp	.+28     	; 0x3f7c <__addsf3x+0x98>
    3f60:	ba 0f       	add	r27, r26
    3f62:	62 1f       	adc	r22, r18
    3f64:	73 1f       	adc	r23, r19
    3f66:	84 1f       	adc	r24, r20
    3f68:	48 f4       	brcc	.+18     	; 0x3f7c <__addsf3x+0x98>
    3f6a:	87 95       	ror	r24
    3f6c:	77 95       	ror	r23
    3f6e:	67 95       	ror	r22
    3f70:	b7 95       	ror	r27
    3f72:	f7 95       	ror	r31
    3f74:	9e 3f       	cpi	r25, 0xFE	; 254
    3f76:	08 f0       	brcs	.+2      	; 0x3f7a <__addsf3x+0x96>
    3f78:	b3 cf       	rjmp	.-154    	; 0x3ee0 <__addsf3+0x1e>
    3f7a:	93 95       	inc	r25
    3f7c:	88 0f       	add	r24, r24
    3f7e:	08 f0       	brcs	.+2      	; 0x3f82 <__addsf3x+0x9e>
    3f80:	99 27       	eor	r25, r25
    3f82:	ee 0f       	add	r30, r30
    3f84:	97 95       	ror	r25
    3f86:	87 95       	ror	r24
    3f88:	08 95       	ret

00003f8a <asin>:
    3f8a:	9f 93       	push	r25
    3f8c:	9f 77       	andi	r25, 0x7F	; 127
    3f8e:	ee e3       	ldi	r30, 0x3E	; 62
    3f90:	89 37       	cpi	r24, 0x79	; 121
    3f92:	9e 07       	cpc	r25, r30
    3f94:	20 f4       	brcc	.+8      	; 0x3f9e <asin+0x14>
    3f96:	ec ef       	ldi	r30, 0xFC	; 252
    3f98:	f1 e0       	ldi	r31, 0x01	; 1
    3f9a:	b7 d1       	rcall	.+878    	; 0x430a <__fp_powsodd>
    3f9c:	09 c0       	rjmp	.+18     	; 0x3fb0 <asin+0x26>
    3f9e:	48 d1       	rcall	.+656    	; 0x4230 <__fp_arccos>
    3fa0:	90 58       	subi	r25, 0x80	; 128
    3fa2:	a2 ea       	ldi	r26, 0xA2	; 162
    3fa4:	2a ed       	ldi	r18, 0xDA	; 218
    3fa6:	3f e0       	ldi	r19, 0x0F	; 15
    3fa8:	49 ec       	ldi	r20, 0xC9	; 201
    3faa:	5f e3       	ldi	r21, 0x3F	; 63
    3fac:	9b df       	rcall	.-202    	; 0x3ee4 <__addsf3x>
    3fae:	cc d1       	rcall	.+920    	; 0x4348 <__fp_round>
    3fb0:	0f 90       	pop	r0
    3fb2:	07 fc       	sbrc	r0, 7
    3fb4:	90 58       	subi	r25, 0x80	; 128
    3fb6:	08 95       	ret
    3fb8:	b9 d1       	rcall	.+882    	; 0x432c <__fp_pscA>
    3fba:	58 f0       	brcs	.+22     	; 0x3fd2 <asin+0x48>
    3fbc:	80 e8       	ldi	r24, 0x80	; 128
    3fbe:	91 e0       	ldi	r25, 0x01	; 1
    3fc0:	09 f4       	brne	.+2      	; 0x3fc4 <asin+0x3a>
    3fc2:	9e ef       	ldi	r25, 0xFE	; 254
    3fc4:	ba d1       	rcall	.+884    	; 0x433a <__fp_pscB>
    3fc6:	28 f0       	brcs	.+10     	; 0x3fd2 <asin+0x48>
    3fc8:	40 e8       	ldi	r20, 0x80	; 128
    3fca:	51 e0       	ldi	r21, 0x01	; 1
    3fcc:	59 f4       	brne	.+22     	; 0x3fe4 <atan2+0xe>
    3fce:	5e ef       	ldi	r21, 0xFE	; 254
    3fd0:	09 c0       	rjmp	.+18     	; 0x3fe4 <atan2+0xe>
    3fd2:	73 c1       	rjmp	.+742    	; 0x42ba <__fp_nan>
    3fd4:	ec c1       	rjmp	.+984    	; 0x43ae <__fp_zero>

00003fd6 <atan2>:
    3fd6:	e9 2f       	mov	r30, r25
    3fd8:	e0 78       	andi	r30, 0x80	; 128
    3fda:	c7 d1       	rcall	.+910    	; 0x436a <__fp_split3>
    3fdc:	68 f3       	brcs	.-38     	; 0x3fb8 <asin+0x2e>
    3fde:	09 2e       	mov	r0, r25
    3fe0:	05 2a       	or	r0, r21
    3fe2:	c1 f3       	breq	.-16     	; 0x3fd4 <asin+0x4a>
    3fe4:	26 17       	cp	r18, r22
    3fe6:	37 07       	cpc	r19, r23
    3fe8:	48 07       	cpc	r20, r24
    3fea:	59 07       	cpc	r21, r25
    3fec:	38 f0       	brcs	.+14     	; 0x3ffc <atan2+0x26>
    3fee:	0e 2e       	mov	r0, r30
    3ff0:	07 f8       	bld	r0, 7
    3ff2:	e0 25       	eor	r30, r0
    3ff4:	69 f0       	breq	.+26     	; 0x4010 <atan2+0x3a>
    3ff6:	e0 25       	eor	r30, r0
    3ff8:	e0 64       	ori	r30, 0x40	; 64
    3ffa:	0a c0       	rjmp	.+20     	; 0x4010 <atan2+0x3a>
    3ffc:	ef 63       	ori	r30, 0x3F	; 63
    3ffe:	07 f8       	bld	r0, 7
    4000:	00 94       	com	r0
    4002:	07 fa       	bst	r0, 7
    4004:	db 01       	movw	r26, r22
    4006:	b9 01       	movw	r22, r18
    4008:	9d 01       	movw	r18, r26
    400a:	dc 01       	movw	r26, r24
    400c:	ca 01       	movw	r24, r20
    400e:	ad 01       	movw	r20, r26
    4010:	ef 93       	push	r30
    4012:	47 d0       	rcall	.+142    	; 0x40a2 <__divsf3_pse>
    4014:	99 d1       	rcall	.+818    	; 0x4348 <__fp_round>
    4016:	0a d0       	rcall	.+20     	; 0x402c <atan>
    4018:	5f 91       	pop	r21
    401a:	55 23       	and	r21, r21
    401c:	31 f0       	breq	.+12     	; 0x402a <atan2+0x54>
    401e:	2b ed       	ldi	r18, 0xDB	; 219
    4020:	3f e0       	ldi	r19, 0x0F	; 15
    4022:	49 e4       	ldi	r20, 0x49	; 73
    4024:	50 fd       	sbrc	r21, 0
    4026:	49 ec       	ldi	r20, 0xC9	; 201
    4028:	4c cf       	rjmp	.-360    	; 0x3ec2 <__addsf3>
    402a:	08 95       	ret

0000402c <atan>:
    402c:	df 93       	push	r29
    402e:	dd 27       	eor	r29, r29
    4030:	b9 2f       	mov	r27, r25
    4032:	bf 77       	andi	r27, 0x7F	; 127
    4034:	40 e8       	ldi	r20, 0x80	; 128
    4036:	5f e3       	ldi	r21, 0x3F	; 63
    4038:	16 16       	cp	r1, r22
    403a:	17 06       	cpc	r1, r23
    403c:	48 07       	cpc	r20, r24
    403e:	5b 07       	cpc	r21, r27
    4040:	10 f4       	brcc	.+4      	; 0x4046 <atan+0x1a>
    4042:	d9 2f       	mov	r29, r25
    4044:	bf d1       	rcall	.+894    	; 0x43c4 <inverse>
    4046:	9f 93       	push	r25
    4048:	8f 93       	push	r24
    404a:	7f 93       	push	r23
    404c:	6f 93       	push	r22
    404e:	66 d2       	rcall	.+1228   	; 0x451c <square>
    4050:	e0 e1       	ldi	r30, 0x10	; 16
    4052:	f2 e0       	ldi	r31, 0x02	; 2
    4054:	35 d1       	rcall	.+618    	; 0x42c0 <__fp_powser>
    4056:	78 d1       	rcall	.+752    	; 0x4348 <__fp_round>
    4058:	2f 91       	pop	r18
    405a:	3f 91       	pop	r19
    405c:	4f 91       	pop	r20
    405e:	5f 91       	pop	r21
    4060:	c4 d1       	rcall	.+904    	; 0x43ea <__mulsf3x>
    4062:	dd 23       	and	r29, r29
    4064:	49 f0       	breq	.+18     	; 0x4078 <atan+0x4c>
    4066:	90 58       	subi	r25, 0x80	; 128
    4068:	a2 ea       	ldi	r26, 0xA2	; 162
    406a:	2a ed       	ldi	r18, 0xDA	; 218
    406c:	3f e0       	ldi	r19, 0x0F	; 15
    406e:	49 ec       	ldi	r20, 0xC9	; 201
    4070:	5f e3       	ldi	r21, 0x3F	; 63
    4072:	d0 78       	andi	r29, 0x80	; 128
    4074:	5d 27       	eor	r21, r29
    4076:	36 df       	rcall	.-404    	; 0x3ee4 <__addsf3x>
    4078:	df 91       	pop	r29
    407a:	66 c1       	rjmp	.+716    	; 0x4348 <__fp_round>

0000407c <__cmpsf2>:
    407c:	f4 d0       	rcall	.+488    	; 0x4266 <__fp_cmp>
    407e:	08 f4       	brcc	.+2      	; 0x4082 <__cmpsf2+0x6>
    4080:	81 e0       	ldi	r24, 0x01	; 1
    4082:	08 95       	ret

00004084 <__divsf3>:
    4084:	0c d0       	rcall	.+24     	; 0x409e <__divsf3x>
    4086:	60 c1       	rjmp	.+704    	; 0x4348 <__fp_round>
    4088:	58 d1       	rcall	.+688    	; 0x433a <__fp_pscB>
    408a:	40 f0       	brcs	.+16     	; 0x409c <__divsf3+0x18>
    408c:	4f d1       	rcall	.+670    	; 0x432c <__fp_pscA>
    408e:	30 f0       	brcs	.+12     	; 0x409c <__divsf3+0x18>
    4090:	21 f4       	brne	.+8      	; 0x409a <__divsf3+0x16>
    4092:	5f 3f       	cpi	r21, 0xFF	; 255
    4094:	19 f0       	breq	.+6      	; 0x409c <__divsf3+0x18>
    4096:	0b c1       	rjmp	.+534    	; 0x42ae <__fp_inf>
    4098:	51 11       	cpse	r21, r1
    409a:	8a c1       	rjmp	.+788    	; 0x43b0 <__fp_szero>
    409c:	0e c1       	rjmp	.+540    	; 0x42ba <__fp_nan>

0000409e <__divsf3x>:
    409e:	65 d1       	rcall	.+714    	; 0x436a <__fp_split3>
    40a0:	98 f3       	brcs	.-26     	; 0x4088 <__divsf3+0x4>

000040a2 <__divsf3_pse>:
    40a2:	99 23       	and	r25, r25
    40a4:	c9 f3       	breq	.-14     	; 0x4098 <__divsf3+0x14>
    40a6:	55 23       	and	r21, r21
    40a8:	b1 f3       	breq	.-20     	; 0x4096 <__divsf3+0x12>
    40aa:	95 1b       	sub	r25, r21
    40ac:	55 0b       	sbc	r21, r21
    40ae:	bb 27       	eor	r27, r27
    40b0:	aa 27       	eor	r26, r26
    40b2:	62 17       	cp	r22, r18
    40b4:	73 07       	cpc	r23, r19
    40b6:	84 07       	cpc	r24, r20
    40b8:	38 f0       	brcs	.+14     	; 0x40c8 <__divsf3_pse+0x26>
    40ba:	9f 5f       	subi	r25, 0xFF	; 255
    40bc:	5f 4f       	sbci	r21, 0xFF	; 255
    40be:	22 0f       	add	r18, r18
    40c0:	33 1f       	adc	r19, r19
    40c2:	44 1f       	adc	r20, r20
    40c4:	aa 1f       	adc	r26, r26
    40c6:	a9 f3       	breq	.-22     	; 0x40b2 <__divsf3_pse+0x10>
    40c8:	33 d0       	rcall	.+102    	; 0x4130 <__divsf3_pse+0x8e>
    40ca:	0e 2e       	mov	r0, r30
    40cc:	3a f0       	brmi	.+14     	; 0x40dc <__divsf3_pse+0x3a>
    40ce:	e0 e8       	ldi	r30, 0x80	; 128
    40d0:	30 d0       	rcall	.+96     	; 0x4132 <__divsf3_pse+0x90>
    40d2:	91 50       	subi	r25, 0x01	; 1
    40d4:	50 40       	sbci	r21, 0x00	; 0
    40d6:	e6 95       	lsr	r30
    40d8:	00 1c       	adc	r0, r0
    40da:	ca f7       	brpl	.-14     	; 0x40ce <__divsf3_pse+0x2c>
    40dc:	29 d0       	rcall	.+82     	; 0x4130 <__divsf3_pse+0x8e>
    40de:	fe 2f       	mov	r31, r30
    40e0:	27 d0       	rcall	.+78     	; 0x4130 <__divsf3_pse+0x8e>
    40e2:	66 0f       	add	r22, r22
    40e4:	77 1f       	adc	r23, r23
    40e6:	88 1f       	adc	r24, r24
    40e8:	bb 1f       	adc	r27, r27
    40ea:	26 17       	cp	r18, r22
    40ec:	37 07       	cpc	r19, r23
    40ee:	48 07       	cpc	r20, r24
    40f0:	ab 07       	cpc	r26, r27
    40f2:	b0 e8       	ldi	r27, 0x80	; 128
    40f4:	09 f0       	breq	.+2      	; 0x40f8 <__divsf3_pse+0x56>
    40f6:	bb 0b       	sbc	r27, r27
    40f8:	80 2d       	mov	r24, r0
    40fa:	bf 01       	movw	r22, r30
    40fc:	ff 27       	eor	r31, r31
    40fe:	93 58       	subi	r25, 0x83	; 131
    4100:	5f 4f       	sbci	r21, 0xFF	; 255
    4102:	2a f0       	brmi	.+10     	; 0x410e <__divsf3_pse+0x6c>
    4104:	9e 3f       	cpi	r25, 0xFE	; 254
    4106:	51 05       	cpc	r21, r1
    4108:	68 f0       	brcs	.+26     	; 0x4124 <__divsf3_pse+0x82>
    410a:	d1 c0       	rjmp	.+418    	; 0x42ae <__fp_inf>
    410c:	51 c1       	rjmp	.+674    	; 0x43b0 <__fp_szero>
    410e:	5f 3f       	cpi	r21, 0xFF	; 255
    4110:	ec f3       	brlt	.-6      	; 0x410c <__divsf3_pse+0x6a>
    4112:	98 3e       	cpi	r25, 0xE8	; 232
    4114:	dc f3       	brlt	.-10     	; 0x410c <__divsf3_pse+0x6a>
    4116:	86 95       	lsr	r24
    4118:	77 95       	ror	r23
    411a:	67 95       	ror	r22
    411c:	b7 95       	ror	r27
    411e:	f7 95       	ror	r31
    4120:	9f 5f       	subi	r25, 0xFF	; 255
    4122:	c9 f7       	brne	.-14     	; 0x4116 <__divsf3_pse+0x74>
    4124:	88 0f       	add	r24, r24
    4126:	91 1d       	adc	r25, r1
    4128:	96 95       	lsr	r25
    412a:	87 95       	ror	r24
    412c:	97 f9       	bld	r25, 7
    412e:	08 95       	ret
    4130:	e1 e0       	ldi	r30, 0x01	; 1
    4132:	66 0f       	add	r22, r22
    4134:	77 1f       	adc	r23, r23
    4136:	88 1f       	adc	r24, r24
    4138:	bb 1f       	adc	r27, r27
    413a:	62 17       	cp	r22, r18
    413c:	73 07       	cpc	r23, r19
    413e:	84 07       	cpc	r24, r20
    4140:	ba 07       	cpc	r27, r26
    4142:	20 f0       	brcs	.+8      	; 0x414c <__divsf3_pse+0xaa>
    4144:	62 1b       	sub	r22, r18
    4146:	73 0b       	sbc	r23, r19
    4148:	84 0b       	sbc	r24, r20
    414a:	ba 0b       	sbc	r27, r26
    414c:	ee 1f       	adc	r30, r30
    414e:	88 f7       	brcc	.-30     	; 0x4132 <__divsf3_pse+0x90>
    4150:	e0 95       	com	r30
    4152:	08 95       	ret

00004154 <__fixsfsi>:
    4154:	04 d0       	rcall	.+8      	; 0x415e <__fixunssfsi>
    4156:	68 94       	set
    4158:	b1 11       	cpse	r27, r1
    415a:	2a c1       	rjmp	.+596    	; 0x43b0 <__fp_szero>
    415c:	08 95       	ret

0000415e <__fixunssfsi>:
    415e:	0d d1       	rcall	.+538    	; 0x437a <__fp_splitA>
    4160:	88 f0       	brcs	.+34     	; 0x4184 <__fixunssfsi+0x26>
    4162:	9f 57       	subi	r25, 0x7F	; 127
    4164:	90 f0       	brcs	.+36     	; 0x418a <__fixunssfsi+0x2c>
    4166:	b9 2f       	mov	r27, r25
    4168:	99 27       	eor	r25, r25
    416a:	b7 51       	subi	r27, 0x17	; 23
    416c:	a0 f0       	brcs	.+40     	; 0x4196 <__fixunssfsi+0x38>
    416e:	d1 f0       	breq	.+52     	; 0x41a4 <__fixunssfsi+0x46>
    4170:	66 0f       	add	r22, r22
    4172:	77 1f       	adc	r23, r23
    4174:	88 1f       	adc	r24, r24
    4176:	99 1f       	adc	r25, r25
    4178:	1a f0       	brmi	.+6      	; 0x4180 <__fixunssfsi+0x22>
    417a:	ba 95       	dec	r27
    417c:	c9 f7       	brne	.-14     	; 0x4170 <__fixunssfsi+0x12>
    417e:	12 c0       	rjmp	.+36     	; 0x41a4 <__fixunssfsi+0x46>
    4180:	b1 30       	cpi	r27, 0x01	; 1
    4182:	81 f0       	breq	.+32     	; 0x41a4 <__fixunssfsi+0x46>
    4184:	14 d1       	rcall	.+552    	; 0x43ae <__fp_zero>
    4186:	b1 e0       	ldi	r27, 0x01	; 1
    4188:	08 95       	ret
    418a:	11 c1       	rjmp	.+546    	; 0x43ae <__fp_zero>
    418c:	67 2f       	mov	r22, r23
    418e:	78 2f       	mov	r23, r24
    4190:	88 27       	eor	r24, r24
    4192:	b8 5f       	subi	r27, 0xF8	; 248
    4194:	39 f0       	breq	.+14     	; 0x41a4 <__fixunssfsi+0x46>
    4196:	b9 3f       	cpi	r27, 0xF9	; 249
    4198:	cc f3       	brlt	.-14     	; 0x418c <__fixunssfsi+0x2e>
    419a:	86 95       	lsr	r24
    419c:	77 95       	ror	r23
    419e:	67 95       	ror	r22
    41a0:	b3 95       	inc	r27
    41a2:	d9 f7       	brne	.-10     	; 0x419a <__fixunssfsi+0x3c>
    41a4:	3e f4       	brtc	.+14     	; 0x41b4 <__fixunssfsi+0x56>
    41a6:	90 95       	com	r25
    41a8:	80 95       	com	r24
    41aa:	70 95       	com	r23
    41ac:	61 95       	neg	r22
    41ae:	7f 4f       	sbci	r23, 0xFF	; 255
    41b0:	8f 4f       	sbci	r24, 0xFF	; 255
    41b2:	9f 4f       	sbci	r25, 0xFF	; 255
    41b4:	08 95       	ret

000041b6 <__floatunsisf>:
    41b6:	e8 94       	clt
    41b8:	09 c0       	rjmp	.+18     	; 0x41cc <__floatsisf+0x12>

000041ba <__floatsisf>:
    41ba:	97 fb       	bst	r25, 7
    41bc:	3e f4       	brtc	.+14     	; 0x41cc <__floatsisf+0x12>
    41be:	90 95       	com	r25
    41c0:	80 95       	com	r24
    41c2:	70 95       	com	r23
    41c4:	61 95       	neg	r22
    41c6:	7f 4f       	sbci	r23, 0xFF	; 255
    41c8:	8f 4f       	sbci	r24, 0xFF	; 255
    41ca:	9f 4f       	sbci	r25, 0xFF	; 255
    41cc:	99 23       	and	r25, r25
    41ce:	a9 f0       	breq	.+42     	; 0x41fa <__floatsisf+0x40>
    41d0:	f9 2f       	mov	r31, r25
    41d2:	96 e9       	ldi	r25, 0x96	; 150
    41d4:	bb 27       	eor	r27, r27
    41d6:	93 95       	inc	r25
    41d8:	f6 95       	lsr	r31
    41da:	87 95       	ror	r24
    41dc:	77 95       	ror	r23
    41de:	67 95       	ror	r22
    41e0:	b7 95       	ror	r27
    41e2:	f1 11       	cpse	r31, r1
    41e4:	f8 cf       	rjmp	.-16     	; 0x41d6 <__floatsisf+0x1c>
    41e6:	fa f4       	brpl	.+62     	; 0x4226 <__floatsisf+0x6c>
    41e8:	bb 0f       	add	r27, r27
    41ea:	11 f4       	brne	.+4      	; 0x41f0 <__floatsisf+0x36>
    41ec:	60 ff       	sbrs	r22, 0
    41ee:	1b c0       	rjmp	.+54     	; 0x4226 <__floatsisf+0x6c>
    41f0:	6f 5f       	subi	r22, 0xFF	; 255
    41f2:	7f 4f       	sbci	r23, 0xFF	; 255
    41f4:	8f 4f       	sbci	r24, 0xFF	; 255
    41f6:	9f 4f       	sbci	r25, 0xFF	; 255
    41f8:	16 c0       	rjmp	.+44     	; 0x4226 <__floatsisf+0x6c>
    41fa:	88 23       	and	r24, r24
    41fc:	11 f0       	breq	.+4      	; 0x4202 <__floatsisf+0x48>
    41fe:	96 e9       	ldi	r25, 0x96	; 150
    4200:	11 c0       	rjmp	.+34     	; 0x4224 <__floatsisf+0x6a>
    4202:	77 23       	and	r23, r23
    4204:	21 f0       	breq	.+8      	; 0x420e <__floatsisf+0x54>
    4206:	9e e8       	ldi	r25, 0x8E	; 142
    4208:	87 2f       	mov	r24, r23
    420a:	76 2f       	mov	r23, r22
    420c:	05 c0       	rjmp	.+10     	; 0x4218 <__floatsisf+0x5e>
    420e:	66 23       	and	r22, r22
    4210:	71 f0       	breq	.+28     	; 0x422e <__floatsisf+0x74>
    4212:	96 e8       	ldi	r25, 0x86	; 134
    4214:	86 2f       	mov	r24, r22
    4216:	70 e0       	ldi	r23, 0x00	; 0
    4218:	60 e0       	ldi	r22, 0x00	; 0
    421a:	2a f0       	brmi	.+10     	; 0x4226 <__floatsisf+0x6c>
    421c:	9a 95       	dec	r25
    421e:	66 0f       	add	r22, r22
    4220:	77 1f       	adc	r23, r23
    4222:	88 1f       	adc	r24, r24
    4224:	da f7       	brpl	.-10     	; 0x421c <__floatsisf+0x62>
    4226:	88 0f       	add	r24, r24
    4228:	96 95       	lsr	r25
    422a:	87 95       	ror	r24
    422c:	97 f9       	bld	r25, 7
    422e:	08 95       	ret

00004230 <__fp_arccos>:
    4230:	df 93       	push	r29
    4232:	cf 93       	push	r28
    4234:	1f 93       	push	r17
    4236:	0f 93       	push	r16
    4238:	8b 01       	movw	r16, r22
    423a:	ec 01       	movw	r28, r24
    423c:	ed e3       	ldi	r30, 0x3D	; 61
    423e:	f2 e0       	ldi	r31, 0x02	; 2
    4240:	3f d0       	rcall	.+126    	; 0x42c0 <__fp_powser>
    4242:	82 d0       	rcall	.+260    	; 0x4348 <__fp_round>
    4244:	98 01       	movw	r18, r16
    4246:	ae 01       	movw	r20, r28
    4248:	8b 01       	movw	r16, r22
    424a:	ec 01       	movw	r28, r24
    424c:	60 e0       	ldi	r22, 0x00	; 0
    424e:	70 e0       	ldi	r23, 0x00	; 0
    4250:	80 e8       	ldi	r24, 0x80	; 128
    4252:	9f e3       	ldi	r25, 0x3F	; 63
    4254:	35 de       	rcall	.-918    	; 0x3ec0 <__subsf3>
    4256:	24 d1       	rcall	.+584    	; 0x44a0 <sqrt>
    4258:	98 01       	movw	r18, r16
    425a:	ae 01       	movw	r20, r28
    425c:	0f 91       	pop	r16
    425e:	1f 91       	pop	r17
    4260:	cf 91       	pop	r28
    4262:	df 91       	pop	r29
    4264:	c2 c0       	rjmp	.+388    	; 0x43ea <__mulsf3x>

00004266 <__fp_cmp>:
    4266:	99 0f       	add	r25, r25
    4268:	00 08       	sbc	r0, r0
    426a:	55 0f       	add	r21, r21
    426c:	aa 0b       	sbc	r26, r26
    426e:	e0 e8       	ldi	r30, 0x80	; 128
    4270:	fe ef       	ldi	r31, 0xFE	; 254
    4272:	16 16       	cp	r1, r22
    4274:	17 06       	cpc	r1, r23
    4276:	e8 07       	cpc	r30, r24
    4278:	f9 07       	cpc	r31, r25
    427a:	c0 f0       	brcs	.+48     	; 0x42ac <__fp_cmp+0x46>
    427c:	12 16       	cp	r1, r18
    427e:	13 06       	cpc	r1, r19
    4280:	e4 07       	cpc	r30, r20
    4282:	f5 07       	cpc	r31, r21
    4284:	98 f0       	brcs	.+38     	; 0x42ac <__fp_cmp+0x46>
    4286:	62 1b       	sub	r22, r18
    4288:	73 0b       	sbc	r23, r19
    428a:	84 0b       	sbc	r24, r20
    428c:	95 0b       	sbc	r25, r21
    428e:	39 f4       	brne	.+14     	; 0x429e <__fp_cmp+0x38>
    4290:	0a 26       	eor	r0, r26
    4292:	61 f0       	breq	.+24     	; 0x42ac <__fp_cmp+0x46>
    4294:	23 2b       	or	r18, r19
    4296:	24 2b       	or	r18, r20
    4298:	25 2b       	or	r18, r21
    429a:	21 f4       	brne	.+8      	; 0x42a4 <__fp_cmp+0x3e>
    429c:	08 95       	ret
    429e:	0a 26       	eor	r0, r26
    42a0:	09 f4       	brne	.+2      	; 0x42a4 <__fp_cmp+0x3e>
    42a2:	a1 40       	sbci	r26, 0x01	; 1
    42a4:	a6 95       	lsr	r26
    42a6:	8f ef       	ldi	r24, 0xFF	; 255
    42a8:	81 1d       	adc	r24, r1
    42aa:	81 1d       	adc	r24, r1
    42ac:	08 95       	ret

000042ae <__fp_inf>:
    42ae:	97 f9       	bld	r25, 7
    42b0:	9f 67       	ori	r25, 0x7F	; 127
    42b2:	80 e8       	ldi	r24, 0x80	; 128
    42b4:	70 e0       	ldi	r23, 0x00	; 0
    42b6:	60 e0       	ldi	r22, 0x00	; 0
    42b8:	08 95       	ret

000042ba <__fp_nan>:
    42ba:	9f ef       	ldi	r25, 0xFF	; 255
    42bc:	80 ec       	ldi	r24, 0xC0	; 192
    42be:	08 95       	ret

000042c0 <__fp_powser>:
    42c0:	df 93       	push	r29
    42c2:	cf 93       	push	r28
    42c4:	1f 93       	push	r17
    42c6:	0f 93       	push	r16
    42c8:	ff 92       	push	r15
    42ca:	ef 92       	push	r14
    42cc:	df 92       	push	r13
    42ce:	7b 01       	movw	r14, r22
    42d0:	8c 01       	movw	r16, r24
    42d2:	68 94       	set
    42d4:	05 c0       	rjmp	.+10     	; 0x42e0 <__fp_powser+0x20>
    42d6:	da 2e       	mov	r13, r26
    42d8:	ef 01       	movw	r28, r30
    42da:	87 d0       	rcall	.+270    	; 0x43ea <__mulsf3x>
    42dc:	fe 01       	movw	r30, r28
    42de:	e8 94       	clt
    42e0:	a5 91       	lpm	r26, Z+
    42e2:	25 91       	lpm	r18, Z+
    42e4:	35 91       	lpm	r19, Z+
    42e6:	45 91       	lpm	r20, Z+
    42e8:	55 91       	lpm	r21, Z+
    42ea:	ae f3       	brts	.-22     	; 0x42d6 <__fp_powser+0x16>
    42ec:	ef 01       	movw	r28, r30
    42ee:	fa dd       	rcall	.-1036   	; 0x3ee4 <__addsf3x>
    42f0:	fe 01       	movw	r30, r28
    42f2:	97 01       	movw	r18, r14
    42f4:	a8 01       	movw	r20, r16
    42f6:	da 94       	dec	r13
    42f8:	79 f7       	brne	.-34     	; 0x42d8 <__fp_powser+0x18>
    42fa:	df 90       	pop	r13
    42fc:	ef 90       	pop	r14
    42fe:	ff 90       	pop	r15
    4300:	0f 91       	pop	r16
    4302:	1f 91       	pop	r17
    4304:	cf 91       	pop	r28
    4306:	df 91       	pop	r29
    4308:	08 95       	ret

0000430a <__fp_powsodd>:
    430a:	9f 93       	push	r25
    430c:	8f 93       	push	r24
    430e:	7f 93       	push	r23
    4310:	6f 93       	push	r22
    4312:	ff 93       	push	r31
    4314:	ef 93       	push	r30
    4316:	9b 01       	movw	r18, r22
    4318:	ac 01       	movw	r20, r24
    431a:	5b d0       	rcall	.+182    	; 0x43d2 <__mulsf3>
    431c:	ef 91       	pop	r30
    431e:	ff 91       	pop	r31
    4320:	cf df       	rcall	.-98     	; 0x42c0 <__fp_powser>
    4322:	2f 91       	pop	r18
    4324:	3f 91       	pop	r19
    4326:	4f 91       	pop	r20
    4328:	5f 91       	pop	r21
    432a:	53 c0       	rjmp	.+166    	; 0x43d2 <__mulsf3>

0000432c <__fp_pscA>:
    432c:	00 24       	eor	r0, r0
    432e:	0a 94       	dec	r0
    4330:	16 16       	cp	r1, r22
    4332:	17 06       	cpc	r1, r23
    4334:	18 06       	cpc	r1, r24
    4336:	09 06       	cpc	r0, r25
    4338:	08 95       	ret

0000433a <__fp_pscB>:
    433a:	00 24       	eor	r0, r0
    433c:	0a 94       	dec	r0
    433e:	12 16       	cp	r1, r18
    4340:	13 06       	cpc	r1, r19
    4342:	14 06       	cpc	r1, r20
    4344:	05 06       	cpc	r0, r21
    4346:	08 95       	ret

00004348 <__fp_round>:
    4348:	09 2e       	mov	r0, r25
    434a:	03 94       	inc	r0
    434c:	00 0c       	add	r0, r0
    434e:	11 f4       	brne	.+4      	; 0x4354 <__fp_round+0xc>
    4350:	88 23       	and	r24, r24
    4352:	52 f0       	brmi	.+20     	; 0x4368 <__fp_round+0x20>
    4354:	bb 0f       	add	r27, r27
    4356:	40 f4       	brcc	.+16     	; 0x4368 <__fp_round+0x20>
    4358:	bf 2b       	or	r27, r31
    435a:	11 f4       	brne	.+4      	; 0x4360 <__fp_round+0x18>
    435c:	60 ff       	sbrs	r22, 0
    435e:	04 c0       	rjmp	.+8      	; 0x4368 <__fp_round+0x20>
    4360:	6f 5f       	subi	r22, 0xFF	; 255
    4362:	7f 4f       	sbci	r23, 0xFF	; 255
    4364:	8f 4f       	sbci	r24, 0xFF	; 255
    4366:	9f 4f       	sbci	r25, 0xFF	; 255
    4368:	08 95       	ret

0000436a <__fp_split3>:
    436a:	57 fd       	sbrc	r21, 7
    436c:	90 58       	subi	r25, 0x80	; 128
    436e:	44 0f       	add	r20, r20
    4370:	55 1f       	adc	r21, r21
    4372:	59 f0       	breq	.+22     	; 0x438a <__fp_splitA+0x10>
    4374:	5f 3f       	cpi	r21, 0xFF	; 255
    4376:	71 f0       	breq	.+28     	; 0x4394 <__fp_splitA+0x1a>
    4378:	47 95       	ror	r20

0000437a <__fp_splitA>:
    437a:	88 0f       	add	r24, r24
    437c:	97 fb       	bst	r25, 7
    437e:	99 1f       	adc	r25, r25
    4380:	61 f0       	breq	.+24     	; 0x439a <__fp_splitA+0x20>
    4382:	9f 3f       	cpi	r25, 0xFF	; 255
    4384:	79 f0       	breq	.+30     	; 0x43a4 <__fp_splitA+0x2a>
    4386:	87 95       	ror	r24
    4388:	08 95       	ret
    438a:	12 16       	cp	r1, r18
    438c:	13 06       	cpc	r1, r19
    438e:	14 06       	cpc	r1, r20
    4390:	55 1f       	adc	r21, r21
    4392:	f2 cf       	rjmp	.-28     	; 0x4378 <__fp_split3+0xe>
    4394:	46 95       	lsr	r20
    4396:	f1 df       	rcall	.-30     	; 0x437a <__fp_splitA>
    4398:	08 c0       	rjmp	.+16     	; 0x43aa <__fp_splitA+0x30>
    439a:	16 16       	cp	r1, r22
    439c:	17 06       	cpc	r1, r23
    439e:	18 06       	cpc	r1, r24
    43a0:	99 1f       	adc	r25, r25
    43a2:	f1 cf       	rjmp	.-30     	; 0x4386 <__fp_splitA+0xc>
    43a4:	86 95       	lsr	r24
    43a6:	71 05       	cpc	r23, r1
    43a8:	61 05       	cpc	r22, r1
    43aa:	08 94       	sec
    43ac:	08 95       	ret

000043ae <__fp_zero>:
    43ae:	e8 94       	clt

000043b0 <__fp_szero>:
    43b0:	bb 27       	eor	r27, r27
    43b2:	66 27       	eor	r22, r22
    43b4:	77 27       	eor	r23, r23
    43b6:	cb 01       	movw	r24, r22
    43b8:	97 f9       	bld	r25, 7
    43ba:	08 95       	ret

000043bc <__gesf2>:
    43bc:	54 df       	rcall	.-344    	; 0x4266 <__fp_cmp>
    43be:	08 f4       	brcc	.+2      	; 0x43c2 <__gesf2+0x6>
    43c0:	8f ef       	ldi	r24, 0xFF	; 255
    43c2:	08 95       	ret

000043c4 <inverse>:
    43c4:	9b 01       	movw	r18, r22
    43c6:	ac 01       	movw	r20, r24
    43c8:	60 e0       	ldi	r22, 0x00	; 0
    43ca:	70 e0       	ldi	r23, 0x00	; 0
    43cc:	80 e8       	ldi	r24, 0x80	; 128
    43ce:	9f e3       	ldi	r25, 0x3F	; 63
    43d0:	59 ce       	rjmp	.-846    	; 0x4084 <__divsf3>

000043d2 <__mulsf3>:
    43d2:	0b d0       	rcall	.+22     	; 0x43ea <__mulsf3x>
    43d4:	b9 cf       	rjmp	.-142    	; 0x4348 <__fp_round>
    43d6:	aa df       	rcall	.-172    	; 0x432c <__fp_pscA>
    43d8:	28 f0       	brcs	.+10     	; 0x43e4 <__mulsf3+0x12>
    43da:	af df       	rcall	.-162    	; 0x433a <__fp_pscB>
    43dc:	18 f0       	brcs	.+6      	; 0x43e4 <__mulsf3+0x12>
    43de:	95 23       	and	r25, r21
    43e0:	09 f0       	breq	.+2      	; 0x43e4 <__mulsf3+0x12>
    43e2:	65 cf       	rjmp	.-310    	; 0x42ae <__fp_inf>
    43e4:	6a cf       	rjmp	.-300    	; 0x42ba <__fp_nan>
    43e6:	11 24       	eor	r1, r1
    43e8:	e3 cf       	rjmp	.-58     	; 0x43b0 <__fp_szero>

000043ea <__mulsf3x>:
    43ea:	bf df       	rcall	.-130    	; 0x436a <__fp_split3>
    43ec:	a0 f3       	brcs	.-24     	; 0x43d6 <__mulsf3+0x4>

000043ee <__mulsf3_pse>:
    43ee:	95 9f       	mul	r25, r21
    43f0:	d1 f3       	breq	.-12     	; 0x43e6 <__mulsf3+0x14>
    43f2:	95 0f       	add	r25, r21
    43f4:	50 e0       	ldi	r21, 0x00	; 0
    43f6:	55 1f       	adc	r21, r21
    43f8:	62 9f       	mul	r22, r18
    43fa:	f0 01       	movw	r30, r0
    43fc:	72 9f       	mul	r23, r18
    43fe:	bb 27       	eor	r27, r27
    4400:	f0 0d       	add	r31, r0
    4402:	b1 1d       	adc	r27, r1
    4404:	63 9f       	mul	r22, r19
    4406:	aa 27       	eor	r26, r26
    4408:	f0 0d       	add	r31, r0
    440a:	b1 1d       	adc	r27, r1
    440c:	aa 1f       	adc	r26, r26
    440e:	64 9f       	mul	r22, r20
    4410:	66 27       	eor	r22, r22
    4412:	b0 0d       	add	r27, r0
    4414:	a1 1d       	adc	r26, r1
    4416:	66 1f       	adc	r22, r22
    4418:	82 9f       	mul	r24, r18
    441a:	22 27       	eor	r18, r18
    441c:	b0 0d       	add	r27, r0
    441e:	a1 1d       	adc	r26, r1
    4420:	62 1f       	adc	r22, r18
    4422:	73 9f       	mul	r23, r19
    4424:	b0 0d       	add	r27, r0
    4426:	a1 1d       	adc	r26, r1
    4428:	62 1f       	adc	r22, r18
    442a:	83 9f       	mul	r24, r19
    442c:	a0 0d       	add	r26, r0
    442e:	61 1d       	adc	r22, r1
    4430:	22 1f       	adc	r18, r18
    4432:	74 9f       	mul	r23, r20
    4434:	33 27       	eor	r19, r19
    4436:	a0 0d       	add	r26, r0
    4438:	61 1d       	adc	r22, r1
    443a:	23 1f       	adc	r18, r19
    443c:	84 9f       	mul	r24, r20
    443e:	60 0d       	add	r22, r0
    4440:	21 1d       	adc	r18, r1
    4442:	82 2f       	mov	r24, r18
    4444:	76 2f       	mov	r23, r22
    4446:	6a 2f       	mov	r22, r26
    4448:	11 24       	eor	r1, r1
    444a:	9f 57       	subi	r25, 0x7F	; 127
    444c:	50 40       	sbci	r21, 0x00	; 0
    444e:	8a f0       	brmi	.+34     	; 0x4472 <__mulsf3_pse+0x84>
    4450:	e1 f0       	breq	.+56     	; 0x448a <__mulsf3_pse+0x9c>
    4452:	88 23       	and	r24, r24
    4454:	4a f0       	brmi	.+18     	; 0x4468 <__mulsf3_pse+0x7a>
    4456:	ee 0f       	add	r30, r30
    4458:	ff 1f       	adc	r31, r31
    445a:	bb 1f       	adc	r27, r27
    445c:	66 1f       	adc	r22, r22
    445e:	77 1f       	adc	r23, r23
    4460:	88 1f       	adc	r24, r24
    4462:	91 50       	subi	r25, 0x01	; 1
    4464:	50 40       	sbci	r21, 0x00	; 0
    4466:	a9 f7       	brne	.-22     	; 0x4452 <__mulsf3_pse+0x64>
    4468:	9e 3f       	cpi	r25, 0xFE	; 254
    446a:	51 05       	cpc	r21, r1
    446c:	70 f0       	brcs	.+28     	; 0x448a <__mulsf3_pse+0x9c>
    446e:	1f cf       	rjmp	.-450    	; 0x42ae <__fp_inf>
    4470:	9f cf       	rjmp	.-194    	; 0x43b0 <__fp_szero>
    4472:	5f 3f       	cpi	r21, 0xFF	; 255
    4474:	ec f3       	brlt	.-6      	; 0x4470 <__mulsf3_pse+0x82>
    4476:	98 3e       	cpi	r25, 0xE8	; 232
    4478:	dc f3       	brlt	.-10     	; 0x4470 <__mulsf3_pse+0x82>
    447a:	86 95       	lsr	r24
    447c:	77 95       	ror	r23
    447e:	67 95       	ror	r22
    4480:	b7 95       	ror	r27
    4482:	f7 95       	ror	r31
    4484:	e7 95       	ror	r30
    4486:	9f 5f       	subi	r25, 0xFF	; 255
    4488:	c1 f7       	brne	.-16     	; 0x447a <__mulsf3_pse+0x8c>
    448a:	fe 2b       	or	r31, r30
    448c:	88 0f       	add	r24, r24
    448e:	91 1d       	adc	r25, r1
    4490:	96 95       	lsr	r25
    4492:	87 95       	ror	r24
    4494:	97 f9       	bld	r25, 7
    4496:	08 95       	ret
    4498:	11 f4       	brne	.+4      	; 0x449e <__mulsf3_pse+0xb0>
    449a:	0e f4       	brtc	.+2      	; 0x449e <__mulsf3_pse+0xb0>
    449c:	0e cf       	rjmp	.-484    	; 0x42ba <__fp_nan>
    449e:	41 c0       	rjmp	.+130    	; 0x4522 <__fp_mpack>

000044a0 <sqrt>:
    44a0:	6c df       	rcall	.-296    	; 0x437a <__fp_splitA>
    44a2:	d0 f3       	brcs	.-12     	; 0x4498 <__mulsf3_pse+0xaa>
    44a4:	99 23       	and	r25, r25
    44a6:	d9 f3       	breq	.-10     	; 0x449e <__mulsf3_pse+0xb0>
    44a8:	ce f3       	brts	.-14     	; 0x449c <__mulsf3_pse+0xae>
    44aa:	9f 57       	subi	r25, 0x7F	; 127
    44ac:	55 0b       	sbc	r21, r21
    44ae:	87 ff       	sbrs	r24, 7
    44b0:	46 d0       	rcall	.+140    	; 0x453e <__fp_norm2>
    44b2:	00 24       	eor	r0, r0
    44b4:	a0 e6       	ldi	r26, 0x60	; 96
    44b6:	40 ea       	ldi	r20, 0xA0	; 160
    44b8:	90 01       	movw	r18, r0
    44ba:	80 58       	subi	r24, 0x80	; 128
    44bc:	56 95       	lsr	r21
    44be:	97 95       	ror	r25
    44c0:	28 f4       	brcc	.+10     	; 0x44cc <sqrt+0x2c>
    44c2:	80 5c       	subi	r24, 0xC0	; 192
    44c4:	66 0f       	add	r22, r22
    44c6:	77 1f       	adc	r23, r23
    44c8:	88 1f       	adc	r24, r24
    44ca:	20 f0       	brcs	.+8      	; 0x44d4 <sqrt+0x34>
    44cc:	26 17       	cp	r18, r22
    44ce:	37 07       	cpc	r19, r23
    44d0:	48 07       	cpc	r20, r24
    44d2:	30 f4       	brcc	.+12     	; 0x44e0 <sqrt+0x40>
    44d4:	62 1b       	sub	r22, r18
    44d6:	73 0b       	sbc	r23, r19
    44d8:	84 0b       	sbc	r24, r20
    44da:	20 29       	or	r18, r0
    44dc:	31 29       	or	r19, r1
    44de:	4a 2b       	or	r20, r26
    44e0:	a6 95       	lsr	r26
    44e2:	17 94       	ror	r1
    44e4:	07 94       	ror	r0
    44e6:	20 25       	eor	r18, r0
    44e8:	31 25       	eor	r19, r1
    44ea:	4a 27       	eor	r20, r26
    44ec:	58 f7       	brcc	.-42     	; 0x44c4 <sqrt+0x24>
    44ee:	66 0f       	add	r22, r22
    44f0:	77 1f       	adc	r23, r23
    44f2:	88 1f       	adc	r24, r24
    44f4:	20 f0       	brcs	.+8      	; 0x44fe <sqrt+0x5e>
    44f6:	26 17       	cp	r18, r22
    44f8:	37 07       	cpc	r19, r23
    44fa:	48 07       	cpc	r20, r24
    44fc:	30 f4       	brcc	.+12     	; 0x450a <sqrt+0x6a>
    44fe:	62 0b       	sbc	r22, r18
    4500:	73 0b       	sbc	r23, r19
    4502:	84 0b       	sbc	r24, r20
    4504:	20 0d       	add	r18, r0
    4506:	31 1d       	adc	r19, r1
    4508:	41 1d       	adc	r20, r1
    450a:	a0 95       	com	r26
    450c:	81 f7       	brne	.-32     	; 0x44ee <sqrt+0x4e>
    450e:	b9 01       	movw	r22, r18
    4510:	84 2f       	mov	r24, r20
    4512:	91 58       	subi	r25, 0x81	; 129
    4514:	88 0f       	add	r24, r24
    4516:	96 95       	lsr	r25
    4518:	87 95       	ror	r24
    451a:	08 95       	ret

0000451c <square>:
    451c:	9b 01       	movw	r18, r22
    451e:	ac 01       	movw	r20, r24
    4520:	58 cf       	rjmp	.-336    	; 0x43d2 <__mulsf3>

00004522 <__fp_mpack>:
    4522:	9f 3f       	cpi	r25, 0xFF	; 255
    4524:	31 f0       	breq	.+12     	; 0x4532 <__fp_mpack_finite+0xc>

00004526 <__fp_mpack_finite>:
    4526:	91 50       	subi	r25, 0x01	; 1
    4528:	20 f4       	brcc	.+8      	; 0x4532 <__fp_mpack_finite+0xc>
    452a:	87 95       	ror	r24
    452c:	77 95       	ror	r23
    452e:	67 95       	ror	r22
    4530:	b7 95       	ror	r27
    4532:	88 0f       	add	r24, r24
    4534:	91 1d       	adc	r25, r1
    4536:	96 95       	lsr	r25
    4538:	87 95       	ror	r24
    453a:	97 f9       	bld	r25, 7
    453c:	08 95       	ret

0000453e <__fp_norm2>:
    453e:	91 50       	subi	r25, 0x01	; 1
    4540:	50 40       	sbci	r21, 0x00	; 0
    4542:	66 0f       	add	r22, r22
    4544:	77 1f       	adc	r23, r23
    4546:	88 1f       	adc	r24, r24
    4548:	d2 f7       	brpl	.-12     	; 0x453e <__fp_norm2>
    454a:	08 95       	ret

0000454c <__udivmodhi4>:
    454c:	aa 1b       	sub	r26, r26
    454e:	bb 1b       	sub	r27, r27
    4550:	51 e1       	ldi	r21, 0x11	; 17
    4552:	07 c0       	rjmp	.+14     	; 0x4562 <__udivmodhi4_ep>

00004554 <__udivmodhi4_loop>:
    4554:	aa 1f       	adc	r26, r26
    4556:	bb 1f       	adc	r27, r27
    4558:	a6 17       	cp	r26, r22
    455a:	b7 07       	cpc	r27, r23
    455c:	10 f0       	brcs	.+4      	; 0x4562 <__udivmodhi4_ep>
    455e:	a6 1b       	sub	r26, r22
    4560:	b7 0b       	sbc	r27, r23

00004562 <__udivmodhi4_ep>:
    4562:	88 1f       	adc	r24, r24
    4564:	99 1f       	adc	r25, r25
    4566:	5a 95       	dec	r21
    4568:	a9 f7       	brne	.-22     	; 0x4554 <__udivmodhi4_loop>
    456a:	80 95       	com	r24
    456c:	90 95       	com	r25
    456e:	bc 01       	movw	r22, r24
    4570:	cd 01       	movw	r24, r26
    4572:	08 95       	ret

00004574 <__udivmodsi4>:
    4574:	a1 e2       	ldi	r26, 0x21	; 33
    4576:	1a 2e       	mov	r1, r26
    4578:	aa 1b       	sub	r26, r26
    457a:	bb 1b       	sub	r27, r27
    457c:	fd 01       	movw	r30, r26
    457e:	0d c0       	rjmp	.+26     	; 0x459a <__udivmodsi4_ep>

00004580 <__udivmodsi4_loop>:
    4580:	aa 1f       	adc	r26, r26
    4582:	bb 1f       	adc	r27, r27
    4584:	ee 1f       	adc	r30, r30
    4586:	ff 1f       	adc	r31, r31
    4588:	a2 17       	cp	r26, r18
    458a:	b3 07       	cpc	r27, r19
    458c:	e4 07       	cpc	r30, r20
    458e:	f5 07       	cpc	r31, r21
    4590:	20 f0       	brcs	.+8      	; 0x459a <__udivmodsi4_ep>
    4592:	a2 1b       	sub	r26, r18
    4594:	b3 0b       	sbc	r27, r19
    4596:	e4 0b       	sbc	r30, r20
    4598:	f5 0b       	sbc	r31, r21

0000459a <__udivmodsi4_ep>:
    459a:	66 1f       	adc	r22, r22
    459c:	77 1f       	adc	r23, r23
    459e:	88 1f       	adc	r24, r24
    45a0:	99 1f       	adc	r25, r25
    45a2:	1a 94       	dec	r1
    45a4:	69 f7       	brne	.-38     	; 0x4580 <__udivmodsi4_loop>
    45a6:	60 95       	com	r22
    45a8:	70 95       	com	r23
    45aa:	80 95       	com	r24
    45ac:	90 95       	com	r25
    45ae:	9b 01       	movw	r18, r22
    45b0:	ac 01       	movw	r20, r24
    45b2:	bd 01       	movw	r22, r26
    45b4:	cf 01       	movw	r24, r30
    45b6:	08 95       	ret

000045b8 <fdevopen>:
    45b8:	0f 93       	push	r16
    45ba:	1f 93       	push	r17
    45bc:	cf 93       	push	r28
    45be:	df 93       	push	r29
    45c0:	00 97       	sbiw	r24, 0x00	; 0
    45c2:	31 f4       	brne	.+12     	; 0x45d0 <fdevopen+0x18>
    45c4:	61 15       	cp	r22, r1
    45c6:	71 05       	cpc	r23, r1
    45c8:	19 f4       	brne	.+6      	; 0x45d0 <fdevopen+0x18>
    45ca:	80 e0       	ldi	r24, 0x00	; 0
    45cc:	90 e0       	ldi	r25, 0x00	; 0
    45ce:	39 c0       	rjmp	.+114    	; 0x4642 <fdevopen+0x8a>
    45d0:	8b 01       	movw	r16, r22
    45d2:	ec 01       	movw	r28, r24
    45d4:	6e e0       	ldi	r22, 0x0E	; 14
    45d6:	70 e0       	ldi	r23, 0x00	; 0
    45d8:	81 e0       	ldi	r24, 0x01	; 1
    45da:	90 e0       	ldi	r25, 0x00	; 0
    45dc:	4c d2       	rcall	.+1176   	; 0x4a76 <calloc>
    45de:	fc 01       	movw	r30, r24
    45e0:	89 2b       	or	r24, r25
    45e2:	99 f3       	breq	.-26     	; 0x45ca <fdevopen+0x12>
    45e4:	80 e8       	ldi	r24, 0x80	; 128
    45e6:	83 83       	std	Z+3, r24	; 0x03
    45e8:	01 15       	cp	r16, r1
    45ea:	11 05       	cpc	r17, r1
    45ec:	71 f0       	breq	.+28     	; 0x460a <fdevopen+0x52>
    45ee:	02 87       	std	Z+10, r16	; 0x0a
    45f0:	13 87       	std	Z+11, r17	; 0x0b
    45f2:	81 e8       	ldi	r24, 0x81	; 129
    45f4:	83 83       	std	Z+3, r24	; 0x03
    45f6:	80 91 40 22 	lds	r24, 0x2240	; 0x802240 <__iob>
    45fa:	90 91 41 22 	lds	r25, 0x2241	; 0x802241 <__iob+0x1>
    45fe:	89 2b       	or	r24, r25
    4600:	21 f4       	brne	.+8      	; 0x460a <fdevopen+0x52>
    4602:	e0 93 40 22 	sts	0x2240, r30	; 0x802240 <__iob>
    4606:	f0 93 41 22 	sts	0x2241, r31	; 0x802241 <__iob+0x1>
    460a:	20 97       	sbiw	r28, 0x00	; 0
    460c:	c9 f0       	breq	.+50     	; 0x4640 <fdevopen+0x88>
    460e:	c0 87       	std	Z+8, r28	; 0x08
    4610:	d1 87       	std	Z+9, r29	; 0x09
    4612:	83 81       	ldd	r24, Z+3	; 0x03
    4614:	82 60       	ori	r24, 0x02	; 2
    4616:	83 83       	std	Z+3, r24	; 0x03
    4618:	80 91 42 22 	lds	r24, 0x2242	; 0x802242 <__iob+0x2>
    461c:	90 91 43 22 	lds	r25, 0x2243	; 0x802243 <__iob+0x3>
    4620:	89 2b       	or	r24, r25
    4622:	71 f4       	brne	.+28     	; 0x4640 <fdevopen+0x88>
    4624:	e0 93 42 22 	sts	0x2242, r30	; 0x802242 <__iob+0x2>
    4628:	f0 93 43 22 	sts	0x2243, r31	; 0x802243 <__iob+0x3>
    462c:	80 91 44 22 	lds	r24, 0x2244	; 0x802244 <__iob+0x4>
    4630:	90 91 45 22 	lds	r25, 0x2245	; 0x802245 <__iob+0x5>
    4634:	89 2b       	or	r24, r25
    4636:	21 f4       	brne	.+8      	; 0x4640 <fdevopen+0x88>
    4638:	e0 93 44 22 	sts	0x2244, r30	; 0x802244 <__iob+0x4>
    463c:	f0 93 45 22 	sts	0x2245, r31	; 0x802245 <__iob+0x5>
    4640:	cf 01       	movw	r24, r30
    4642:	df 91       	pop	r29
    4644:	cf 91       	pop	r28
    4646:	1f 91       	pop	r17
    4648:	0f 91       	pop	r16
    464a:	08 95       	ret

0000464c <printf>:
    464c:	a0 e0       	ldi	r26, 0x00	; 0
    464e:	b0 e0       	ldi	r27, 0x00	; 0
    4650:	eb e2       	ldi	r30, 0x2B	; 43
    4652:	f3 e2       	ldi	r31, 0x23	; 35
    4654:	12 c4       	rjmp	.+2084   	; 0x4e7a <__prologue_saves__+0x20>
    4656:	ae 01       	movw	r20, r28
    4658:	4b 5f       	subi	r20, 0xFB	; 251
    465a:	5f 4f       	sbci	r21, 0xFF	; 255
    465c:	fa 01       	movw	r30, r20
    465e:	61 91       	ld	r22, Z+
    4660:	71 91       	ld	r23, Z+
    4662:	af 01       	movw	r20, r30
    4664:	80 91 42 22 	lds	r24, 0x2242	; 0x802242 <__iob+0x2>
    4668:	90 91 43 22 	lds	r25, 0x2243	; 0x802243 <__iob+0x3>
    466c:	32 d0       	rcall	.+100    	; 0x46d2 <vfprintf>
    466e:	e2 e0       	ldi	r30, 0x02	; 2
    4670:	1d c4       	rjmp	.+2106   	; 0x4eac <__epilogue_restores__+0x20>

00004672 <puts>:
    4672:	0f 93       	push	r16
    4674:	1f 93       	push	r17
    4676:	cf 93       	push	r28
    4678:	df 93       	push	r29
    467a:	e0 91 42 22 	lds	r30, 0x2242	; 0x802242 <__iob+0x2>
    467e:	f0 91 43 22 	lds	r31, 0x2243	; 0x802243 <__iob+0x3>
    4682:	23 81       	ldd	r18, Z+3	; 0x03
    4684:	21 ff       	sbrs	r18, 1
    4686:	1b c0       	rjmp	.+54     	; 0x46be <puts+0x4c>
    4688:	8c 01       	movw	r16, r24
    468a:	d0 e0       	ldi	r29, 0x00	; 0
    468c:	c0 e0       	ldi	r28, 0x00	; 0
    468e:	f8 01       	movw	r30, r16
    4690:	81 91       	ld	r24, Z+
    4692:	8f 01       	movw	r16, r30
    4694:	60 91 42 22 	lds	r22, 0x2242	; 0x802242 <__iob+0x2>
    4698:	70 91 43 22 	lds	r23, 0x2243	; 0x802243 <__iob+0x3>
    469c:	db 01       	movw	r26, r22
    469e:	18 96       	adiw	r26, 0x08	; 8
    46a0:	ed 91       	ld	r30, X+
    46a2:	fc 91       	ld	r31, X
    46a4:	19 97       	sbiw	r26, 0x09	; 9
    46a6:	88 23       	and	r24, r24
    46a8:	31 f0       	breq	.+12     	; 0x46b6 <puts+0x44>
    46aa:	09 95       	icall
    46ac:	89 2b       	or	r24, r25
    46ae:	79 f3       	breq	.-34     	; 0x468e <puts+0x1c>
    46b0:	df ef       	ldi	r29, 0xFF	; 255
    46b2:	cf ef       	ldi	r28, 0xFF	; 255
    46b4:	ec cf       	rjmp	.-40     	; 0x468e <puts+0x1c>
    46b6:	8a e0       	ldi	r24, 0x0A	; 10
    46b8:	09 95       	icall
    46ba:	89 2b       	or	r24, r25
    46bc:	19 f0       	breq	.+6      	; 0x46c4 <puts+0x52>
    46be:	8f ef       	ldi	r24, 0xFF	; 255
    46c0:	9f ef       	ldi	r25, 0xFF	; 255
    46c2:	02 c0       	rjmp	.+4      	; 0x46c8 <puts+0x56>
    46c4:	8d 2f       	mov	r24, r29
    46c6:	9c 2f       	mov	r25, r28
    46c8:	df 91       	pop	r29
    46ca:	cf 91       	pop	r28
    46cc:	1f 91       	pop	r17
    46ce:	0f 91       	pop	r16
    46d0:	08 95       	ret

000046d2 <vfprintf>:
    46d2:	ab e0       	ldi	r26, 0x0B	; 11
    46d4:	b0 e0       	ldi	r27, 0x00	; 0
    46d6:	ee e6       	ldi	r30, 0x6E	; 110
    46d8:	f3 e2       	ldi	r31, 0x23	; 35
    46da:	bf c3       	rjmp	.+1918   	; 0x4e5a <__prologue_saves__>
    46dc:	6c 01       	movw	r12, r24
    46de:	7b 01       	movw	r14, r22
    46e0:	8a 01       	movw	r16, r20
    46e2:	fc 01       	movw	r30, r24
    46e4:	16 82       	std	Z+6, r1	; 0x06
    46e6:	17 82       	std	Z+7, r1	; 0x07
    46e8:	83 81       	ldd	r24, Z+3	; 0x03
    46ea:	81 ff       	sbrs	r24, 1
    46ec:	bf c1       	rjmp	.+894    	; 0x4a6c <vfprintf+0x39a>
    46ee:	ce 01       	movw	r24, r28
    46f0:	01 96       	adiw	r24, 0x01	; 1
    46f2:	3c 01       	movw	r6, r24
    46f4:	f6 01       	movw	r30, r12
    46f6:	93 81       	ldd	r25, Z+3	; 0x03
    46f8:	f7 01       	movw	r30, r14
    46fa:	93 fd       	sbrc	r25, 3
    46fc:	85 91       	lpm	r24, Z+
    46fe:	93 ff       	sbrs	r25, 3
    4700:	81 91       	ld	r24, Z+
    4702:	7f 01       	movw	r14, r30
    4704:	88 23       	and	r24, r24
    4706:	09 f4       	brne	.+2      	; 0x470a <vfprintf+0x38>
    4708:	ad c1       	rjmp	.+858    	; 0x4a64 <vfprintf+0x392>
    470a:	85 32       	cpi	r24, 0x25	; 37
    470c:	39 f4       	brne	.+14     	; 0x471c <vfprintf+0x4a>
    470e:	93 fd       	sbrc	r25, 3
    4710:	85 91       	lpm	r24, Z+
    4712:	93 ff       	sbrs	r25, 3
    4714:	81 91       	ld	r24, Z+
    4716:	7f 01       	movw	r14, r30
    4718:	85 32       	cpi	r24, 0x25	; 37
    471a:	21 f4       	brne	.+8      	; 0x4724 <vfprintf+0x52>
    471c:	b6 01       	movw	r22, r12
    471e:	90 e0       	ldi	r25, 0x00	; 0
    4720:	02 d3       	rcall	.+1540   	; 0x4d26 <fputc>
    4722:	e8 cf       	rjmp	.-48     	; 0x46f4 <vfprintf+0x22>
    4724:	91 2c       	mov	r9, r1
    4726:	21 2c       	mov	r2, r1
    4728:	31 2c       	mov	r3, r1
    472a:	ff e1       	ldi	r31, 0x1F	; 31
    472c:	f3 15       	cp	r31, r3
    472e:	d8 f0       	brcs	.+54     	; 0x4766 <vfprintf+0x94>
    4730:	8b 32       	cpi	r24, 0x2B	; 43
    4732:	79 f0       	breq	.+30     	; 0x4752 <vfprintf+0x80>
    4734:	38 f4       	brcc	.+14     	; 0x4744 <vfprintf+0x72>
    4736:	80 32       	cpi	r24, 0x20	; 32
    4738:	79 f0       	breq	.+30     	; 0x4758 <vfprintf+0x86>
    473a:	83 32       	cpi	r24, 0x23	; 35
    473c:	a1 f4       	brne	.+40     	; 0x4766 <vfprintf+0x94>
    473e:	23 2d       	mov	r18, r3
    4740:	20 61       	ori	r18, 0x10	; 16
    4742:	1d c0       	rjmp	.+58     	; 0x477e <vfprintf+0xac>
    4744:	8d 32       	cpi	r24, 0x2D	; 45
    4746:	61 f0       	breq	.+24     	; 0x4760 <vfprintf+0x8e>
    4748:	80 33       	cpi	r24, 0x30	; 48
    474a:	69 f4       	brne	.+26     	; 0x4766 <vfprintf+0x94>
    474c:	23 2d       	mov	r18, r3
    474e:	21 60       	ori	r18, 0x01	; 1
    4750:	16 c0       	rjmp	.+44     	; 0x477e <vfprintf+0xac>
    4752:	83 2d       	mov	r24, r3
    4754:	82 60       	ori	r24, 0x02	; 2
    4756:	38 2e       	mov	r3, r24
    4758:	e3 2d       	mov	r30, r3
    475a:	e4 60       	ori	r30, 0x04	; 4
    475c:	3e 2e       	mov	r3, r30
    475e:	2a c0       	rjmp	.+84     	; 0x47b4 <vfprintf+0xe2>
    4760:	f3 2d       	mov	r31, r3
    4762:	f8 60       	ori	r31, 0x08	; 8
    4764:	1d c0       	rjmp	.+58     	; 0x47a0 <vfprintf+0xce>
    4766:	37 fc       	sbrc	r3, 7
    4768:	2d c0       	rjmp	.+90     	; 0x47c4 <vfprintf+0xf2>
    476a:	20 ed       	ldi	r18, 0xD0	; 208
    476c:	28 0f       	add	r18, r24
    476e:	2a 30       	cpi	r18, 0x0A	; 10
    4770:	40 f0       	brcs	.+16     	; 0x4782 <vfprintf+0xb0>
    4772:	8e 32       	cpi	r24, 0x2E	; 46
    4774:	b9 f4       	brne	.+46     	; 0x47a4 <vfprintf+0xd2>
    4776:	36 fc       	sbrc	r3, 6
    4778:	75 c1       	rjmp	.+746    	; 0x4a64 <vfprintf+0x392>
    477a:	23 2d       	mov	r18, r3
    477c:	20 64       	ori	r18, 0x40	; 64
    477e:	32 2e       	mov	r3, r18
    4780:	19 c0       	rjmp	.+50     	; 0x47b4 <vfprintf+0xe2>
    4782:	36 fe       	sbrs	r3, 6
    4784:	06 c0       	rjmp	.+12     	; 0x4792 <vfprintf+0xc0>
    4786:	8a e0       	ldi	r24, 0x0A	; 10
    4788:	98 9e       	mul	r9, r24
    478a:	20 0d       	add	r18, r0
    478c:	11 24       	eor	r1, r1
    478e:	92 2e       	mov	r9, r18
    4790:	11 c0       	rjmp	.+34     	; 0x47b4 <vfprintf+0xe2>
    4792:	ea e0       	ldi	r30, 0x0A	; 10
    4794:	2e 9e       	mul	r2, r30
    4796:	20 0d       	add	r18, r0
    4798:	11 24       	eor	r1, r1
    479a:	22 2e       	mov	r2, r18
    479c:	f3 2d       	mov	r31, r3
    479e:	f0 62       	ori	r31, 0x20	; 32
    47a0:	3f 2e       	mov	r3, r31
    47a2:	08 c0       	rjmp	.+16     	; 0x47b4 <vfprintf+0xe2>
    47a4:	8c 36       	cpi	r24, 0x6C	; 108
    47a6:	21 f4       	brne	.+8      	; 0x47b0 <vfprintf+0xde>
    47a8:	83 2d       	mov	r24, r3
    47aa:	80 68       	ori	r24, 0x80	; 128
    47ac:	38 2e       	mov	r3, r24
    47ae:	02 c0       	rjmp	.+4      	; 0x47b4 <vfprintf+0xe2>
    47b0:	88 36       	cpi	r24, 0x68	; 104
    47b2:	41 f4       	brne	.+16     	; 0x47c4 <vfprintf+0xf2>
    47b4:	f7 01       	movw	r30, r14
    47b6:	93 fd       	sbrc	r25, 3
    47b8:	85 91       	lpm	r24, Z+
    47ba:	93 ff       	sbrs	r25, 3
    47bc:	81 91       	ld	r24, Z+
    47be:	7f 01       	movw	r14, r30
    47c0:	81 11       	cpse	r24, r1
    47c2:	b3 cf       	rjmp	.-154    	; 0x472a <vfprintf+0x58>
    47c4:	98 2f       	mov	r25, r24
    47c6:	9f 7d       	andi	r25, 0xDF	; 223
    47c8:	95 54       	subi	r25, 0x45	; 69
    47ca:	93 30       	cpi	r25, 0x03	; 3
    47cc:	28 f4       	brcc	.+10     	; 0x47d8 <vfprintf+0x106>
    47ce:	0c 5f       	subi	r16, 0xFC	; 252
    47d0:	1f 4f       	sbci	r17, 0xFF	; 255
    47d2:	9f e3       	ldi	r25, 0x3F	; 63
    47d4:	99 83       	std	Y+1, r25	; 0x01
    47d6:	0d c0       	rjmp	.+26     	; 0x47f2 <vfprintf+0x120>
    47d8:	83 36       	cpi	r24, 0x63	; 99
    47da:	31 f0       	breq	.+12     	; 0x47e8 <vfprintf+0x116>
    47dc:	83 37       	cpi	r24, 0x73	; 115
    47de:	71 f0       	breq	.+28     	; 0x47fc <vfprintf+0x12a>
    47e0:	83 35       	cpi	r24, 0x53	; 83
    47e2:	09 f0       	breq	.+2      	; 0x47e6 <vfprintf+0x114>
    47e4:	55 c0       	rjmp	.+170    	; 0x4890 <vfprintf+0x1be>
    47e6:	20 c0       	rjmp	.+64     	; 0x4828 <vfprintf+0x156>
    47e8:	f8 01       	movw	r30, r16
    47ea:	80 81       	ld	r24, Z
    47ec:	89 83       	std	Y+1, r24	; 0x01
    47ee:	0e 5f       	subi	r16, 0xFE	; 254
    47f0:	1f 4f       	sbci	r17, 0xFF	; 255
    47f2:	88 24       	eor	r8, r8
    47f4:	83 94       	inc	r8
    47f6:	91 2c       	mov	r9, r1
    47f8:	53 01       	movw	r10, r6
    47fa:	12 c0       	rjmp	.+36     	; 0x4820 <vfprintf+0x14e>
    47fc:	28 01       	movw	r4, r16
    47fe:	f2 e0       	ldi	r31, 0x02	; 2
    4800:	4f 0e       	add	r4, r31
    4802:	51 1c       	adc	r5, r1
    4804:	f8 01       	movw	r30, r16
    4806:	a0 80       	ld	r10, Z
    4808:	b1 80       	ldd	r11, Z+1	; 0x01
    480a:	36 fe       	sbrs	r3, 6
    480c:	03 c0       	rjmp	.+6      	; 0x4814 <vfprintf+0x142>
    480e:	69 2d       	mov	r22, r9
    4810:	70 e0       	ldi	r23, 0x00	; 0
    4812:	02 c0       	rjmp	.+4      	; 0x4818 <vfprintf+0x146>
    4814:	6f ef       	ldi	r22, 0xFF	; 255
    4816:	7f ef       	ldi	r23, 0xFF	; 255
    4818:	c5 01       	movw	r24, r10
    481a:	7a d2       	rcall	.+1268   	; 0x4d10 <strnlen>
    481c:	4c 01       	movw	r8, r24
    481e:	82 01       	movw	r16, r4
    4820:	f3 2d       	mov	r31, r3
    4822:	ff 77       	andi	r31, 0x7F	; 127
    4824:	3f 2e       	mov	r3, r31
    4826:	15 c0       	rjmp	.+42     	; 0x4852 <vfprintf+0x180>
    4828:	28 01       	movw	r4, r16
    482a:	22 e0       	ldi	r18, 0x02	; 2
    482c:	42 0e       	add	r4, r18
    482e:	51 1c       	adc	r5, r1
    4830:	f8 01       	movw	r30, r16
    4832:	a0 80       	ld	r10, Z
    4834:	b1 80       	ldd	r11, Z+1	; 0x01
    4836:	36 fe       	sbrs	r3, 6
    4838:	03 c0       	rjmp	.+6      	; 0x4840 <vfprintf+0x16e>
    483a:	69 2d       	mov	r22, r9
    483c:	70 e0       	ldi	r23, 0x00	; 0
    483e:	02 c0       	rjmp	.+4      	; 0x4844 <vfprintf+0x172>
    4840:	6f ef       	ldi	r22, 0xFF	; 255
    4842:	7f ef       	ldi	r23, 0xFF	; 255
    4844:	c5 01       	movw	r24, r10
    4846:	52 d2       	rcall	.+1188   	; 0x4cec <strnlen_P>
    4848:	4c 01       	movw	r8, r24
    484a:	f3 2d       	mov	r31, r3
    484c:	f0 68       	ori	r31, 0x80	; 128
    484e:	3f 2e       	mov	r3, r31
    4850:	82 01       	movw	r16, r4
    4852:	33 fc       	sbrc	r3, 3
    4854:	19 c0       	rjmp	.+50     	; 0x4888 <vfprintf+0x1b6>
    4856:	82 2d       	mov	r24, r2
    4858:	90 e0       	ldi	r25, 0x00	; 0
    485a:	88 16       	cp	r8, r24
    485c:	99 06       	cpc	r9, r25
    485e:	a0 f4       	brcc	.+40     	; 0x4888 <vfprintf+0x1b6>
    4860:	b6 01       	movw	r22, r12
    4862:	80 e2       	ldi	r24, 0x20	; 32
    4864:	90 e0       	ldi	r25, 0x00	; 0
    4866:	5f d2       	rcall	.+1214   	; 0x4d26 <fputc>
    4868:	2a 94       	dec	r2
    486a:	f5 cf       	rjmp	.-22     	; 0x4856 <vfprintf+0x184>
    486c:	f5 01       	movw	r30, r10
    486e:	37 fc       	sbrc	r3, 7
    4870:	85 91       	lpm	r24, Z+
    4872:	37 fe       	sbrs	r3, 7
    4874:	81 91       	ld	r24, Z+
    4876:	5f 01       	movw	r10, r30
    4878:	b6 01       	movw	r22, r12
    487a:	90 e0       	ldi	r25, 0x00	; 0
    487c:	54 d2       	rcall	.+1192   	; 0x4d26 <fputc>
    487e:	21 10       	cpse	r2, r1
    4880:	2a 94       	dec	r2
    4882:	21 e0       	ldi	r18, 0x01	; 1
    4884:	82 1a       	sub	r8, r18
    4886:	91 08       	sbc	r9, r1
    4888:	81 14       	cp	r8, r1
    488a:	91 04       	cpc	r9, r1
    488c:	79 f7       	brne	.-34     	; 0x486c <vfprintf+0x19a>
    488e:	e1 c0       	rjmp	.+450    	; 0x4a52 <vfprintf+0x380>
    4890:	84 36       	cpi	r24, 0x64	; 100
    4892:	11 f0       	breq	.+4      	; 0x4898 <vfprintf+0x1c6>
    4894:	89 36       	cpi	r24, 0x69	; 105
    4896:	39 f5       	brne	.+78     	; 0x48e6 <vfprintf+0x214>
    4898:	f8 01       	movw	r30, r16
    489a:	37 fe       	sbrs	r3, 7
    489c:	07 c0       	rjmp	.+14     	; 0x48ac <vfprintf+0x1da>
    489e:	60 81       	ld	r22, Z
    48a0:	71 81       	ldd	r23, Z+1	; 0x01
    48a2:	82 81       	ldd	r24, Z+2	; 0x02
    48a4:	93 81       	ldd	r25, Z+3	; 0x03
    48a6:	0c 5f       	subi	r16, 0xFC	; 252
    48a8:	1f 4f       	sbci	r17, 0xFF	; 255
    48aa:	08 c0       	rjmp	.+16     	; 0x48bc <vfprintf+0x1ea>
    48ac:	60 81       	ld	r22, Z
    48ae:	71 81       	ldd	r23, Z+1	; 0x01
    48b0:	07 2e       	mov	r0, r23
    48b2:	00 0c       	add	r0, r0
    48b4:	88 0b       	sbc	r24, r24
    48b6:	99 0b       	sbc	r25, r25
    48b8:	0e 5f       	subi	r16, 0xFE	; 254
    48ba:	1f 4f       	sbci	r17, 0xFF	; 255
    48bc:	f3 2d       	mov	r31, r3
    48be:	ff 76       	andi	r31, 0x6F	; 111
    48c0:	3f 2e       	mov	r3, r31
    48c2:	97 ff       	sbrs	r25, 7
    48c4:	09 c0       	rjmp	.+18     	; 0x48d8 <vfprintf+0x206>
    48c6:	90 95       	com	r25
    48c8:	80 95       	com	r24
    48ca:	70 95       	com	r23
    48cc:	61 95       	neg	r22
    48ce:	7f 4f       	sbci	r23, 0xFF	; 255
    48d0:	8f 4f       	sbci	r24, 0xFF	; 255
    48d2:	9f 4f       	sbci	r25, 0xFF	; 255
    48d4:	f0 68       	ori	r31, 0x80	; 128
    48d6:	3f 2e       	mov	r3, r31
    48d8:	2a e0       	ldi	r18, 0x0A	; 10
    48da:	30 e0       	ldi	r19, 0x00	; 0
    48dc:	a3 01       	movw	r20, r6
    48de:	5f d2       	rcall	.+1214   	; 0x4d9e <__ultoa_invert>
    48e0:	88 2e       	mov	r8, r24
    48e2:	86 18       	sub	r8, r6
    48e4:	44 c0       	rjmp	.+136    	; 0x496e <vfprintf+0x29c>
    48e6:	85 37       	cpi	r24, 0x75	; 117
    48e8:	31 f4       	brne	.+12     	; 0x48f6 <vfprintf+0x224>
    48ea:	23 2d       	mov	r18, r3
    48ec:	2f 7e       	andi	r18, 0xEF	; 239
    48ee:	b2 2e       	mov	r11, r18
    48f0:	2a e0       	ldi	r18, 0x0A	; 10
    48f2:	30 e0       	ldi	r19, 0x00	; 0
    48f4:	25 c0       	rjmp	.+74     	; 0x4940 <vfprintf+0x26e>
    48f6:	93 2d       	mov	r25, r3
    48f8:	99 7f       	andi	r25, 0xF9	; 249
    48fa:	b9 2e       	mov	r11, r25
    48fc:	8f 36       	cpi	r24, 0x6F	; 111
    48fe:	c1 f0       	breq	.+48     	; 0x4930 <vfprintf+0x25e>
    4900:	18 f4       	brcc	.+6      	; 0x4908 <vfprintf+0x236>
    4902:	88 35       	cpi	r24, 0x58	; 88
    4904:	79 f0       	breq	.+30     	; 0x4924 <vfprintf+0x252>
    4906:	ae c0       	rjmp	.+348    	; 0x4a64 <vfprintf+0x392>
    4908:	80 37       	cpi	r24, 0x70	; 112
    490a:	19 f0       	breq	.+6      	; 0x4912 <vfprintf+0x240>
    490c:	88 37       	cpi	r24, 0x78	; 120
    490e:	21 f0       	breq	.+8      	; 0x4918 <vfprintf+0x246>
    4910:	a9 c0       	rjmp	.+338    	; 0x4a64 <vfprintf+0x392>
    4912:	e9 2f       	mov	r30, r25
    4914:	e0 61       	ori	r30, 0x10	; 16
    4916:	be 2e       	mov	r11, r30
    4918:	b4 fe       	sbrs	r11, 4
    491a:	0d c0       	rjmp	.+26     	; 0x4936 <vfprintf+0x264>
    491c:	fb 2d       	mov	r31, r11
    491e:	f4 60       	ori	r31, 0x04	; 4
    4920:	bf 2e       	mov	r11, r31
    4922:	09 c0       	rjmp	.+18     	; 0x4936 <vfprintf+0x264>
    4924:	34 fe       	sbrs	r3, 4
    4926:	0a c0       	rjmp	.+20     	; 0x493c <vfprintf+0x26a>
    4928:	29 2f       	mov	r18, r25
    492a:	26 60       	ori	r18, 0x06	; 6
    492c:	b2 2e       	mov	r11, r18
    492e:	06 c0       	rjmp	.+12     	; 0x493c <vfprintf+0x26a>
    4930:	28 e0       	ldi	r18, 0x08	; 8
    4932:	30 e0       	ldi	r19, 0x00	; 0
    4934:	05 c0       	rjmp	.+10     	; 0x4940 <vfprintf+0x26e>
    4936:	20 e1       	ldi	r18, 0x10	; 16
    4938:	30 e0       	ldi	r19, 0x00	; 0
    493a:	02 c0       	rjmp	.+4      	; 0x4940 <vfprintf+0x26e>
    493c:	20 e1       	ldi	r18, 0x10	; 16
    493e:	32 e0       	ldi	r19, 0x02	; 2
    4940:	f8 01       	movw	r30, r16
    4942:	b7 fe       	sbrs	r11, 7
    4944:	07 c0       	rjmp	.+14     	; 0x4954 <vfprintf+0x282>
    4946:	60 81       	ld	r22, Z
    4948:	71 81       	ldd	r23, Z+1	; 0x01
    494a:	82 81       	ldd	r24, Z+2	; 0x02
    494c:	93 81       	ldd	r25, Z+3	; 0x03
    494e:	0c 5f       	subi	r16, 0xFC	; 252
    4950:	1f 4f       	sbci	r17, 0xFF	; 255
    4952:	06 c0       	rjmp	.+12     	; 0x4960 <vfprintf+0x28e>
    4954:	60 81       	ld	r22, Z
    4956:	71 81       	ldd	r23, Z+1	; 0x01
    4958:	80 e0       	ldi	r24, 0x00	; 0
    495a:	90 e0       	ldi	r25, 0x00	; 0
    495c:	0e 5f       	subi	r16, 0xFE	; 254
    495e:	1f 4f       	sbci	r17, 0xFF	; 255
    4960:	a3 01       	movw	r20, r6
    4962:	1d d2       	rcall	.+1082   	; 0x4d9e <__ultoa_invert>
    4964:	88 2e       	mov	r8, r24
    4966:	86 18       	sub	r8, r6
    4968:	fb 2d       	mov	r31, r11
    496a:	ff 77       	andi	r31, 0x7F	; 127
    496c:	3f 2e       	mov	r3, r31
    496e:	36 fe       	sbrs	r3, 6
    4970:	0d c0       	rjmp	.+26     	; 0x498c <vfprintf+0x2ba>
    4972:	23 2d       	mov	r18, r3
    4974:	2e 7f       	andi	r18, 0xFE	; 254
    4976:	a2 2e       	mov	r10, r18
    4978:	89 14       	cp	r8, r9
    497a:	58 f4       	brcc	.+22     	; 0x4992 <vfprintf+0x2c0>
    497c:	34 fe       	sbrs	r3, 4
    497e:	0b c0       	rjmp	.+22     	; 0x4996 <vfprintf+0x2c4>
    4980:	32 fc       	sbrc	r3, 2
    4982:	09 c0       	rjmp	.+18     	; 0x4996 <vfprintf+0x2c4>
    4984:	83 2d       	mov	r24, r3
    4986:	8e 7e       	andi	r24, 0xEE	; 238
    4988:	a8 2e       	mov	r10, r24
    498a:	05 c0       	rjmp	.+10     	; 0x4996 <vfprintf+0x2c4>
    498c:	b8 2c       	mov	r11, r8
    498e:	a3 2c       	mov	r10, r3
    4990:	03 c0       	rjmp	.+6      	; 0x4998 <vfprintf+0x2c6>
    4992:	b8 2c       	mov	r11, r8
    4994:	01 c0       	rjmp	.+2      	; 0x4998 <vfprintf+0x2c6>
    4996:	b9 2c       	mov	r11, r9
    4998:	a4 fe       	sbrs	r10, 4
    499a:	0f c0       	rjmp	.+30     	; 0x49ba <vfprintf+0x2e8>
    499c:	fe 01       	movw	r30, r28
    499e:	e8 0d       	add	r30, r8
    49a0:	f1 1d       	adc	r31, r1
    49a2:	80 81       	ld	r24, Z
    49a4:	80 33       	cpi	r24, 0x30	; 48
    49a6:	21 f4       	brne	.+8      	; 0x49b0 <vfprintf+0x2de>
    49a8:	9a 2d       	mov	r25, r10
    49aa:	99 7e       	andi	r25, 0xE9	; 233
    49ac:	a9 2e       	mov	r10, r25
    49ae:	09 c0       	rjmp	.+18     	; 0x49c2 <vfprintf+0x2f0>
    49b0:	a2 fe       	sbrs	r10, 2
    49b2:	06 c0       	rjmp	.+12     	; 0x49c0 <vfprintf+0x2ee>
    49b4:	b3 94       	inc	r11
    49b6:	b3 94       	inc	r11
    49b8:	04 c0       	rjmp	.+8      	; 0x49c2 <vfprintf+0x2f0>
    49ba:	8a 2d       	mov	r24, r10
    49bc:	86 78       	andi	r24, 0x86	; 134
    49be:	09 f0       	breq	.+2      	; 0x49c2 <vfprintf+0x2f0>
    49c0:	b3 94       	inc	r11
    49c2:	a3 fc       	sbrc	r10, 3
    49c4:	10 c0       	rjmp	.+32     	; 0x49e6 <vfprintf+0x314>
    49c6:	a0 fe       	sbrs	r10, 0
    49c8:	06 c0       	rjmp	.+12     	; 0x49d6 <vfprintf+0x304>
    49ca:	b2 14       	cp	r11, r2
    49cc:	80 f4       	brcc	.+32     	; 0x49ee <vfprintf+0x31c>
    49ce:	28 0c       	add	r2, r8
    49d0:	92 2c       	mov	r9, r2
    49d2:	9b 18       	sub	r9, r11
    49d4:	0d c0       	rjmp	.+26     	; 0x49f0 <vfprintf+0x31e>
    49d6:	b2 14       	cp	r11, r2
    49d8:	58 f4       	brcc	.+22     	; 0x49f0 <vfprintf+0x31e>
    49da:	b6 01       	movw	r22, r12
    49dc:	80 e2       	ldi	r24, 0x20	; 32
    49de:	90 e0       	ldi	r25, 0x00	; 0
    49e0:	a2 d1       	rcall	.+836    	; 0x4d26 <fputc>
    49e2:	b3 94       	inc	r11
    49e4:	f8 cf       	rjmp	.-16     	; 0x49d6 <vfprintf+0x304>
    49e6:	b2 14       	cp	r11, r2
    49e8:	18 f4       	brcc	.+6      	; 0x49f0 <vfprintf+0x31e>
    49ea:	2b 18       	sub	r2, r11
    49ec:	02 c0       	rjmp	.+4      	; 0x49f2 <vfprintf+0x320>
    49ee:	98 2c       	mov	r9, r8
    49f0:	21 2c       	mov	r2, r1
    49f2:	a4 fe       	sbrs	r10, 4
    49f4:	0f c0       	rjmp	.+30     	; 0x4a14 <vfprintf+0x342>
    49f6:	b6 01       	movw	r22, r12
    49f8:	80 e3       	ldi	r24, 0x30	; 48
    49fa:	90 e0       	ldi	r25, 0x00	; 0
    49fc:	94 d1       	rcall	.+808    	; 0x4d26 <fputc>
    49fe:	a2 fe       	sbrs	r10, 2
    4a00:	16 c0       	rjmp	.+44     	; 0x4a2e <vfprintf+0x35c>
    4a02:	a1 fc       	sbrc	r10, 1
    4a04:	03 c0       	rjmp	.+6      	; 0x4a0c <vfprintf+0x33a>
    4a06:	88 e7       	ldi	r24, 0x78	; 120
    4a08:	90 e0       	ldi	r25, 0x00	; 0
    4a0a:	02 c0       	rjmp	.+4      	; 0x4a10 <vfprintf+0x33e>
    4a0c:	88 e5       	ldi	r24, 0x58	; 88
    4a0e:	90 e0       	ldi	r25, 0x00	; 0
    4a10:	b6 01       	movw	r22, r12
    4a12:	0c c0       	rjmp	.+24     	; 0x4a2c <vfprintf+0x35a>
    4a14:	8a 2d       	mov	r24, r10
    4a16:	86 78       	andi	r24, 0x86	; 134
    4a18:	51 f0       	breq	.+20     	; 0x4a2e <vfprintf+0x35c>
    4a1a:	a1 fe       	sbrs	r10, 1
    4a1c:	02 c0       	rjmp	.+4      	; 0x4a22 <vfprintf+0x350>
    4a1e:	8b e2       	ldi	r24, 0x2B	; 43
    4a20:	01 c0       	rjmp	.+2      	; 0x4a24 <vfprintf+0x352>
    4a22:	80 e2       	ldi	r24, 0x20	; 32
    4a24:	a7 fc       	sbrc	r10, 7
    4a26:	8d e2       	ldi	r24, 0x2D	; 45
    4a28:	b6 01       	movw	r22, r12
    4a2a:	90 e0       	ldi	r25, 0x00	; 0
    4a2c:	7c d1       	rcall	.+760    	; 0x4d26 <fputc>
    4a2e:	89 14       	cp	r8, r9
    4a30:	30 f4       	brcc	.+12     	; 0x4a3e <vfprintf+0x36c>
    4a32:	b6 01       	movw	r22, r12
    4a34:	80 e3       	ldi	r24, 0x30	; 48
    4a36:	90 e0       	ldi	r25, 0x00	; 0
    4a38:	76 d1       	rcall	.+748    	; 0x4d26 <fputc>
    4a3a:	9a 94       	dec	r9
    4a3c:	f8 cf       	rjmp	.-16     	; 0x4a2e <vfprintf+0x35c>
    4a3e:	8a 94       	dec	r8
    4a40:	f3 01       	movw	r30, r6
    4a42:	e8 0d       	add	r30, r8
    4a44:	f1 1d       	adc	r31, r1
    4a46:	80 81       	ld	r24, Z
    4a48:	b6 01       	movw	r22, r12
    4a4a:	90 e0       	ldi	r25, 0x00	; 0
    4a4c:	6c d1       	rcall	.+728    	; 0x4d26 <fputc>
    4a4e:	81 10       	cpse	r8, r1
    4a50:	f6 cf       	rjmp	.-20     	; 0x4a3e <vfprintf+0x36c>
    4a52:	22 20       	and	r2, r2
    4a54:	09 f4       	brne	.+2      	; 0x4a58 <vfprintf+0x386>
    4a56:	4e ce       	rjmp	.-868    	; 0x46f4 <vfprintf+0x22>
    4a58:	b6 01       	movw	r22, r12
    4a5a:	80 e2       	ldi	r24, 0x20	; 32
    4a5c:	90 e0       	ldi	r25, 0x00	; 0
    4a5e:	63 d1       	rcall	.+710    	; 0x4d26 <fputc>
    4a60:	2a 94       	dec	r2
    4a62:	f7 cf       	rjmp	.-18     	; 0x4a52 <vfprintf+0x380>
    4a64:	f6 01       	movw	r30, r12
    4a66:	86 81       	ldd	r24, Z+6	; 0x06
    4a68:	97 81       	ldd	r25, Z+7	; 0x07
    4a6a:	02 c0       	rjmp	.+4      	; 0x4a70 <vfprintf+0x39e>
    4a6c:	8f ef       	ldi	r24, 0xFF	; 255
    4a6e:	9f ef       	ldi	r25, 0xFF	; 255
    4a70:	2b 96       	adiw	r28, 0x0b	; 11
    4a72:	e2 e1       	ldi	r30, 0x12	; 18
    4a74:	0b c2       	rjmp	.+1046   	; 0x4e8c <__epilogue_restores__>

00004a76 <calloc>:
    4a76:	0f 93       	push	r16
    4a78:	1f 93       	push	r17
    4a7a:	cf 93       	push	r28
    4a7c:	df 93       	push	r29
    4a7e:	86 9f       	mul	r24, r22
    4a80:	80 01       	movw	r16, r0
    4a82:	87 9f       	mul	r24, r23
    4a84:	10 0d       	add	r17, r0
    4a86:	96 9f       	mul	r25, r22
    4a88:	10 0d       	add	r17, r0
    4a8a:	11 24       	eor	r1, r1
    4a8c:	c8 01       	movw	r24, r16
    4a8e:	0d d0       	rcall	.+26     	; 0x4aaa <malloc>
    4a90:	ec 01       	movw	r28, r24
    4a92:	00 97       	sbiw	r24, 0x00	; 0
    4a94:	21 f0       	breq	.+8      	; 0x4a9e <calloc+0x28>
    4a96:	a8 01       	movw	r20, r16
    4a98:	60 e0       	ldi	r22, 0x00	; 0
    4a9a:	70 e0       	ldi	r23, 0x00	; 0
    4a9c:	32 d1       	rcall	.+612    	; 0x4d02 <memset>
    4a9e:	ce 01       	movw	r24, r28
    4aa0:	df 91       	pop	r29
    4aa2:	cf 91       	pop	r28
    4aa4:	1f 91       	pop	r17
    4aa6:	0f 91       	pop	r16
    4aa8:	08 95       	ret

00004aaa <malloc>:
    4aaa:	0f 93       	push	r16
    4aac:	1f 93       	push	r17
    4aae:	cf 93       	push	r28
    4ab0:	df 93       	push	r29
    4ab2:	82 30       	cpi	r24, 0x02	; 2
    4ab4:	91 05       	cpc	r25, r1
    4ab6:	10 f4       	brcc	.+4      	; 0x4abc <malloc+0x12>
    4ab8:	82 e0       	ldi	r24, 0x02	; 2
    4aba:	90 e0       	ldi	r25, 0x00	; 0
    4abc:	e0 91 48 22 	lds	r30, 0x2248	; 0x802248 <__flp>
    4ac0:	f0 91 49 22 	lds	r31, 0x2249	; 0x802249 <__flp+0x1>
    4ac4:	20 e0       	ldi	r18, 0x00	; 0
    4ac6:	30 e0       	ldi	r19, 0x00	; 0
    4ac8:	a0 e0       	ldi	r26, 0x00	; 0
    4aca:	b0 e0       	ldi	r27, 0x00	; 0
    4acc:	30 97       	sbiw	r30, 0x00	; 0
    4ace:	19 f1       	breq	.+70     	; 0x4b16 <malloc+0x6c>
    4ad0:	40 81       	ld	r20, Z
    4ad2:	51 81       	ldd	r21, Z+1	; 0x01
    4ad4:	02 81       	ldd	r16, Z+2	; 0x02
    4ad6:	13 81       	ldd	r17, Z+3	; 0x03
    4ad8:	48 17       	cp	r20, r24
    4ada:	59 07       	cpc	r21, r25
    4adc:	c8 f0       	brcs	.+50     	; 0x4b10 <malloc+0x66>
    4ade:	84 17       	cp	r24, r20
    4ae0:	95 07       	cpc	r25, r21
    4ae2:	69 f4       	brne	.+26     	; 0x4afe <malloc+0x54>
    4ae4:	10 97       	sbiw	r26, 0x00	; 0
    4ae6:	31 f0       	breq	.+12     	; 0x4af4 <malloc+0x4a>
    4ae8:	12 96       	adiw	r26, 0x02	; 2
    4aea:	0c 93       	st	X, r16
    4aec:	12 97       	sbiw	r26, 0x02	; 2
    4aee:	13 96       	adiw	r26, 0x03	; 3
    4af0:	1c 93       	st	X, r17
    4af2:	27 c0       	rjmp	.+78     	; 0x4b42 <malloc+0x98>
    4af4:	00 93 48 22 	sts	0x2248, r16	; 0x802248 <__flp>
    4af8:	10 93 49 22 	sts	0x2249, r17	; 0x802249 <__flp+0x1>
    4afc:	22 c0       	rjmp	.+68     	; 0x4b42 <malloc+0x98>
    4afe:	21 15       	cp	r18, r1
    4b00:	31 05       	cpc	r19, r1
    4b02:	19 f0       	breq	.+6      	; 0x4b0a <malloc+0x60>
    4b04:	42 17       	cp	r20, r18
    4b06:	53 07       	cpc	r21, r19
    4b08:	18 f4       	brcc	.+6      	; 0x4b10 <malloc+0x66>
    4b0a:	9a 01       	movw	r18, r20
    4b0c:	bd 01       	movw	r22, r26
    4b0e:	ef 01       	movw	r28, r30
    4b10:	df 01       	movw	r26, r30
    4b12:	f8 01       	movw	r30, r16
    4b14:	db cf       	rjmp	.-74     	; 0x4acc <malloc+0x22>
    4b16:	21 15       	cp	r18, r1
    4b18:	31 05       	cpc	r19, r1
    4b1a:	f9 f0       	breq	.+62     	; 0x4b5a <malloc+0xb0>
    4b1c:	28 1b       	sub	r18, r24
    4b1e:	39 0b       	sbc	r19, r25
    4b20:	24 30       	cpi	r18, 0x04	; 4
    4b22:	31 05       	cpc	r19, r1
    4b24:	80 f4       	brcc	.+32     	; 0x4b46 <malloc+0x9c>
    4b26:	8a 81       	ldd	r24, Y+2	; 0x02
    4b28:	9b 81       	ldd	r25, Y+3	; 0x03
    4b2a:	61 15       	cp	r22, r1
    4b2c:	71 05       	cpc	r23, r1
    4b2e:	21 f0       	breq	.+8      	; 0x4b38 <malloc+0x8e>
    4b30:	fb 01       	movw	r30, r22
    4b32:	82 83       	std	Z+2, r24	; 0x02
    4b34:	93 83       	std	Z+3, r25	; 0x03
    4b36:	04 c0       	rjmp	.+8      	; 0x4b40 <malloc+0x96>
    4b38:	80 93 48 22 	sts	0x2248, r24	; 0x802248 <__flp>
    4b3c:	90 93 49 22 	sts	0x2249, r25	; 0x802249 <__flp+0x1>
    4b40:	fe 01       	movw	r30, r28
    4b42:	32 96       	adiw	r30, 0x02	; 2
    4b44:	44 c0       	rjmp	.+136    	; 0x4bce <malloc+0x124>
    4b46:	fe 01       	movw	r30, r28
    4b48:	e2 0f       	add	r30, r18
    4b4a:	f3 1f       	adc	r31, r19
    4b4c:	81 93       	st	Z+, r24
    4b4e:	91 93       	st	Z+, r25
    4b50:	22 50       	subi	r18, 0x02	; 2
    4b52:	31 09       	sbc	r19, r1
    4b54:	28 83       	st	Y, r18
    4b56:	39 83       	std	Y+1, r19	; 0x01
    4b58:	3a c0       	rjmp	.+116    	; 0x4bce <malloc+0x124>
    4b5a:	20 91 46 22 	lds	r18, 0x2246	; 0x802246 <__brkval>
    4b5e:	30 91 47 22 	lds	r19, 0x2247	; 0x802247 <__brkval+0x1>
    4b62:	23 2b       	or	r18, r19
    4b64:	41 f4       	brne	.+16     	; 0x4b76 <malloc+0xcc>
    4b66:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
    4b6a:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    4b6e:	20 93 46 22 	sts	0x2246, r18	; 0x802246 <__brkval>
    4b72:	30 93 47 22 	sts	0x2247, r19	; 0x802247 <__brkval+0x1>
    4b76:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    4b7a:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
    4b7e:	21 15       	cp	r18, r1
    4b80:	31 05       	cpc	r19, r1
    4b82:	41 f4       	brne	.+16     	; 0x4b94 <malloc+0xea>
    4b84:	2d b7       	in	r18, 0x3d	; 61
    4b86:	3e b7       	in	r19, 0x3e	; 62
    4b88:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    4b8c:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    4b90:	24 1b       	sub	r18, r20
    4b92:	35 0b       	sbc	r19, r21
    4b94:	e0 91 46 22 	lds	r30, 0x2246	; 0x802246 <__brkval>
    4b98:	f0 91 47 22 	lds	r31, 0x2247	; 0x802247 <__brkval+0x1>
    4b9c:	e2 17       	cp	r30, r18
    4b9e:	f3 07       	cpc	r31, r19
    4ba0:	a0 f4       	brcc	.+40     	; 0x4bca <malloc+0x120>
    4ba2:	2e 1b       	sub	r18, r30
    4ba4:	3f 0b       	sbc	r19, r31
    4ba6:	28 17       	cp	r18, r24
    4ba8:	39 07       	cpc	r19, r25
    4baa:	78 f0       	brcs	.+30     	; 0x4bca <malloc+0x120>
    4bac:	ac 01       	movw	r20, r24
    4bae:	4e 5f       	subi	r20, 0xFE	; 254
    4bb0:	5f 4f       	sbci	r21, 0xFF	; 255
    4bb2:	24 17       	cp	r18, r20
    4bb4:	35 07       	cpc	r19, r21
    4bb6:	48 f0       	brcs	.+18     	; 0x4bca <malloc+0x120>
    4bb8:	4e 0f       	add	r20, r30
    4bba:	5f 1f       	adc	r21, r31
    4bbc:	40 93 46 22 	sts	0x2246, r20	; 0x802246 <__brkval>
    4bc0:	50 93 47 22 	sts	0x2247, r21	; 0x802247 <__brkval+0x1>
    4bc4:	81 93       	st	Z+, r24
    4bc6:	91 93       	st	Z+, r25
    4bc8:	02 c0       	rjmp	.+4      	; 0x4bce <malloc+0x124>
    4bca:	e0 e0       	ldi	r30, 0x00	; 0
    4bcc:	f0 e0       	ldi	r31, 0x00	; 0
    4bce:	cf 01       	movw	r24, r30
    4bd0:	df 91       	pop	r29
    4bd2:	cf 91       	pop	r28
    4bd4:	1f 91       	pop	r17
    4bd6:	0f 91       	pop	r16
    4bd8:	08 95       	ret

00004bda <free>:
    4bda:	cf 93       	push	r28
    4bdc:	df 93       	push	r29
    4bde:	00 97       	sbiw	r24, 0x00	; 0
    4be0:	09 f4       	brne	.+2      	; 0x4be4 <free+0xa>
    4be2:	81 c0       	rjmp	.+258    	; 0x4ce6 <free+0x10c>
    4be4:	fc 01       	movw	r30, r24
    4be6:	32 97       	sbiw	r30, 0x02	; 2
    4be8:	12 82       	std	Z+2, r1	; 0x02
    4bea:	13 82       	std	Z+3, r1	; 0x03
    4bec:	a0 91 48 22 	lds	r26, 0x2248	; 0x802248 <__flp>
    4bf0:	b0 91 49 22 	lds	r27, 0x2249	; 0x802249 <__flp+0x1>
    4bf4:	10 97       	sbiw	r26, 0x00	; 0
    4bf6:	81 f4       	brne	.+32     	; 0x4c18 <free+0x3e>
    4bf8:	20 81       	ld	r18, Z
    4bfa:	31 81       	ldd	r19, Z+1	; 0x01
    4bfc:	82 0f       	add	r24, r18
    4bfe:	93 1f       	adc	r25, r19
    4c00:	20 91 46 22 	lds	r18, 0x2246	; 0x802246 <__brkval>
    4c04:	30 91 47 22 	lds	r19, 0x2247	; 0x802247 <__brkval+0x1>
    4c08:	28 17       	cp	r18, r24
    4c0a:	39 07       	cpc	r19, r25
    4c0c:	51 f5       	brne	.+84     	; 0x4c62 <free+0x88>
    4c0e:	e0 93 46 22 	sts	0x2246, r30	; 0x802246 <__brkval>
    4c12:	f0 93 47 22 	sts	0x2247, r31	; 0x802247 <__brkval+0x1>
    4c16:	67 c0       	rjmp	.+206    	; 0x4ce6 <free+0x10c>
    4c18:	ed 01       	movw	r28, r26
    4c1a:	20 e0       	ldi	r18, 0x00	; 0
    4c1c:	30 e0       	ldi	r19, 0x00	; 0
    4c1e:	ce 17       	cp	r28, r30
    4c20:	df 07       	cpc	r29, r31
    4c22:	40 f4       	brcc	.+16     	; 0x4c34 <free+0x5a>
    4c24:	4a 81       	ldd	r20, Y+2	; 0x02
    4c26:	5b 81       	ldd	r21, Y+3	; 0x03
    4c28:	9e 01       	movw	r18, r28
    4c2a:	41 15       	cp	r20, r1
    4c2c:	51 05       	cpc	r21, r1
    4c2e:	f1 f0       	breq	.+60     	; 0x4c6c <free+0x92>
    4c30:	ea 01       	movw	r28, r20
    4c32:	f5 cf       	rjmp	.-22     	; 0x4c1e <free+0x44>
    4c34:	c2 83       	std	Z+2, r28	; 0x02
    4c36:	d3 83       	std	Z+3, r29	; 0x03
    4c38:	40 81       	ld	r20, Z
    4c3a:	51 81       	ldd	r21, Z+1	; 0x01
    4c3c:	84 0f       	add	r24, r20
    4c3e:	95 1f       	adc	r25, r21
    4c40:	c8 17       	cp	r28, r24
    4c42:	d9 07       	cpc	r29, r25
    4c44:	59 f4       	brne	.+22     	; 0x4c5c <free+0x82>
    4c46:	88 81       	ld	r24, Y
    4c48:	99 81       	ldd	r25, Y+1	; 0x01
    4c4a:	84 0f       	add	r24, r20
    4c4c:	95 1f       	adc	r25, r21
    4c4e:	02 96       	adiw	r24, 0x02	; 2
    4c50:	80 83       	st	Z, r24
    4c52:	91 83       	std	Z+1, r25	; 0x01
    4c54:	8a 81       	ldd	r24, Y+2	; 0x02
    4c56:	9b 81       	ldd	r25, Y+3	; 0x03
    4c58:	82 83       	std	Z+2, r24	; 0x02
    4c5a:	93 83       	std	Z+3, r25	; 0x03
    4c5c:	21 15       	cp	r18, r1
    4c5e:	31 05       	cpc	r19, r1
    4c60:	29 f4       	brne	.+10     	; 0x4c6c <free+0x92>
    4c62:	e0 93 48 22 	sts	0x2248, r30	; 0x802248 <__flp>
    4c66:	f0 93 49 22 	sts	0x2249, r31	; 0x802249 <__flp+0x1>
    4c6a:	3d c0       	rjmp	.+122    	; 0x4ce6 <free+0x10c>
    4c6c:	e9 01       	movw	r28, r18
    4c6e:	ea 83       	std	Y+2, r30	; 0x02
    4c70:	fb 83       	std	Y+3, r31	; 0x03
    4c72:	49 91       	ld	r20, Y+
    4c74:	59 91       	ld	r21, Y+
    4c76:	c4 0f       	add	r28, r20
    4c78:	d5 1f       	adc	r29, r21
    4c7a:	ec 17       	cp	r30, r28
    4c7c:	fd 07       	cpc	r31, r29
    4c7e:	61 f4       	brne	.+24     	; 0x4c98 <free+0xbe>
    4c80:	80 81       	ld	r24, Z
    4c82:	91 81       	ldd	r25, Z+1	; 0x01
    4c84:	84 0f       	add	r24, r20
    4c86:	95 1f       	adc	r25, r21
    4c88:	02 96       	adiw	r24, 0x02	; 2
    4c8a:	e9 01       	movw	r28, r18
    4c8c:	88 83       	st	Y, r24
    4c8e:	99 83       	std	Y+1, r25	; 0x01
    4c90:	82 81       	ldd	r24, Z+2	; 0x02
    4c92:	93 81       	ldd	r25, Z+3	; 0x03
    4c94:	8a 83       	std	Y+2, r24	; 0x02
    4c96:	9b 83       	std	Y+3, r25	; 0x03
    4c98:	e0 e0       	ldi	r30, 0x00	; 0
    4c9a:	f0 e0       	ldi	r31, 0x00	; 0
    4c9c:	12 96       	adiw	r26, 0x02	; 2
    4c9e:	8d 91       	ld	r24, X+
    4ca0:	9c 91       	ld	r25, X
    4ca2:	13 97       	sbiw	r26, 0x03	; 3
    4ca4:	00 97       	sbiw	r24, 0x00	; 0
    4ca6:	19 f0       	breq	.+6      	; 0x4cae <free+0xd4>
    4ca8:	fd 01       	movw	r30, r26
    4caa:	dc 01       	movw	r26, r24
    4cac:	f7 cf       	rjmp	.-18     	; 0x4c9c <free+0xc2>
    4cae:	8d 91       	ld	r24, X+
    4cb0:	9c 91       	ld	r25, X
    4cb2:	11 97       	sbiw	r26, 0x01	; 1
    4cb4:	9d 01       	movw	r18, r26
    4cb6:	2e 5f       	subi	r18, 0xFE	; 254
    4cb8:	3f 4f       	sbci	r19, 0xFF	; 255
    4cba:	82 0f       	add	r24, r18
    4cbc:	93 1f       	adc	r25, r19
    4cbe:	20 91 46 22 	lds	r18, 0x2246	; 0x802246 <__brkval>
    4cc2:	30 91 47 22 	lds	r19, 0x2247	; 0x802247 <__brkval+0x1>
    4cc6:	28 17       	cp	r18, r24
    4cc8:	39 07       	cpc	r19, r25
    4cca:	69 f4       	brne	.+26     	; 0x4ce6 <free+0x10c>
    4ccc:	30 97       	sbiw	r30, 0x00	; 0
    4cce:	29 f4       	brne	.+10     	; 0x4cda <free+0x100>
    4cd0:	10 92 48 22 	sts	0x2248, r1	; 0x802248 <__flp>
    4cd4:	10 92 49 22 	sts	0x2249, r1	; 0x802249 <__flp+0x1>
    4cd8:	02 c0       	rjmp	.+4      	; 0x4cde <free+0x104>
    4cda:	12 82       	std	Z+2, r1	; 0x02
    4cdc:	13 82       	std	Z+3, r1	; 0x03
    4cde:	a0 93 46 22 	sts	0x2246, r26	; 0x802246 <__brkval>
    4ce2:	b0 93 47 22 	sts	0x2247, r27	; 0x802247 <__brkval+0x1>
    4ce6:	df 91       	pop	r29
    4ce8:	cf 91       	pop	r28
    4cea:	08 95       	ret

00004cec <strnlen_P>:
    4cec:	fc 01       	movw	r30, r24
    4cee:	05 90       	lpm	r0, Z+
    4cf0:	61 50       	subi	r22, 0x01	; 1
    4cf2:	70 40       	sbci	r23, 0x00	; 0
    4cf4:	01 10       	cpse	r0, r1
    4cf6:	d8 f7       	brcc	.-10     	; 0x4cee <strnlen_P+0x2>
    4cf8:	80 95       	com	r24
    4cfa:	90 95       	com	r25
    4cfc:	8e 0f       	add	r24, r30
    4cfe:	9f 1f       	adc	r25, r31
    4d00:	08 95       	ret

00004d02 <memset>:
    4d02:	dc 01       	movw	r26, r24
    4d04:	01 c0       	rjmp	.+2      	; 0x4d08 <memset+0x6>
    4d06:	6d 93       	st	X+, r22
    4d08:	41 50       	subi	r20, 0x01	; 1
    4d0a:	50 40       	sbci	r21, 0x00	; 0
    4d0c:	e0 f7       	brcc	.-8      	; 0x4d06 <memset+0x4>
    4d0e:	08 95       	ret

00004d10 <strnlen>:
    4d10:	fc 01       	movw	r30, r24
    4d12:	61 50       	subi	r22, 0x01	; 1
    4d14:	70 40       	sbci	r23, 0x00	; 0
    4d16:	01 90       	ld	r0, Z+
    4d18:	01 10       	cpse	r0, r1
    4d1a:	d8 f7       	brcc	.-10     	; 0x4d12 <strnlen+0x2>
    4d1c:	80 95       	com	r24
    4d1e:	90 95       	com	r25
    4d20:	8e 0f       	add	r24, r30
    4d22:	9f 1f       	adc	r25, r31
    4d24:	08 95       	ret

00004d26 <fputc>:
    4d26:	0f 93       	push	r16
    4d28:	1f 93       	push	r17
    4d2a:	cf 93       	push	r28
    4d2c:	df 93       	push	r29
    4d2e:	fb 01       	movw	r30, r22
    4d30:	23 81       	ldd	r18, Z+3	; 0x03
    4d32:	21 fd       	sbrc	r18, 1
    4d34:	03 c0       	rjmp	.+6      	; 0x4d3c <fputc+0x16>
    4d36:	8f ef       	ldi	r24, 0xFF	; 255
    4d38:	9f ef       	ldi	r25, 0xFF	; 255
    4d3a:	2c c0       	rjmp	.+88     	; 0x4d94 <fputc+0x6e>
    4d3c:	22 ff       	sbrs	r18, 2
    4d3e:	16 c0       	rjmp	.+44     	; 0x4d6c <fputc+0x46>
    4d40:	46 81       	ldd	r20, Z+6	; 0x06
    4d42:	57 81       	ldd	r21, Z+7	; 0x07
    4d44:	24 81       	ldd	r18, Z+4	; 0x04
    4d46:	35 81       	ldd	r19, Z+5	; 0x05
    4d48:	42 17       	cp	r20, r18
    4d4a:	53 07       	cpc	r21, r19
    4d4c:	44 f4       	brge	.+16     	; 0x4d5e <fputc+0x38>
    4d4e:	a0 81       	ld	r26, Z
    4d50:	b1 81       	ldd	r27, Z+1	; 0x01
    4d52:	9d 01       	movw	r18, r26
    4d54:	2f 5f       	subi	r18, 0xFF	; 255
    4d56:	3f 4f       	sbci	r19, 0xFF	; 255
    4d58:	20 83       	st	Z, r18
    4d5a:	31 83       	std	Z+1, r19	; 0x01
    4d5c:	8c 93       	st	X, r24
    4d5e:	26 81       	ldd	r18, Z+6	; 0x06
    4d60:	37 81       	ldd	r19, Z+7	; 0x07
    4d62:	2f 5f       	subi	r18, 0xFF	; 255
    4d64:	3f 4f       	sbci	r19, 0xFF	; 255
    4d66:	26 83       	std	Z+6, r18	; 0x06
    4d68:	37 83       	std	Z+7, r19	; 0x07
    4d6a:	14 c0       	rjmp	.+40     	; 0x4d94 <fputc+0x6e>
    4d6c:	8b 01       	movw	r16, r22
    4d6e:	ec 01       	movw	r28, r24
    4d70:	fb 01       	movw	r30, r22
    4d72:	00 84       	ldd	r0, Z+8	; 0x08
    4d74:	f1 85       	ldd	r31, Z+9	; 0x09
    4d76:	e0 2d       	mov	r30, r0
    4d78:	09 95       	icall
    4d7a:	89 2b       	or	r24, r25
    4d7c:	e1 f6       	brne	.-72     	; 0x4d36 <fputc+0x10>
    4d7e:	d8 01       	movw	r26, r16
    4d80:	16 96       	adiw	r26, 0x06	; 6
    4d82:	8d 91       	ld	r24, X+
    4d84:	9c 91       	ld	r25, X
    4d86:	17 97       	sbiw	r26, 0x07	; 7
    4d88:	01 96       	adiw	r24, 0x01	; 1
    4d8a:	16 96       	adiw	r26, 0x06	; 6
    4d8c:	8d 93       	st	X+, r24
    4d8e:	9c 93       	st	X, r25
    4d90:	17 97       	sbiw	r26, 0x07	; 7
    4d92:	ce 01       	movw	r24, r28
    4d94:	df 91       	pop	r29
    4d96:	cf 91       	pop	r28
    4d98:	1f 91       	pop	r17
    4d9a:	0f 91       	pop	r16
    4d9c:	08 95       	ret

00004d9e <__ultoa_invert>:
    4d9e:	fa 01       	movw	r30, r20
    4da0:	aa 27       	eor	r26, r26
    4da2:	28 30       	cpi	r18, 0x08	; 8
    4da4:	51 f1       	breq	.+84     	; 0x4dfa <__ultoa_invert+0x5c>
    4da6:	20 31       	cpi	r18, 0x10	; 16
    4da8:	81 f1       	breq	.+96     	; 0x4e0a <__ultoa_invert+0x6c>
    4daa:	e8 94       	clt
    4dac:	6f 93       	push	r22
    4dae:	6e 7f       	andi	r22, 0xFE	; 254
    4db0:	6e 5f       	subi	r22, 0xFE	; 254
    4db2:	7f 4f       	sbci	r23, 0xFF	; 255
    4db4:	8f 4f       	sbci	r24, 0xFF	; 255
    4db6:	9f 4f       	sbci	r25, 0xFF	; 255
    4db8:	af 4f       	sbci	r26, 0xFF	; 255
    4dba:	b1 e0       	ldi	r27, 0x01	; 1
    4dbc:	3e d0       	rcall	.+124    	; 0x4e3a <__ultoa_invert+0x9c>
    4dbe:	b4 e0       	ldi	r27, 0x04	; 4
    4dc0:	3c d0       	rcall	.+120    	; 0x4e3a <__ultoa_invert+0x9c>
    4dc2:	67 0f       	add	r22, r23
    4dc4:	78 1f       	adc	r23, r24
    4dc6:	89 1f       	adc	r24, r25
    4dc8:	9a 1f       	adc	r25, r26
    4dca:	a1 1d       	adc	r26, r1
    4dcc:	68 0f       	add	r22, r24
    4dce:	79 1f       	adc	r23, r25
    4dd0:	8a 1f       	adc	r24, r26
    4dd2:	91 1d       	adc	r25, r1
    4dd4:	a1 1d       	adc	r26, r1
    4dd6:	6a 0f       	add	r22, r26
    4dd8:	71 1d       	adc	r23, r1
    4dda:	81 1d       	adc	r24, r1
    4ddc:	91 1d       	adc	r25, r1
    4dde:	a1 1d       	adc	r26, r1
    4de0:	20 d0       	rcall	.+64     	; 0x4e22 <__ultoa_invert+0x84>
    4de2:	09 f4       	brne	.+2      	; 0x4de6 <__ultoa_invert+0x48>
    4de4:	68 94       	set
    4de6:	3f 91       	pop	r19
    4de8:	2a e0       	ldi	r18, 0x0A	; 10
    4dea:	26 9f       	mul	r18, r22
    4dec:	11 24       	eor	r1, r1
    4dee:	30 19       	sub	r19, r0
    4df0:	30 5d       	subi	r19, 0xD0	; 208
    4df2:	31 93       	st	Z+, r19
    4df4:	de f6       	brtc	.-74     	; 0x4dac <__ultoa_invert+0xe>
    4df6:	cf 01       	movw	r24, r30
    4df8:	08 95       	ret
    4dfa:	46 2f       	mov	r20, r22
    4dfc:	47 70       	andi	r20, 0x07	; 7
    4dfe:	40 5d       	subi	r20, 0xD0	; 208
    4e00:	41 93       	st	Z+, r20
    4e02:	b3 e0       	ldi	r27, 0x03	; 3
    4e04:	0f d0       	rcall	.+30     	; 0x4e24 <__ultoa_invert+0x86>
    4e06:	c9 f7       	brne	.-14     	; 0x4dfa <__ultoa_invert+0x5c>
    4e08:	f6 cf       	rjmp	.-20     	; 0x4df6 <__ultoa_invert+0x58>
    4e0a:	46 2f       	mov	r20, r22
    4e0c:	4f 70       	andi	r20, 0x0F	; 15
    4e0e:	40 5d       	subi	r20, 0xD0	; 208
    4e10:	4a 33       	cpi	r20, 0x3A	; 58
    4e12:	18 f0       	brcs	.+6      	; 0x4e1a <__ultoa_invert+0x7c>
    4e14:	49 5d       	subi	r20, 0xD9	; 217
    4e16:	31 fd       	sbrc	r19, 1
    4e18:	40 52       	subi	r20, 0x20	; 32
    4e1a:	41 93       	st	Z+, r20
    4e1c:	02 d0       	rcall	.+4      	; 0x4e22 <__ultoa_invert+0x84>
    4e1e:	a9 f7       	brne	.-22     	; 0x4e0a <__ultoa_invert+0x6c>
    4e20:	ea cf       	rjmp	.-44     	; 0x4df6 <__ultoa_invert+0x58>
    4e22:	b4 e0       	ldi	r27, 0x04	; 4
    4e24:	a6 95       	lsr	r26
    4e26:	97 95       	ror	r25
    4e28:	87 95       	ror	r24
    4e2a:	77 95       	ror	r23
    4e2c:	67 95       	ror	r22
    4e2e:	ba 95       	dec	r27
    4e30:	c9 f7       	brne	.-14     	; 0x4e24 <__ultoa_invert+0x86>
    4e32:	00 97       	sbiw	r24, 0x00	; 0
    4e34:	61 05       	cpc	r22, r1
    4e36:	71 05       	cpc	r23, r1
    4e38:	08 95       	ret
    4e3a:	9b 01       	movw	r18, r22
    4e3c:	ac 01       	movw	r20, r24
    4e3e:	0a 2e       	mov	r0, r26
    4e40:	06 94       	lsr	r0
    4e42:	57 95       	ror	r21
    4e44:	47 95       	ror	r20
    4e46:	37 95       	ror	r19
    4e48:	27 95       	ror	r18
    4e4a:	ba 95       	dec	r27
    4e4c:	c9 f7       	brne	.-14     	; 0x4e40 <__ultoa_invert+0xa2>
    4e4e:	62 0f       	add	r22, r18
    4e50:	73 1f       	adc	r23, r19
    4e52:	84 1f       	adc	r24, r20
    4e54:	95 1f       	adc	r25, r21
    4e56:	a0 1d       	adc	r26, r0
    4e58:	08 95       	ret

00004e5a <__prologue_saves__>:
    4e5a:	2f 92       	push	r2
    4e5c:	3f 92       	push	r3
    4e5e:	4f 92       	push	r4
    4e60:	5f 92       	push	r5
    4e62:	6f 92       	push	r6
    4e64:	7f 92       	push	r7
    4e66:	8f 92       	push	r8
    4e68:	9f 92       	push	r9
    4e6a:	af 92       	push	r10
    4e6c:	bf 92       	push	r11
    4e6e:	cf 92       	push	r12
    4e70:	df 92       	push	r13
    4e72:	ef 92       	push	r14
    4e74:	ff 92       	push	r15
    4e76:	0f 93       	push	r16
    4e78:	1f 93       	push	r17
    4e7a:	cf 93       	push	r28
    4e7c:	df 93       	push	r29
    4e7e:	cd b7       	in	r28, 0x3d	; 61
    4e80:	de b7       	in	r29, 0x3e	; 62
    4e82:	ca 1b       	sub	r28, r26
    4e84:	db 0b       	sbc	r29, r27
    4e86:	cd bf       	out	0x3d, r28	; 61
    4e88:	de bf       	out	0x3e, r29	; 62
    4e8a:	09 94       	ijmp

00004e8c <__epilogue_restores__>:
    4e8c:	2a 88       	ldd	r2, Y+18	; 0x12
    4e8e:	39 88       	ldd	r3, Y+17	; 0x11
    4e90:	48 88       	ldd	r4, Y+16	; 0x10
    4e92:	5f 84       	ldd	r5, Y+15	; 0x0f
    4e94:	6e 84       	ldd	r6, Y+14	; 0x0e
    4e96:	7d 84       	ldd	r7, Y+13	; 0x0d
    4e98:	8c 84       	ldd	r8, Y+12	; 0x0c
    4e9a:	9b 84       	ldd	r9, Y+11	; 0x0b
    4e9c:	aa 84       	ldd	r10, Y+10	; 0x0a
    4e9e:	b9 84       	ldd	r11, Y+9	; 0x09
    4ea0:	c8 84       	ldd	r12, Y+8	; 0x08
    4ea2:	df 80       	ldd	r13, Y+7	; 0x07
    4ea4:	ee 80       	ldd	r14, Y+6	; 0x06
    4ea6:	fd 80       	ldd	r15, Y+5	; 0x05
    4ea8:	0c 81       	ldd	r16, Y+4	; 0x04
    4eaa:	1b 81       	ldd	r17, Y+3	; 0x03
    4eac:	aa 81       	ldd	r26, Y+2	; 0x02
    4eae:	b9 81       	ldd	r27, Y+1	; 0x01
    4eb0:	ce 0f       	add	r28, r30
    4eb2:	d1 1d       	adc	r29, r1
    4eb4:	cd bf       	out	0x3d, r28	; 61
    4eb6:	de bf       	out	0x3e, r29	; 62
    4eb8:	ed 01       	movw	r28, r26
    4eba:	08 95       	ret

00004ebc <_exit>:
    4ebc:	f8 94       	cli

00004ebe <__stop_program>:
    4ebe:	ff cf       	rjmp	.-2      	; 0x4ebe <__stop_program>
